{"ast":null,"code":"import { ref, computed, onMounted } from 'vue';\nimport axios from '@/utils/request';\nimport { getArticleCoverageFromCOS } from '@/utils/cosService';\nimport { ElMessage } from 'element-plus';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { openUrl } from '@/utils/routeJudge';\nexport default {\n  __name: 'ArticleListC',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const currentPage = ref(1);\n    const store = useStore();\n    const id = store.state.columnArticleTest;\n    const articles = ref([]);\n    const router = useRouter();\n\n    // 添加一个锁状态\n    let isLoading = false;\n    async function load() {\n      if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\n      isLoading = true; // 开始加载数据，设置锁状态为true\n      try {\n        if (currentPage.value === 1) {\n          currentPage.value++;\n        }\n        await fetchArticleColumn(currentPage.value);\n        currentPage.value++; // 只有在请求成功完成后才递增页码\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('滚动时的未知错误');\n      } finally {\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\n      }\n    }\n    async function fetchArticleColumn(currentPage) {\n      try {\n        const response = await axios.get('/column/article', {\n          params: {\n            id: id,\n            page: currentPage,\n            pageSize: 10\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          const filteredArticles = response.data.data.records.filter(article => article.access === 0); // 只保留公共可见的文章\n          const updates = filteredArticles.map(async article => {\n            const coverPicture = await getArticleCoverageFromCOS(article.id);\n            const labels = computed(() => article.label.split('，'));\n            return {\n              ...article,\n              labels,\n              coverPicture\n            };\n          });\n          const updatedArticles = await Promise.all(updates);\n          articles.value = [...articles.value, ...updatedArticles];\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取专栏的文章列表失败\");\n          ElMessage.error(\"获取专栏的文章列表失败\");\n        }\n      } catch (error) {\n        console.error(\"获取专栏的文章列表失败\", error);\n        ElMessage.error('获取专栏的文章列表失败');\n      }\n    }\n    const goToDetail = item => {\n      // const routeLocation = router.resolve({ path: `/TheArticle/${item.id}`});\n      // window.open(routeLocation.href, '_blank');\n      openUrl(`/TheArticle/${item.id}`);\n    };\n    onMounted(() => {\n      fetchArticleColumn(currentPage.value);\n    });\n    const __returned__ = {\n      currentPage,\n      store,\n      id,\n      articles,\n      router,\n      get isLoading() {\n        return isLoading;\n      },\n      set isLoading(v) {\n        isLoading = v;\n      },\n      load,\n      fetchArticleColumn,\n      goToDetail,\n      ref,\n      computed,\n      onMounted,\n      get axios() {\n        return axios;\n      },\n      get getArticleCoverageFromCOS() {\n        return getArticleCoverageFromCOS;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get useStore() {\n        return useStore;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get openUrl() {\n        return openUrl;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","axios","getArticleCoverageFromCOS","ElMessage","useStore","useRouter","openUrl","currentPage","store","id","state","columnArticleTest","articles","router","isLoading","load","value","fetchArticleColumn","error","console","response","get","params","page","pageSize","data","code","records","length","filteredArticles","filter","article","access","updates","map","coverPicture","labels","label","split","updatedArticles","Promise","all","msg","toString","goToDetail","item"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/OtherUserPersonalpage/articleColumn/ArticleListC.vue"],"sourcesContent":["<template>\r\n  <div class=\"cbutton\">\r\n    <span class=\"tatitle\">TA的文章</span>\r\n  </div>\r\n  <div style=\"width: 100%;\">\r\n    <div v-if=\"articles || articles.length !== 0\" class=\"hh1\" v-infinite-scroll=\"load\" infinite-scroll-distance=\"100\" infinite-scroll-immediate=\"false\">\r\n      <div class=\"small\" v-for=\"(item, index) in articles\" :key=\"index\" @click=\"goToDetail(item)\">\r\n        <div class=\"container\">\r\n          <div class=\"one\">\r\n            <img class=\"largePicture\" :src=\"item.coverPicture\" alt=\"\">\r\n          </div>\r\n          <div class=\"two\">\r\n            <h3 >{{ item.title }}</h3>\r\n            <p class=\"multi-line-ellipsis-4\">{{ item.summary }}</p>      \r\n          </div>\r\n        </div>\r\n        <div class=\"lall\">\r\n          <!-- 标签 -->\r\n          <div>\r\n            <div class=\"classify\">\r\n              <span class=\"cptext\">分类</span>\r\n              <span class=\"clab\">{{ item.subBoardName }}</span>\r\n            </div>\r\n            <div class=\"classify\">\r\n              <span class=\"cptext\">标签</span>\r\n              <span class=\"clab\" v-for=\"label in item.labels\" :key=\"label\" round>#{{ label }}</span>\r\n            </div>\r\n          </div>\r\n          <!-- 点赞图标+时间 -->\r\n          <div>\r\n            <!-- 点赞图标 -->\r\n            <div class=\"attached\">\r\n              <div class=\"cri\">\r\n                  <img class=\"like-pic\" src=\"@/assets/LikeBefore.svg\">\r\n                  <span class=\"cname\">{{ item.likeCount }}</span>\r\n              </div>\r\n              <div class=\"cri\">\r\n                  <img class=\"like-pic\" src=\"@/assets/Comment.svg\">\r\n                  <span class=\"cname\">{{ item.commentCount }}</span>\r\n              </div>\r\n            </div>   \r\n            <!-- 时间  -->\r\n            <span class=\"ptime\">{{ item.postTime }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <el-empty \r\n        v-else\r\n        :image-size=\"200\" \r\n        description=\"他还没有文章呢，逛逛别的吧！\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n  import { ref,computed,onMounted} from 'vue';\r\n  import axios from '@/utils/request';\r\n  import { getArticleCoverageFromCOS } from '@/utils/cosService';\r\n  import { ElMessage } from 'element-plus';\r\n  import { useStore } from 'vuex';\r\n  import { useRouter } from 'vue-router';\r\n  import { openUrl } from '@/utils/routeJudge'\r\n\r\n  const currentPage = ref(1);\r\n  const store = useStore();\r\n  const id = store.state.columnArticleTest;\r\n  const articles = ref([]);\r\n  const router = useRouter();\r\n\r\n  // 添加一个锁状态\r\n  let isLoading = false;\r\n  async function load() {\r\n      if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\r\n      isLoading = true; // 开始加载数据，设置锁状态为true\r\n      try {\r\n          if(currentPage.value === 1){\r\n            currentPage.value++;\r\n          }\r\n          await fetchArticleColumn(currentPage.value);\r\n          currentPage.value++; // 只有在请求成功完成后才递增页码\r\n      } catch (error) {\r\n          console.error(error);\r\n          ElMessage.error('滚动时的未知错误');\r\n      } finally {\r\n          isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\r\n      }\r\n  }\r\n\r\n  \r\n  async function fetchArticleColumn(currentPage) {\r\n    try {\r\n      const response = await axios.get('/column/article', {\r\n        params: {\r\n          id: id,\r\n          page: currentPage,\r\n          pageSize: 10, \r\n        }\r\n      });\r\n      if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n        const filteredArticles = response.data.data.records.filter(article => article.access === 0); // 只保留公共可见的文章\r\n        const updates = filteredArticles.map(async (article) => {\r\n          const coverPicture = await getArticleCoverageFromCOS(article.id);\r\n          const labels = computed(() => article.label.split('，'));\r\n          return {\r\n            ...article,\r\n            labels,\r\n            coverPicture\r\n          };\r\n        });\r\n        const updatedArticles = await Promise.all(updates);\r\n        articles.value = [...articles.value, ...updatedArticles];\r\n      } else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n        // ElMessage.info('已加载所有数据');\r\n      } else if (response.data.code === 0 && response.data.msg) {\r\n        ElMessage.error(response.data.msg.toString());\r\n      } else {\r\n        console.error(\"获取专栏的文章列表失败\");\r\n        ElMessage.error(\"获取专栏的文章列表失败\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"获取专栏的文章列表失败\", error);\r\n      ElMessage.error('获取专栏的文章列表失败');\r\n    }\r\n  }\r\n\r\n\r\n  const goToDetail = (item) =>{\r\n    // const routeLocation = router.resolve({ path: `/TheArticle/${item.id}`});\r\n    // window.open(routeLocation.href, '_blank');\r\n    openUrl(`/TheArticle/${item.id}`)\r\n  }\r\n\r\n  onMounted(() => {\r\n    fetchArticleColumn(currentPage.value);\r\n  });\r\n\r\n</script>\r\n  \r\n\r\n<style scoped>\r\n.hh1{\r\n  height: 81vh;\r\n  overflow-y: auto;\r\n  margin: 0px;\r\n  overflow-x: hidden;\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n}\r\n.cbutton{\r\n  border-bottom: 1px solid rgb(212, 212, 212);;\r\n  padding: 9px 1%;\r\n  width: 98%;\r\n}\r\n.tatitle{\r\n  color: #000; \r\n  text-align: center;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 23px;\r\n  line-height: 1.6; \r\n}\r\n.small{\r\n  position: relative;\r\n  margin: 20px 25px 40px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding-bottom: 5px;\r\n  width: 90%;\r\n  height: 235px;\r\n  border: 1px solid #e8e8e8;\r\n  border-radius: 8px;\r\n  background-color: #fffffc;\r\n  box-shadow: 1px 1px 7px 0px rgb(112 112 112 / 16%);\r\n  transition: transform 0.2s ease-out;\r\n  cursor: pointer;\r\n}\r\n.small:hover {\r\n  transform: translateY(-5px) translateX(5px);\r\n}\r\n.container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n.one{\r\n  width: 170px;\r\n  height: 140px;\r\n}\r\n.largePicture{\r\n  width: 170px;\r\n  height: 140px;\r\n  border-radius: 8px;\r\n  border: 1px solid #b4b4b4;\r\n}\r\n.two{\r\n  padding: 0px 20px;\r\n  width: 50%;\r\n}\r\nh3{\r\n  color: #000;\r\n  text-align: center;\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  margin: 10px 0px 0px;\r\n  line-height: 1.6;\r\n}\r\np{\r\n  width: 100%;\r\n  height: 90px;\r\n  margin: 10px 0px 10px;\r\n  color: #000;\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n}\r\n.attached{\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  margin-bottom: 10px;\r\n}\r\n.ptime{\r\n  color: #666666;\r\n  font-size: 12px;\r\n  line-height: 1.6;\r\n}\r\n\r\n.cri {\r\n  display: flex; \r\n  align-items: center; \r\n}\r\n\r\n.like-pic {\r\n  width: 20px;\r\n  height: 20px;\r\n  display: inline-block;\r\n}\r\n.cname{\r\n  color: #2d2d2d;;\r\n  font-size: 13px;\r\n  margin: auto 5px;\r\n  display: inline-block;\r\n}\r\n.lall{\r\n  display: flex;\r\n  padding: 10px 10px;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n  gap: 4px;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n}\r\n.classify {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.cptext {\r\n  color: #000;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 13px;\r\n  line-height: 1.6;\r\n}\r\n\r\n.clab {\r\n   padding: 2px 4px;\r\n   border-radius: 10px;\r\n   background: rgba(240, 240, 240, 0.63);\r\n   backdrop-filter: blur(5px);\r\n   color: #242424;\r\n   font-size: 12px;\r\n   line-height: 1.6; \r\n   cursor: pointer;\r\n   user-select: none;\r\n}\r\n/* 调整滚动条宽度和颜色 */\r\n::-webkit-scrollbar {\r\n    width: 6px; /* 增加纵向滚动条的宽度 */\r\n    height: 8px; /* 增加横向滚动条的高度 */\r\n    background: transparent;\r\n}\r\n\r\n/* 定义滚动条轨道，设置为透明 */\r\n::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 8px rgba(0, 0, 0, 0); /* 内阴影 */\r\n    background: transparent; /* 将轨道背景设置为透明 */\r\n}\r\n\r\n/* 定义滑块，设置为浅灰色并增加内阴影 */\r\n::-webkit-scrollbar-thumb {\r\n    box-shadow: inset 0 0 8px rgba(145, 145, 145, 0.3); /* 添加淡灰色内阴影 */\r\n    background-color: #e2e2e2; /* 滑块的颜色改为浅灰色 */\r\n    border-radius: 10px; /* 保持圆角不变 */\r\n}\r\n/* 当鼠标悬停在滚动条滑块上时改变滑块的颜色 */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #c8c8c8;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}