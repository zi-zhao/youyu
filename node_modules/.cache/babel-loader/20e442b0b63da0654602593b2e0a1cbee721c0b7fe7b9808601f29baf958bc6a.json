{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4041e644\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"coverage\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"pictext\"\n}, \"封面\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"beforepic\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"(之前使用的图片)\", -1 /* HOISTED */));\nconst _hoisted_7 = {\n  class: \"afterpic\"\n};\nconst _hoisted_8 = {\n  class: \"picshow\"\n};\nconst _hoisted_9 = {\n  class: \"tpic\"\n};\nconst _hoisted_10 = {\n  class: \"pic_contain\"\n};\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"(您要修改后的图片)\", -1 /* HOISTED */));\nconst _hoisted_12 = {\n  class: \"ptitie\"\n};\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"pictext\"\n}, \"名称\", -1 /* HOISTED */));\nconst _hoisted_14 = {\n  class: \"mainp\"\n};\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"pictext\"\n}, \"简介\", -1 /* HOISTED */));\nconst _hoisted_16 = {\n  class: \"dialog-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Plus = _resolveComponent(\"Plus\");\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n  const _component_CircleCloseFilled = _resolveComponent(\"CircleCloseFilled\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_dialog, {\n    modelValue: $setup.localDialogVisible2,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.localDialogVisible2 = $event),\n    title: '修改' + $props.ClassifyName + '信息',\n    style: {\n      \"width\": \"60%\",\n      \"height\": \"80%\",\n      \"min-height\": \"500px\",\n      \"margin-top\": \"10vh\"\n    }\n  }, {\n    footer: _withCtx(() => [_createElementVNode(\"span\", _hoisted_16, [_createVNode(_component_el_button, {\n      onClick: _cache[3] || (_cache[3] = $event => $setup.localDialogVisible2 = false)\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"Cancel\")]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_button, {\n      type: \"primary\",\n      onClick: $setup.submitData\n    }, {\n      default: _withCtx(() => [_createTextVNode(\" 提交 \")]),\n      _: 1 /* STABLE */\n    })])]),\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" 添加封面 \"), _createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"img\", {\n      src: $setup.previousImageUrl,\n      alt: \"\",\n      style: {\n        \"width\": \"180px\",\n        \"height\": \"180px\",\n        \"border-radius\": \"10px\"\n      }\n    }, null, 8 /* PROPS */, _hoisted_5), _hoisted_6]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"input\", {\n      type: \"file\",\n      ref: \"fileInput\",\n      accept: \"image/*\",\n      style: {\n        \"display\": \"none\"\n      },\n      onChange: $setup.handleImage\n    }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _createElementVNode(\"div\", _hoisted_9, [_createVNode(_component_el_icon, {\n      onClick: $setup.triggerImageUpload,\n      style: {\n        \"position\": \"absolute\",\n        \"left\": \"70px\",\n        \"top\": \"70px\",\n        \"font-size\": \"40px\",\n        \"cursor\": \"pointer\"\n      }\n    }, {\n      default: _withCtx(() => [_createVNode(_component_Plus)]),\n      _: 1 /* STABLE */\n    })]), _createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.imagePreviews, (imagePreview, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: index,\n        class: \"spic\",\n        style: _normalizeStyle({\n          backgroundImage: `url(${imagePreview})`\n        })\n      }, [_createVNode(_component_el_icon, {\n        class: \"delete-btn\",\n        onClick: $event => $setup.removeImage(index)\n      }, {\n        default: _withCtx(() => [_createVNode(_component_CircleCloseFilled)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])], 4 /* STYLE */);\n    }), 128 /* KEYED_FRAGMENT */))])]), _hoisted_11])]), _createCommentVNode(\" 专栏/收藏名称 \"), _createElementVNode(\"div\", _hoisted_12, [_hoisted_13, _createVNode(_component_el_input, {\n      modelValue: $setup.text1,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.text1 = $event),\n      maxlength: \"20\",\n      \"show-word-limit\": \"\",\n      type: \"text\",\n      class: \"input_el\"\n    }, null, 8 /* PROPS */, [\"modelValue\"])]), _createCommentVNode(\" 专栏/收藏简介 \"), _createElementVNode(\"div\", _hoisted_14, [_hoisted_15, _createVNode(_component_el_input, {\n      modelValue: $setup.textarea1,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.textarea1 = $event),\n      maxlength: \"150\",\n      placeholder: \"分享一下最近的趣事或心情吧\",\n      \"show-word-limit\": \"\",\n      type: \"textarea\",\n      size: \"large\",\n      resize: \"none\",\n      autosize: {\n        minRows: 2,\n        maxRows: 30\n      },\n      class: \"input_el\"\n    }, null, 8 /* PROPS */, [\"modelValue\"])]), _createCommentVNode(\" 是否展示专栏/收藏 \"), _createVNode(_component_el_checkbox, {\n      modelValue: $setup.checked,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.checked = $event)\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"展示\" + _toDisplayString($props.ClassifyName), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"])])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"title\"])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_createVNode","_component_el_dialog","$setup","localDialogVisible2","$event","title","$props","ClassifyName","style","footer","_withCtx","_hoisted_16","_component_el_button","onClick","_cache","type","submitData","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_hoisted_4","src","previousImageUrl","alt","_hoisted_6","_hoisted_7","_hoisted_8","ref","accept","onChange","handleImage","_hoisted_9","_component_el_icon","triggerImageUpload","_component_Plus","_hoisted_10","_Fragment","_renderList","imagePreviews","imagePreview","index","key","_normalizeStyle","backgroundImage","removeImage","_component_CircleCloseFilled","_hoisted_11","_hoisted_12","_hoisted_13","_component_el_input","text1","maxlength","_hoisted_14","_hoisted_15","textarea1","placeholder","size","resize","autosize","minRows","maxRows","_component_el_checkbox","checked","_toDisplayString"],"sources":["D:\\有渔\\前端源码\\YouyuBBS-Q - 副本\\youyu-lyn-qtnew-vision-new-2024.1.14\\src\\page\\components\\EditDialog.vue"],"sourcesContent":["<!-- 创作中心——专栏和收藏管理——编辑-->\r\n<template>\r\n  <div>\r\n    <el-dialog v-model=\"localDialogVisible2\" :title=\"'修改'+ClassifyName + '信息'\" style=\"width: 60%; height: 80%; min-height: 500px; margin-top: 10vh;\">\r\n        <div class=\"container\">\r\n            <!-- 添加封面 -->\r\n            <div class=\"coverage\">\r\n                <span class=\"pictext\">封面</span>\r\n                <div class=\"beforepic\">\r\n                  <img  :src=\"previousImageUrl\" alt=\"\" style=\"width: 180px; height: 180px; border-radius: 10px;\">\r\n                  <span>(之前使用的图片)</span>\r\n                </div>\r\n                <div class=\"afterpic\">\r\n                  <div class=\"picshow\">\r\n                    <input type=\"file\" ref=\"fileInput\" accept=\"image/*\" style=\"display: none;\" @change=\"handleImage\" />\r\n                    <div  class=\"tpic\" >\r\n                        <el-icon @click=\"triggerImageUpload\" style=\"position: absolute; left: 70px; top: 70px;font-size: 40px;cursor: pointer;\"><Plus /></el-icon>\r\n                    </div>\r\n                    <div class=\"pic_contain\">\r\n                      <div v-for=\"(imagePreview, index) in imagePreviews\" :key=\"index\" class=\"spic\" :style=\"{ backgroundImage: `url(${imagePreview})` }\">\r\n                        <el-icon class=\"delete-btn\" @click=\"removeImage(index)\"><CircleCloseFilled /></el-icon>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <span>(您要修改后的图片)</span>\r\n                </div>\r\n            </div>\r\n            <!-- 专栏/收藏名称 -->\r\n            <div class=\"ptitie\">\r\n                <span class=\"pictext\">名称</span>               \r\n                <el-input\r\n                v-model=\"text1\"\r\n                maxlength=\"20\"\r\n                show-word-limit\r\n                type=\"text\"\r\n                class=\"input_el\"\r\n                />  \r\n            </div>\r\n            <!-- 专栏/收藏简介 -->\r\n            <div class=\"mainp\">\r\n                <span class=\"pictext\">简介</span>\r\n                <el-input\r\n                v-model=\"textarea1\"\r\n                maxlength=\"150\"\r\n                placeholder=\"分享一下最近的趣事或心情吧\"\r\n                show-word-limit\r\n                type=\"textarea\"\r\n                size=\"large\"\r\n                resize=\"none\"\r\n                :autosize = \"{ minRows: 2, maxRows: 30 }\"\r\n                class=\"input_el\"\r\n                />\r\n            </div>\r\n            <!-- 是否展示专栏/收藏 -->\r\n            <el-checkbox v-model=\"checked\">展示{{ ClassifyName }}</el-checkbox>\r\n        </div>\r\n        <template #footer>\r\n        <span class=\"dialog-footer\">\r\n            <el-button @click=\"localDialogVisible2 = false\">Cancel</el-button>\r\n            <el-button type=\"primary\" @click =\"submitData\">\r\n            提交\r\n            </el-button>\r\n        </span>\r\n        </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ElMessage } from 'element-plus';\r\nimport { defineProps, ref,onMounted,computed,watchEffect,defineEmits} from \"vue\";\r\nimport axios from '../../utils/request';\r\nimport {compressImage,fetchFavoriteCoverage} from '@/utils/fileService';\r\nimport { getColumnPictureFromCOS,getFavoritePermission,getColumnPermission} from '@/utils/cosService';\r\n\r\nconst props = defineProps({\r\n    ClassifyName: String,\r\n    modelValue: Boolean,\r\n    Id:Number,\r\n});\r\nconst emit = defineEmits(['update:modelValue']);\r\nconst localDialogVisible2 = ref(props.modelValue);\r\nwatchEffect(() => {\r\n  if (localDialogVisible2.value !== props.modelValue) {\r\n    emit('update:modelValue', localDialogVisible2.value);\r\n  }\r\n});\r\n\r\nconst userId = localStorage.getItem(\"userId\"); // 获取用户ID\r\nconst checked = ref(false);\r\nconst listData = ref([]);//存放从专栏或收藏中获取的数据\r\nconst previousImageUrl = ref('');//存放用户之前的专栏或收藏封面图\r\nconst fileName = ref();\r\nconst fileInput = ref(null);\r\nconst selectedImages = ref([]);\r\nconst imagePreviews = ref([]);\r\n\r\n\r\nconst text1 = computed({\r\n  get: () => listData.value.name,\r\n  set: (newValue) => listData.value.name = newValue\r\n});\r\n\r\nconst textarea1 = computed({\r\n  get: () => listData.value.profile,\r\n  set: (newValue) => listData.value.profile = newValue\r\n});\r\n\r\nconst visibility = computed(() => {\r\n    return checked.value ? 1 : 0;\r\n});\r\n\r\n// 当点击按钮时触发文件输入框\r\nconst triggerImageUpload = () => {\r\n  if (selectedImages.value.length < 2) {\r\n    fileInput.value.click();\r\n  } else {\r\n    ElMessage.error('只能提交一张照片');\r\n  }\r\n};\r\n\r\n// 当文件选择后处理图片\r\nconst handleImage = async (event) => {\r\n  const file = event.target.files[0];\r\n  if (file && selectedImages.value.length < 2) {\r\n    const timestamp = new Date().getTime(); // 获取当前时间戳\r\n    fileName.value = `${timestamp}-${file.name}`; // 在文件名前加时间戳\r\n    const compressedFile =await compressImage(file);\r\n    const reader = new FileReader();\r\n    reader.onload = function(e) {\r\n      imagePreviews.value.push(e.target.result);  // 添加DataURL到imagePreviews\r\n      selectedImages.value.push(compressedFile);  // 添加文件对象到selectedImages\r\n    };\r\n    reader.readAsDataURL(compressedFile);\r\n  }\r\n};\r\n\r\n//删除图片\r\nconst removeImage = (index) => {\r\n    selectedImages.value.splice(index, 1);\r\n    imagePreviews.value.splice(index, 1);  // 也删除对应的预览\r\n};\r\n\r\n\r\n\r\n//根据父组件传回的classifyname判断应该调用的接口类型（这个方法只是增加一个判断值）\r\nconst showData = async () => {\r\n  if(props.ClassifyName === \"文章专栏\"){\r\n    await getColumnArticleList(props.Id);\r\n  }else if(props.ClassifyName === \"分享专栏\"){\r\n    await getColumnShareList(props.Id);\r\n  }else if(props.ClassifyName === \"文章收藏\"){\r\n    await getFavoriteArticleList(props.Id);\r\n  }else if(props.ClassifyName === \"分享收藏\"){\r\n    await getFavoriteShareList(props.Id);\r\n  }\r\n}\r\n\r\n\r\n//根据父组件传回的classifyname判断应该调用的接口类型（这个方法只是增加一个判断值）\r\nconst submitData = () => {\r\n  if(props.ClassifyName === \"文章专栏\"){\r\n    setColumnList();\r\n    if(selectedImages.value) setColumnPitcure(props.Id);\r\n    localDialogVisible2.value  = false;\r\n  }else if(props.ClassifyName === \"分享专栏\"){\r\n    setColumnList();\r\n    if(selectedImages.value) setColumnPitcure(props.Id);\r\n    localDialogVisible2.value  = false;\r\n  }else if(props.ClassifyName === \"文章收藏\"){\r\n    setFavoriteList();\r\n    if(selectedImages.value) setFavoritePitcure(props.Id);\r\n    localDialogVisible2.value  = false;\r\n  }else if(props.ClassifyName === \"分享收藏\"){\r\n    setFavoriteList();\r\n    if(selectedImages.value) setFavoritePitcure(props.Id);\r\n    localDialogVisible2.value = false\r\n  }\r\n}\r\n\r\n\r\n//修改专栏图片\r\nasync function setColumnPitcure(ID) {\r\n  try {\r\n    await getColumnPermission( selectedImages.value[0],fileName.value,ID);\r\n  } catch (error) {\r\n      console.error(\"修改专栏图片接口失败\", error); \r\n      ElMessage.error('修改专栏图片接口失败');\r\n  }\r\n}\r\n//修改收藏图片\r\nasync function setFavoritePitcure(ID) {\r\n  try {\r\n    await getFavoritePermission( selectedImages.value[0],fileName.value,ID);\r\n  } catch (error) {\r\n      console.error(\"修改收藏图片接口失败\", error); \r\n      ElMessage.error('修改收藏图片接口失败');\r\n  }\r\n}\r\n\r\n//获取文章专栏\r\nasync function getColumnArticleList(ID) {\r\n    try {\r\n        const response = await axios.get('/column', {\r\n            params: {\r\n                type:0,\r\n                page:1,\r\n                pazeSize:100,\r\n                userId:Number(userId),\r\n            }\r\n          });\r\n        if(response.data.code === 1){\r\n            const filteredData = response.data.data.records.filter(item => item.id === ID);\r\n            if (filteredData.length > 0) {\r\n                listData.value = filteredData[0];  \r\n                previousImageUrl.value = await getColumnPictureFromCOS(listData.value.id);\r\n                checked.value = listData.value.visibility;\r\n            } else {\r\n                console.error(\"未找到该专栏\");\r\n                ElMessage.error(\"未找到该专栏\");\r\n            }\r\n        } else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else {\r\n            console.error(\"获取文章专栏列表数据失败\");\r\n            ElMessage.error(\"获取文章专栏列表数据失败\");\r\n        }\r\n    } catch (error) {\r\n        console.error(\"请求文章专栏接口失败\", error);\r\n        ElMessage.error(\"请求文章专栏接口失败\");\r\n    }\r\n}\r\n\r\n\r\n//获取分享专栏\r\nasync function getColumnShareList(ID) {\r\n  try {\r\n    const response = await axios.get('/column', {\r\n        params: {\r\n            type:1,\r\n            page:1,\r\n            pazeSize:100,\r\n            userId:Number(userId),\r\n          }\r\n      });\r\n    if(response.data.code === 1){\r\n        const filteredData = response.data.data.records.filter(item => item.id === ID);\r\n        if (filteredData.length > 0) {\r\n          listData.value = filteredData[0]; \r\n          previousImageUrl.value = await getColumnPictureFromCOS(listData.value.id);\r\n          checked.value = listData.value.visibility;\r\n        } else {\r\n          console.error(\"未找到该专栏\");\r\n          ElMessage.error(\"未找到该专栏\");\r\n        }\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n    console.error(\"获取分享专栏数据失败\");\r\n    ElMessage.error(\"获取分享专栏数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求分享专栏接口失败\", error); \r\n    ElMessage.error(\"请求分享专栏接口失败\");\r\n  }\r\n}\r\n \r\n//获取文章收藏列表\r\nasync function getFavoriteArticleList(ID) {\r\n  try {\r\n    const response = await axios.get('/favorite',{ \r\n      params: { \r\n        type:0,\r\n        page:1,\r\n        pazeSize:100,\r\n        userId:Number(userId),\r\n      } \r\n    });\r\n    if(response.data.code === 1){\r\n        const filteredData = response.data.data.records.filter(item => item.id === ID);\r\n        if (filteredData.length > 0) {\r\n          listData.value = filteredData[0]; \r\n          previousImageUrl.value = await fetchFavoriteCoverage(listData.value.id);\r\n          checked.value = listData.value.visibility;\r\n        } else {\r\n          console.error(\"未找到该专栏\");\r\n          ElMessage.error(\"未找到该专栏\");\r\n        }\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n    console.error(\"获取文章收藏数据失败\");\r\n    ElMessage.error(\"获取文章收藏数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求文章收藏接口失败\", error);\r\n    ElMessage.error(\"请求文章收藏接口失败\");\r\n  }\r\n}\r\n\r\n//获取分享收藏列表\r\nasync function getFavoriteShareList(ID) {\r\n  try {\r\n    const response = await axios.get('/favorite',{ \r\n      params: { \r\n        type:1,\r\n        page:1,\r\n        pazeSize:100,\r\n        userId:Number(userId),\r\n      } \r\n    });\r\n    if(response.data.code === 1){\r\n        const filteredData = response.data.data.records.filter(item => item.id === ID);\r\n        if (filteredData.length > 0) {\r\n          listData.value = filteredData[0]; \r\n          previousImageUrl.value = await fetchFavoriteCoverage(listData.value.id);\r\n          checked.value = listData.value.visibility;\r\n        } else {\r\n          console.error(\"未找到该专栏\");\r\n          ElMessage.error(\"未找到该专栏\");\r\n        }\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n    console.error(\"获取分享收藏数据失败\");\r\n    ElMessage.error(\"获取分享收藏数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求分享收藏接口失败\", error); \r\n    ElMessage.error(\"请求分享收藏接口失败\");\r\n  }\r\n}\r\n\r\n\r\n\r\n//修改专栏信息\r\nasync function setColumnList() {\r\n  try {\r\n    const data = {\r\n      id: props.Id,\r\n      name:text1.value,\r\n      profile:textarea1.value,\r\n      visibility:visibility.value,\r\n    };\r\n    const response = await axios.put('/column',data)\r\n    if(response.data.code === 1){\r\n        ElMessage.success('修改成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n    console.error(\"修改专栏数据失败\");\r\n    ElMessage.error(\"修改专栏数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"修改专栏接口失败\", error); \r\n    ElMessage.error(\"修改专栏数据失败\");\r\n  }\r\n}\r\n\r\n//修改收藏信息\r\nasync function setFavoriteList() {\r\n  try {\r\n    const data = {\r\n      id: props.Id,\r\n      name:text1.value,\r\n      profile:textarea1.value,\r\n      visibility:visibility.value,\r\n    };\r\n    const response = await axios.put('/favorite',data)\r\n    if(response.data.code === 1){\r\n        ElMessage.success('修改成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n    console.error(\"修改收藏数据失败\");\r\n    ElMessage.error(\"修改收藏数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"修改收藏接口失败\", error); \r\n    ElMessage.error(\"修改收藏接口失败\");\r\n  }\r\n}\r\n\r\n\r\n\r\nonMounted(() => {\r\n    showData();\r\n});\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.container{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n.coverage{\r\n    display: flex;\r\n    gap: 20px;\r\n    width: 100%;\r\n    height: 180px;\r\n}\r\n.pictext {\r\n    display: block;\r\n    width: 45px;\r\n}\r\n.beforepic,\r\n.afterpic {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: flex-end;\r\n}\r\n.picshow {\r\n    width: 180px;\r\n    height: 180px;\r\n    border: 1px dashed #bbbbbb;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    position: relative;\r\n}\r\n.spic{\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    background-position: center center;\r\n    width: 180px;\r\n    height: 180px;\r\n}\r\n.pic_contain{\r\n  position: relative;\r\n}\r\ni.delete-btn {\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 8px;\r\n  cursor: pointer;\r\n}\r\n.ptitie {\r\n  height: 32px;\r\n  width: 92%;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  align-self: stretch;\r\n}\r\n::v-deep .el-dialog__body {\r\n  padding: 0px var(--el-dialog-padding-primary);\r\n}\r\n::v-deep .el-dialog__header{\r\n  padding-bottom: 20px;\r\n}\r\n::v-deep .el-dialog__footer {\r\n  padding: 0px;\r\n  position: absolute;\r\n  right: 15px;\r\n  bottom: 10px;\r\n}\r\n::v-deep .el-input ,\r\n::v-deep .el-textarea{\r\n  width: 90%;\r\n}\r\n/* 三个输入框边框样式 */\r\n::v-deep .el-input__wrapper,\r\n::v-deep .el-textarea__inner{\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n::v-deep .el-input__wrapper{\r\n  height: 40px;\r\n}  \r\n::v-deep .el-textarea__inner{\r\n  height: 130px;\r\n}  \r\n/* 三个输入框获得焦点时的边框样式 */\r\n::v-deep .el-input__wrapper.is-focus,\r\n::v-deep .el-textarea__inner:focus{\r\n  box-shadow: 0 2px 6px #cfd7e2;\r\n  border: 1px solid #d7d7d7;\r\n}\r\n.input_el textarea {\r\n  overflow: hidden;\r\n}\r\n.mainp{\r\n  width: 92%;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 20px;\r\n  align-self: stretch;\r\n}\r\n.dialog-footer button:first-child {\r\n  margin-right: 10px;\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}