{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport axios from '@/utils/request';\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\nimport { convertDateFormat } from '@/utils/timeFormat';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nexport default {\n  __name: 'CommentPost',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const currentPage = ref(1);\n    // const activeTab = ref('near')\n    const isChecked = ref(false); //判断某条评论是否被选中\n    const type = ref(0);\n    const postCommentGroups = ref([]);\n    const userId = localStorage.getItem(\"userId\"); // 获取用户ID\n    const username = localStorage.getItem(\"userName\"); // 获取用户ID\n    const newAvater = ref('');\n\n    // const tabValueMapping = {\n    //     'near': 0,\n    //     'like': 1,\n    //     'reply': 2\n    // };\n\n    //选择评论排序方式，在map中匹配对应的值\n    // const handleTapageClick = (tabName) => {\n    //     if (tabValueMapping[tabName] !== undefined) {\n    //         type.value = tabValueMapping[tabName];\n    //         getPostComment(type.value);\n    //     }\n    // };\n\n    //当全部选择时候，统一改变所有分享评论的选中状态（无视对某条评论的单选状态）\n    const handleAllSelected = () => {\n      postCommentGroups.value.forEach(item => {\n        item.isSelected = isChecked.value;\n      });\n    };\n\n    //点击删除的弹框\n    const deletedCommentFunction = async () => {\n      try {\n        await ElMessageBox.confirm('确定要删除评论吗？', {\n          confirmButtonText: '确认删除',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        handleDelete();\n      } catch {\n        console.log('关闭弹框');\n      }\n    };\n\n    // 添加一个锁状态\n    let isLoading = false;\n    async function load() {\n      if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\n      isLoading = true; // 开始加载数据，设置锁状态为true\n      try {\n        if (currentPage.value === 1) {\n          currentPage.value++;\n        }\n        await getPostComment(type.value, currentPage.value);\n        currentPage.value++; // 只有在请求成功完成后才递增页码\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('滚动时的未知错误');\n      } finally {\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\n      }\n    }\n    async function handleDelete() {\n      const selectedComments = postCommentGroups.value.filter(item => item.isSelected === true);\n      for (let record of selectedComments) {\n        if (record.flag === 1) {\n          deletedComment(record.id);\n        } else if (record.flag === 2) {\n          deletedReplyComment(record.id, record.worksId, record.worksTitle);\n        }\n      }\n    }\n    async function deletedComment(commentId) {\n      try {\n        const response = await axios.delete('/comment/delete', {\n          commentId: commentId\n        });\n        if (response.data.code === 1) {\n          ElMessage.success('删除成功');\n          const index = postCommentGroups.value.findIndex(comment => comment.id === commentId);\n          if (index !== -1) {\n            postCommentGroups.value.splice(index, 1);\n          }\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"删除发表过的评论数据失败\");\n          ElMessage.error('删除发表过的评论数据失败');\n        }\n      } catch (error) {\n        console.error(\"删除发表过的评论数据失败\", error);\n        ElMessage.error('删除发表过的评论数据失败');\n      }\n    }\n    async function deletedReplyComment(id, worksId, worksTitle) {\n      try {\n        const response = await axios.delete('/comment/reply/delete', {\n          id: id,\n          worksId: worksId,\n          worksTitle: worksTitle\n        });\n        if (response.data.code === 1) {\n          ElMessage.success('删除成功');\n          const index = postCommentGroups.value.findIndex(comment => comment.id === id);\n          if (index !== -1) {\n            postCommentGroups.value.splice(index, 1);\n          }\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"删除发表过的评论数据失败\");\n          ElMessage.error('删除发表过的评论数据失败');\n        }\n      } catch (error) {\n        console.error(\"删除发表过的评论数据失败\", error);\n        ElMessage.error('删除发表过的评论数据失败');\n      }\n    }\n\n    //获取对自己发表的评论列表\n    async function getPostComment(type, currentPage) {\n      try {\n        let params = {\n          pageSize: 10,\n          currentPage: currentPage,\n          type: type,\n          category: 1\n        };\n        const response = await axios.get('/manage/comment/list', {\n          params: params\n        });\n        if (response.data.data.records.length > 0 && response.data.code === 1) {\n          const updates = response.data.data.records.map(async record => {\n            const verified1 = await fetchUserInformation(userId);\n            const verified2 = record.flag === 2 ? await fetchUserInformation(record.replyUserId) : null;\n            const newReplyAvater = record.flag === 2 ? await getUsersAvatarFromCOS(record.replyUserId) : null;\n            return {\n              ...record,\n              verified2: verified2,\n              verified1: verified1,\n              newReplyAvater: newReplyAvater,\n              isSelected: isChecked.value,\n              createTime: convertDateFormat(record.createTime)\n            };\n          });\n          const updatedComments = await Promise.all(updates);\n          postCommentGroups.value = [...postCommentGroups.value, ...updatedComments];\n          newAvater.value = await getUsersAvatarFromCOS(userId);\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取发表过的评论数据失败\");\n        }\n      } catch (error) {\n        console.error(\"请求发表过的评论接口失败\", error);\n      }\n    }\n\n    // 获取用户信息\n    const fetchUserInformation = async userId => {\n      try {\n        const response = await axios.get(`/users/${userId}`);\n        if (response.data.code === 1) {\n          return response.data.data.verified;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('获取用户信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户信息失败\", error);\n        ElMessage.error('获取用户信息失败');\n      }\n    };\n    onMounted(() => {\n      getPostComment(type.value, currentPage.value);\n    });\n    const __returned__ = {\n      currentPage,\n      isChecked,\n      type,\n      postCommentGroups,\n      userId,\n      username,\n      newAvater,\n      handleAllSelected,\n      deletedCommentFunction,\n      get isLoading() {\n        return isLoading;\n      },\n      set isLoading(v) {\n        isLoading = v;\n      },\n      load,\n      handleDelete,\n      deletedComment,\n      deletedReplyComment,\n      getPostComment,\n      fetchUserInformation,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      },\n      get getUsersAvatarFromCOS() {\n        return getUsersAvatarFromCOS;\n      },\n      get convertDateFormat() {\n        return convertDateFormat;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","getUsersAvatarFromCOS","convertDateFormat","ElMessage","ElMessageBox","currentPage","isChecked","type","postCommentGroups","userId","localStorage","getItem","username","newAvater","handleAllSelected","value","forEach","item","isSelected","deletedCommentFunction","confirm","confirmButtonText","cancelButtonText","handleDelete","console","log","isLoading","load","getPostComment","error","selectedComments","filter","record","flag","deletedComment","id","deletedReplyComment","worksId","worksTitle","commentId","response","delete","data","code","success","index","findIndex","comment","splice","msg","toString","params","pageSize","category","get","records","length","updates","map","verified1","fetchUserInformation","verified2","replyUserId","newReplyAvater","createTime","updatedComments","Promise","all","verified"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/CreateCenter/components/CommentManagement/CommentPost.vue"],"sourcesContent":["<template>\r\n    <div class=\"filter\">\r\n        <!-- 后端实现这个筛选稍有困难，故暂时删去这个分类 -->\r\n        <!-- <el-select v-model=\"selectedCategory\" placeholder=\"全部文章\" @change=\"handleTextChange\">\r\n            <el-option-group>\r\n                <el-option v-for=\"option in options\" :key=\"option.value\" :label=\"option.label\"></el-option>\r\n            </el-option-group>\r\n        </el-select> -->\r\n\r\n        <!-- <el-tabs v-model=\"activeTab\" @tab-change=\"handleTapageClick\">\r\n            <el-tab-pane label=\"最近发布\" name=\"near\"></el-tab-pane>\r\n            <el-tab-pane label=\"点赞最多\" name =\"like\"></el-tab-pane>\r\n            <el-tab-pane label=\"回复最多\" name =\"reply\"></el-tab-pane>\r\n        </el-tabs> -->\r\n    </div>\r\n    \r\n    <el-checkbox @change=\"handleAllSelected\" v-model=\"isChecked\" label=\"全选\" style=\"padding-right: 2rem;\" />\r\n    <el-button @click=\"deletedCommentFunction\" type=\"danger\" plain >删除</el-button>\r\n\r\n    <div class=\"content-container\" v-infinite-scroll=\"load\" infinite-scroll-distance=\"100\" infinite-scroll-immediate=\"false\">\r\n        <div class=\"content-box underline\" v-for=\"item in postCommentGroups\" :key=\"item.id\">\r\n            <div class=\"left-content\">\r\n                <el-checkbox v-model=\"item.isSelected\"></el-checkbox>\r\n                <div class=\"detail-content\">\r\n                    <div style=\"display: flex;align-items: center;\">\r\n                        <div style=\"display: flex;gap: 0.8rem;align-items: center;\">\r\n                            <img :src=\"newAvater\" alt=\"\" class=\"image\">\r\n                            <div style=\"display: flex;align-items: center;gap: 3px;\">\r\n                                <div>{{ username }}</div>\r\n                                <img  v-if=\"item.verified1 === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;\" alt=\"\">\r\n                            </div>\r\n                        </div>\r\n                        <div v-if=\"item.flag === 2\" style=\"display: flex;\">\r\n                            <div style=\"margin-left: 20px;\">回复</div>\r\n                            <div style=\"display: flex;align-items: center;gap: 10px;margin-left: 10px;\">\r\n                                <div style=\"color: black;\">{{ item.replyUsername }}</div>\r\n                                <img  v-if=\"item.verified2 === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;margin-right: 10px;\" alt=\"\">\r\n                                <div>的评论</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"margin-left: calc(36px + 0.5rem);\">{{ item.content }}</div>\r\n                    <div style=\"margin-left: calc(36px + 0.5rem);\">\r\n                        <span style=\"font-size: 14px;\">{{ item.createTime }}</span>\r\n                        <div style=\"display: flex;align-items: center;gap: 3px;font-size: 14px;\">\r\n                            <img src=\"@/assets/LikeBefore.svg\" alt=\"\">\r\n                            <span class=\"icon-text\">{{ item.likeCount }}</span>\r\n                        </div>\r\n                        <div v-if=\"item.flag === 1\" style=\"display: flex;align-items: center;gap: 3px;font-size: 14px;\">\r\n                            <img src=\"@/assets/Comment.svg\" alt=\"\">\r\n                            <span class=\"icon-text\">{{ item.replyCount }}</span>\r\n                        </div>\r\n                        <!-- <span style=\"font-size: 14px;\">回复</span> -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"right-content\">\"{{ item.worksTitle}}\"</div>\r\n        </div>\r\n        <el-empty \r\n            v-if=\"!postCommentGroups || postCommentGroups.length === 0 \" \r\n            :image-size=\"200\" \r\n            description=\"您还没有发表过评论呢，快去互动呀！\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref,onMounted } from 'vue'\r\nimport axios from '@/utils/request';\r\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\r\nimport { convertDateFormat } from '@/utils/timeFormat'; \r\nimport { ElMessage,ElMessageBox} from 'element-plus';\r\n\r\nconst currentPage = ref(1);\r\n// const activeTab = ref('near')\r\nconst isChecked = ref(false) //判断某条评论是否被选中\r\nconst type = ref(0)\r\nconst postCommentGroups = ref([])\r\nconst userId = localStorage.getItem(\"userId\"); // 获取用户ID\r\nconst username = localStorage.getItem(\"userName\"); // 获取用户ID\r\nconst newAvater = ref('');\r\n\r\n// const tabValueMapping = {\r\n//     'near': 0,\r\n//     'like': 1,\r\n//     'reply': 2\r\n// };\r\n\r\n//选择评论排序方式，在map中匹配对应的值\r\n// const handleTapageClick = (tabName) => {\r\n//     if (tabValueMapping[tabName] !== undefined) {\r\n//         type.value = tabValueMapping[tabName];\r\n//         getPostComment(type.value);\r\n//     }\r\n// };\r\n\r\n//当全部选择时候，统一改变所有分享评论的选中状态（无视对某条评论的单选状态）\r\nconst handleAllSelected = () => {\r\n    postCommentGroups.value.forEach(item => {\r\n        item.isSelected = isChecked.value;\r\n    });\r\n};\r\n\r\n//点击删除的弹框\r\nconst deletedCommentFunction = async () => {\r\n  try {\r\n    await ElMessageBox.confirm(\r\n      '确定要删除评论吗？',\r\n      {\r\n        confirmButtonText: '确认删除',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }\r\n    );\r\n    handleDelete();\r\n  } catch {\r\n    console.log('关闭弹框')\r\n  }\r\n}\r\n\r\n// 添加一个锁状态\r\nlet isLoading = false;\r\nasync function load() {\r\n    if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\r\n    isLoading = true; // 开始加载数据，设置锁状态为true\r\n    try {\r\n        if(currentPage.value === 1){\r\n            currentPage.value++;\r\n        }\r\n        await getPostComment( type.value,currentPage.value);\r\n        currentPage.value++; // 只有在请求成功完成后才递增页码\r\n    } catch (error) {\r\n        console.error(error);\r\n        ElMessage.error('滚动时的未知错误');\r\n    } finally {\r\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\r\n    }\r\n}\r\n\r\nasync function handleDelete(){\r\n    const selectedComments = postCommentGroups.value.filter(item => item.isSelected === true);\r\n    for( let record of selectedComments){\r\n        if(record.flag === 1){\r\n            deletedComment(record.id);\r\n        }else if(record.flag ===2){\r\n            deletedReplyComment(record.id,record.worksId,record.worksTitle);\r\n        }\r\n    }\r\n}\r\n\r\nasync function deletedComment(commentId){\r\n    try {\r\n        const response = await axios.delete('/comment/delete',{  \r\n            commentId: commentId\r\n        });\r\n        if(response.data.code === 1){\r\n            ElMessage.success('删除成功');\r\n            const index = postCommentGroups.value.findIndex(comment => comment.id === commentId);\r\n            if (index !== -1) {\r\n                postCommentGroups.value.splice(index, 1);\r\n            }\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            console.error(\"删除发表过的评论数据失败\");\r\n            ElMessage.error('删除发表过的评论数据失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"删除发表过的评论数据失败\", error); \r\n        ElMessage.error('删除发表过的评论数据失败');\r\n    }\r\n}\r\n\r\nasync function deletedReplyComment(id,worksId,worksTitle){\r\n    try {\r\n        const response = await axios.delete('/comment/reply/delete',{\r\n            id:id, \r\n            worksId:worksId, \r\n            worksTitle:worksTitle \r\n        });\r\n        if(response.data.code === 1){\r\n            ElMessage.success('删除成功');\r\n            const index = postCommentGroups.value.findIndex(comment => comment.id === id);\r\n            if (index !== -1) {\r\n                postCommentGroups.value.splice(index, 1);\r\n            }\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            console.error(\"删除发表过的评论数据失败\");\r\n            ElMessage.error('删除发表过的评论数据失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"删除发表过的评论数据失败\", error); \r\n        ElMessage.error('删除发表过的评论数据失败');\r\n    }\r\n}\r\n\r\n\r\n\r\n//获取对自己发表的评论列表\r\nasync function getPostComment( type,currentPage ) {\r\n  try {\r\n    let params = {\r\n        pageSize:10,\r\n        currentPage:currentPage,\r\n        type:type,\r\n        category:1\r\n    };\r\n    const response = await axios.get('/manage/comment/list',{ params: params });\r\n    if(response.data.data.records.length > 0 && response.data.code === 1){\r\n        const updates = response.data.data.records.map(async (record) => {\r\n            const verified1 = await fetchUserInformation(userId);\r\n            const verified2 = record.flag === 2 ? await fetchUserInformation(record.replyUserId): null;\r\n            const newReplyAvater = record.flag === 2 ? await getUsersAvatarFromCOS(record.replyUserId) : null;\r\n            return {\r\n                ...record,\r\n                verified2:verified2,\r\n                verified1:verified1,\r\n                newReplyAvater: newReplyAvater,\r\n                isSelected: isChecked.value,\r\n                createTime: convertDateFormat(record.createTime)\r\n            };\r\n        });\r\n        const updatedComments = await Promise.all(updates);\r\n        postCommentGroups.value = [...postCommentGroups.value, ...updatedComments];\r\n        newAvater.value = await getUsersAvatarFromCOS(userId);\r\n    }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n        // ElMessage.info('已加载所有数据');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n    console.error(\"获取发表过的评论数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求发表过的评论接口失败\", error); \r\n  }\r\n}\r\n\r\n// 获取用户信息\r\nconst fetchUserInformation = async (userId) => {\r\n    try {\r\n        const response = await axios.get(`/users/${userId}`);\r\n        if(response.data.code === 1){\r\n            return (response.data.data.verified);\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            ElMessage.error('获取用户信息失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取用户信息失败\", error);\r\n        ElMessage.error('获取用户信息失败');\r\n    }\r\n};\r\n\r\n\r\nonMounted(() => {\r\n    getPostComment( type.value,currentPage.value);\r\n})\r\n\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.icon-text{\r\n    color:#2d2d2d;\r\n}\r\n.filter {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 2rem;\r\n}\r\n\r\n.content-box {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 1rem 0;\r\n}\r\n\r\n.left-content {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    min-height: 7rem;\r\n}\r\n\r\n\r\n.detail-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    gap: 1rem;\r\n    margin: 0.8rem 1rem;\r\n}\r\n\r\n.detail-content div:first-child {\r\n    color: #9B9B9B;\r\n}\r\n\r\n.detail-content div:nth-child(3) {\r\n    display: flex;\r\n    align-items: center;\r\n    color: #9B9B9B;\r\n    gap: 4rem;\r\n}\r\n\r\n.image {\r\n    width: 36px;\r\n    height: 36px;\r\n    border-radius: 36px;\r\n    margin-top: 0.6rem;\r\n}\r\n\r\n.underline {\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\n::v-deep .el-tabs__nav-wrap::after {\r\n    height: 0px;\r\n}</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}