{"ast":null,"code":"import { ref, watchEffect, onMounted, reactive } from 'vue';\nimport axios from '@/utils/request';\n// import { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'RegisterDialog',\n  props: {\n    modelValue: Boolean\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const registerDialogVisible = ref(props.modelValue);\n    watchEffect(() => {\n      if (registerDialogVisible.value !== props.modelValue) {\n        emit('update:modelValue', registerDialogVisible.value);\n      }\n    });\n    const closeDialog = () => {\n      registerDialogVisible.value = false;\n    };\n    let top = ref('5vh');\n    // const router = useRouter();\n    const myForm = ref(null);\n    const labelPosition = ref('top');\n    const imageUrl = ref(null);\n    const captchaUuid = ref();\n    const isRunning = ref(false);\n    const allFieldsValid = ref(false); //所有表单是否符合规则\n    const phoneNumberValid = ref(false); //手机号是否符合规则\n    const formTouched = ref(false); //用户是否输入内容\n\n    // 收集表单数据\n    let formLabelAlign = reactive({\n      phoneNumber: '',\n      phoneVerification: '',\n      // email:'',\n      // emailVerification: '',\n      password: '',\n      pictureVerification: '',\n      confirm: '',\n      uuid: captchaUuid.value\n    });\n\n    // 设置表单校验规则\n    const rules = reactive({\n      phoneNumber: [{\n        required: true,\n        message: '请输入手机号',\n        trigger: 'blur'\n      }, {\n        validator: (rule, value, callback) => {\n          if (/^1[3-9]\\d{9}$/.test(value)) {\n            phoneNumberValid.value = true;\n            callback();\n          } else {\n            phoneNumberValid.value = false;\n            callback(new Error('手机号格式不正确'));\n          }\n        },\n        trigger: 'blur'\n      }],\n      // email: [\n      //   { required: true, message: '请输入邮箱', trigger: 'blur' },\n      //   { pattern: /^[A-Za-z0-9_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/, message: '邮箱格式不正确', trigger: 'blur' }\n      // ],\n      phoneVerification: [{\n        required: true,\n        message: '请输入验证码',\n        trigger: 'blur'\n      }],\n      // username:[\n      //   {required: true, message: '请输入用户名', trigger: 'blur'},\n      //   { min: 2, message: '昵称长度应大于两个字符', trigger: 'blur' },\n      // ],\n      // school:[\n      //   {required: true, message: '请输入学校名称', trigger: 'blur'},\n      // ],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        pattern: /^\\S{6,15}$/,\n        message: '密码必须是6-15位非空字符',\n        trigger: 'change'\n      }],\n      confirm: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        pattern: /^\\S{6,15}$/,\n        message: '密码必须是6-15位非空字符',\n        trigger: 'change'\n      }, {\n        validator: (rule, value, callback) => {\n          if (value !== formLabelAlign.password) {\n            callback(new Error('两次输入的密码不一致'));\n          } else {\n            callback();\n          }\n        }\n      }]\n    });\n\n    // 手机号验证函数\n    function checkPhoneNumber() {\n      const phoneNumberPattern = /^1[3-9]\\d{9}$/;\n      phoneNumberValid.value = phoneNumberPattern.test(formLabelAlign.phoneNumber);\n      checkAllFields();\n    }\n\n    // 设置发送验证码按钮内容\n    let inner = ref('获取短信验证码');\n    // 发送验证码数据请求\n    async function fetchData() {\n      try {\n        const response = await axios.get(`/sendSignupSMSCode/${formLabelAlign.phoneNumber}`);\n        console.log(response.data);\n        if (response.data.code === 1) {\n          ElMessage.success('发送验证码成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(response.data.msg || 'Unknown error');\n          ElMessage.error('发送验证码失败');\n        }\n      } catch (error) {\n        console.error('发送验证码失败', error.message);\n        ElMessage.error('发送验证码失败');\n      }\n    }\n\n    // let inner = ref('获取邮箱验证码');\n    // // 发送验证码数据请求\n    // async function fetchData() {\n    //   try {\n    //     const response = await axios.get(`/sendEmailVerification/0/${formLabelAlign.email}`);\n    //     if (response.data.code === 1) {\n    //       ElMessage.success('邮箱验证码发送成功');\n    //     } else if(response.data.code === 0 && response.data.msg){\n    //       ElMessage.error(response.data.msg.toString());\n    //     }else {\n    //       console.log('邮箱验证码发送失败');\n    //       ElMessage.error('邮箱验证码发送失败');\n    //     }\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // }\n\n    // 点击发送验证码\n    async function send() {\n      if (!isRunning.value) {\n        isRunning.value = true;\n        fetchData();\n        let time = ref(60); // 增加定时器\n        let timeId = setInterval(function () {\n          time.value--;\n          inner.value = time.value + '后重新获取'; // 更改按钮显示文字\n          if (time.value === 0) {\n            clearInterval(timeId);\n            inner.value = '获取短信验证码';\n            // inner.value = '获取邮箱验证码'\n            isRunning.value = false;\n          }\n        }, 1000);\n      }\n    }\n\n    // 获取图片验证码\n    async function verfication() {\n      try {\n        const response = await axios.get('/sendImageCode', {\n          responseType: 'blob'\n        });\n        captchaUuid.value = response.headers.get('Captcha-UUID');\n        const reader = new FileReader();\n        reader.onload = function (event) {\n          imageUrl.value = event.target.result;\n        };\n        reader.readAsDataURL(response.data);\n      } catch (error) {\n        console.log(error);\n        ElMessage.error('获取图片验证码失败');\n      }\n    }\n\n    //验证输入框是否符合规则\n    function checkAllFields() {\n      formTouched.value = true;\n      myForm.value.validate(valid => {\n        allFieldsValid.value = valid;\n      });\n    }\n\n    // 提交注册信息\n    async function register() {\n      try {\n        const valid = await myForm.value.validate();\n        if (!valid) {\n          console.log('非法提交！');\n          return false;\n        }\n        // 判定两次密码是否输入相同\n        if (formLabelAlign.confirm !== formLabelAlign.password) {\n          ElMessage.error('密码和确认密码不匹配');\n          return false;\n        }\n        const response = await axios.post('/users', {\n          password: formLabelAlign.password,\n          phoneNumber: formLabelAlign.phoneNumber,\n          phoneVerification: formLabelAlign.phoneVerification,\n          // email:formLabelAlign.email,\n          // emailVerification:formLabelAlign.emailVerification,\n          pictureVerification: formLabelAlign.pictureVerification,\n          uuid: captchaUuid.value\n        });\n        if (response.data.code === 1) {\n          ElMessage.success('注册成功，请关闭注册框后点击进行登录');\n          registerDialogVisible.value = false;\n          // 若注册成功，添加token令牌并跳转页面\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n          verfication();\n        } else {\n          console.log('注册失败');\n          ElMessage.error('注册失败');\n          verfication();\n        }\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('注册过程中发生错误');\n        verfication();\n      }\n    }\n    onMounted(() => {\n      verfication();\n    });\n    const __returned__ = {\n      props,\n      emit,\n      registerDialogVisible,\n      closeDialog,\n      get top() {\n        return top;\n      },\n      set top(v) {\n        top = v;\n      },\n      myForm,\n      labelPosition,\n      imageUrl,\n      captchaUuid,\n      isRunning,\n      allFieldsValid,\n      phoneNumberValid,\n      formTouched,\n      get formLabelAlign() {\n        return formLabelAlign;\n      },\n      set formLabelAlign(v) {\n        formLabelAlign = v;\n      },\n      rules,\n      checkPhoneNumber,\n      get inner() {\n        return inner;\n      },\n      set inner(v) {\n        inner = v;\n      },\n      fetchData,\n      send,\n      verfication,\n      checkAllFields,\n      register,\n      ref,\n      watchEffect,\n      onMounted,\n      reactive,\n      get axios() {\n        return axios;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watchEffect","onMounted","reactive","axios","ElMessage","props","__props","emit","__emit","registerDialogVisible","modelValue","value","closeDialog","top","myForm","labelPosition","imageUrl","captchaUuid","isRunning","allFieldsValid","phoneNumberValid","formTouched","formLabelAlign","phoneNumber","phoneVerification","password","pictureVerification","confirm","uuid","rules","required","message","trigger","validator","rule","callback","test","Error","pattern","checkPhoneNumber","phoneNumberPattern","checkAllFields","inner","fetchData","response","get","console","log","data","code","success","msg","error","toString","send","time","timeId","setInterval","clearInterval","verfication","responseType","headers","reader","FileReader","onload","event","target","result","readAsDataURL","validate","valid","register","post"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/TheFirst/components/TheDialog/RegisterDialog.vue"],"sourcesContent":["<template>\r\n  <div>\r\n      <el-dialog\r\n        v-model=\"registerDialogVisible\"\r\n        id=\"register-dialog\"\r\n        class=\"register-dialog\"\r\n        title=\"\"\r\n        :top=top\r\n        :lock-scroll=\"true\"\r\n        :close-on-click-modal=\"false\"\r\n        @close-dialog=\"closeDialog\"\r\n        >\r\n        <div class=\"contain\">\r\n          <div class=\"one\">\r\n            <img class=\"fish\" src=\"@/assets/fish.png\" alt=\"\">\r\n            <span class=\"text\">通过登录有渔获取获奖经验，与同学交流</span>\r\n            <img class=\"group\" src=\"@/assets/TheFirst/RegisterBgi.png\" alt=\"\">\r\n          </div>\r\n          <div class=\"two\">\r\n            <div class=\"form\">\r\n              <el-form\r\n                ref=\"myForm\"\r\n                :label-position=\"labelPosition\"\r\n                label-width=\"100px\"\r\n                :model=\"formLabelAlign\"\r\n                style=\"width: 100%;\"\r\n                :rules=\"rules\"\r\n                @submit.prevent=\"register\"\r\n                :class=\"{ 'form-touched': formTouched.valueOf }\"\r\n              >\r\n                  <el-form-item label=\"手机号\" prop=\"phoneNumber\">\r\n                    <el-input v-model=\"formLabelAlign.phoneNumber\" @input=\"checkPhoneNumber\" @change=\"checkAllFields\" />\r\n                  </el-form-item>\r\n                   <!-- <el-form-item label=\"邮箱\" prop=\"email\">\r\n                    <el-input v-model=\"formLabelAlign.email\"  @change=\"checkAllFields\" />\r\n                  </el-form-item> -->\r\n                  <el-form-item label=\"验证码\" prop=\"phoneVerification\" class=\"send-identifytext\">\r\n                    <el-input v-model=\"formLabelAlign.phoneVerification\" @change=\"checkAllFields\" class=\"iden-code\"/>\r\n                    <button class=\"send\" @click=\"send\" :disabled=\"!phoneNumberValid || isRunning\">{{ inner }}</button>\r\n                  </el-form-item>\r\n                  <el-form-item label=\"请输入密码\" prop=\"password\">\r\n                    <el-input type=\"password\" v-model=\"formLabelAlign.password\"  show-password  @change=\"checkAllFields\" />\r\n                  </el-form-item>\r\n                  <el-form-item label=\"请确认密码\" prop=\"confirm\">\r\n                    <el-input type=\"password\" v-model=\"formLabelAlign.confirm\"  show-password  @change=\"checkAllFields\" />\r\n                  </el-form-item>\r\n                  <el-form-item label=\"请填写以下验证码\" class=\"send-identifyimg\">\r\n                    <el-input v-model=\"formLabelAlign.pictureVerification\" @change=\"checkAllFields\" class=\"code\"/>\r\n                    <img :src=\"imageUrl\" alt=\"\" class=\"verification\">\r\n                  </el-form-item>\r\n              </el-form>\r\n              <div class=\"center-button\">\r\n                <el-button type=\"primary\" round style=\"height: 40px;width: 100px;\" @click=\"register\"  v-model=\"isRunning\">注册</el-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref ,defineEmits,watchEffect,defineProps,onMounted,reactive} from 'vue';\r\nimport axios from '@/utils/request'\r\n// import { useRouter } from 'vue-router';\r\nimport { ElMessage } from 'element-plus';\r\n\r\nconst props = defineProps({\r\n  modelValue: Boolean,\r\n});\r\nconst emit = defineEmits(['update:modelValue']);\r\nconst registerDialogVisible = ref(props.modelValue);\r\nwatchEffect(() => {\r\n  if (registerDialogVisible.value !== props.modelValue) {\r\n    emit('update:modelValue', registerDialogVisible.value);\r\n  }\r\n});\r\n\r\nconst closeDialog = () => {\r\n  registerDialogVisible.value = false;\r\n}\r\n\r\nlet top = ref('5vh')\r\n// const router = useRouter();\r\nconst myForm = ref(null);\r\nconst labelPosition = ref('top');\r\nconst imageUrl = ref(null);\r\nconst captchaUuid = ref();\r\nconst isRunning = ref(false)\r\nconst allFieldsValid = ref(false);//所有表单是否符合规则\r\nconst phoneNumberValid = ref(false);//手机号是否符合规则\r\nconst formTouched = ref(false);//用户是否输入内容\r\n\r\n// 收集表单数据\r\nlet formLabelAlign = reactive({\r\n  phoneNumber: '',\r\n  phoneVerification:'',\r\n  // email:'',\r\n  // emailVerification: '',\r\n  password:'',\r\n  pictureVerification:'',\r\n  confirm:'',\r\n  uuid:captchaUuid.value,\r\n})\r\n\r\n// 设置表单校验规则\r\nconst rules = reactive({\r\n  phoneNumber:[\r\n    {required: true, message: '请输入手机号', trigger: 'blur'},\r\n    {\r\n      validator: (rule, value, callback) => {\r\n        if (/^1[3-9]\\d{9}$/.test(value)) {\r\n          phoneNumberValid.value = true;\r\n          callback();\r\n        } else {\r\n          phoneNumberValid.value = false;\r\n          callback(new Error('手机号格式不正确'));\r\n        }\r\n      },\r\n      trigger: 'blur'\r\n    }   \r\n  ],\r\n  // email: [\r\n  //   { required: true, message: '请输入邮箱', trigger: 'blur' },\r\n  //   { pattern: /^[A-Za-z0-9_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/, message: '邮箱格式不正确', trigger: 'blur' }\r\n  // ],\r\n  phoneVerification:[\r\n    {required: true, message: '请输入验证码', trigger: 'blur'}\r\n  ],\r\n  // username:[\r\n  //   {required: true, message: '请输入用户名', trigger: 'blur'},\r\n  //   { min: 2, message: '昵称长度应大于两个字符', trigger: 'blur' },\r\n  // ],\r\n  // school:[\r\n  //   {required: true, message: '请输入学校名称', trigger: 'blur'},\r\n  // ],\r\n  password:[\r\n    {required: true, message: '请输入密码', trigger: 'blur'},\r\n    {pattern:/^\\S{6,15}$/,message:'密码必须是6-15位非空字符',trigger:'change'}\r\n  ],\r\n  confirm:[\r\n    {required: true, message: '请输入密码', trigger: 'blur'},\r\n    {pattern:/^\\S{6,15}$/,message:'密码必须是6-15位非空字符',trigger:'change'},\r\n    {validator:(rule,value,callback) => {\r\n      if(value !== formLabelAlign.password){\r\n        callback(new Error('两次输入的密码不一致'))\r\n      }else{\r\n        callback()\r\n      }\r\n  }}\r\n  ]\r\n})\r\n\r\n// 手机号验证函数\r\nfunction checkPhoneNumber() {\r\n  const phoneNumberPattern = /^1[3-9]\\d{9}$/;\r\n  phoneNumberValid.value = phoneNumberPattern.test(formLabelAlign.phoneNumber);\r\n  checkAllFields();\r\n}\r\n\r\n// 设置发送验证码按钮内容\r\nlet inner = ref('获取短信验证码')\r\n// 发送验证码数据请求\r\nasync function fetchData() {\r\n  try {\r\n    const response = await axios.get(`/sendSignupSMSCode/${formLabelAlign.phoneNumber}`);\r\n    console.log(response.data);\r\n    if(response.data.code === 1){\r\n      ElMessage.success('发送验证码成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      console.error(response.data.msg || 'Unknown error');\r\n      ElMessage.error('发送验证码失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('发送验证码失败', error.message);\r\n    ElMessage.error('发送验证码失败');\r\n  }\r\n}\r\n\r\n\r\n// let inner = ref('获取邮箱验证码');\r\n// // 发送验证码数据请求\r\n// async function fetchData() {\r\n//   try {\r\n//     const response = await axios.get(`/sendEmailVerification/0/${formLabelAlign.email}`);\r\n//     if (response.data.code === 1) {\r\n//       ElMessage.success('邮箱验证码发送成功');\r\n//     } else if(response.data.code === 0 && response.data.msg){\r\n//       ElMessage.error(response.data.msg.toString());\r\n//     }else {\r\n//       console.log('邮箱验证码发送失败');\r\n//       ElMessage.error('邮箱验证码发送失败');\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(error);\r\n//   }\r\n// }\r\n\r\n\r\n// 点击发送验证码\r\nasync function send(){\r\n  if(!isRunning.value){\r\n    isRunning.value = true\r\n    fetchData()\r\n    let time = ref(60)   // 增加定时器\r\n    let timeId = setInterval(function(){\r\n      time.value--\r\n      inner.value = time.value+'后重新获取'; // 更改按钮显示文字\r\n      if(time.value===0){\r\n        clearInterval(timeId)\r\n        inner.value = '获取短信验证码'\r\n        // inner.value = '获取邮箱验证码'\r\n        isRunning.value = false\r\n      }\r\n    },1000)\r\n  }\r\n}\r\n\r\n// 获取图片验证码\r\nasync function verfication() {\r\ntry {\r\n  const response = await axios.get('/sendImageCode', {\r\n    responseType: 'blob'\r\n  });\r\n  captchaUuid.value = response.headers.get('Captcha-UUID');\r\n  const reader = new FileReader();\r\n  reader.onload = function(event) {\r\n    imageUrl.value = event.target.result;\r\n  }\r\n  reader.readAsDataURL(response.data);\r\n} catch (error) {\r\n  console.log(error);\r\n  ElMessage.error('获取图片验证码失败');\r\n}\r\n}\r\n\r\n//验证输入框是否符合规则\r\nfunction checkAllFields() {\r\n  formTouched.value = true;\r\n  myForm.value.validate(valid => {\r\n    allFieldsValid.value = valid;\r\n  });\r\n}\r\n\r\n\r\n// 提交注册信息\r\nasync function register() {\r\n  try {\r\n    const valid = await myForm.value.validate();\r\n    if (!valid) {\r\n      console.log('非法提交！');\r\n      return false;\r\n    }\r\n    // 判定两次密码是否输入相同\r\n    if (formLabelAlign.confirm !== formLabelAlign.password) {\r\n      ElMessage.error('密码和确认密码不匹配');\r\n      return false;\r\n    }\r\n    const response = await axios.post('/users', {\r\n      password:formLabelAlign.password,\r\n      phoneNumber:formLabelAlign.phoneNumber,\r\n      phoneVerification:formLabelAlign.phoneVerification,\r\n      // email:formLabelAlign.email,\r\n      // emailVerification:formLabelAlign.emailVerification,\r\n      pictureVerification:formLabelAlign.pictureVerification,\r\n      uuid:captchaUuid.value,\r\n    });\r\n    if (response.data.code === 1) {\r\n      ElMessage.success('注册成功，请关闭注册框后点击进行登录');\r\n      registerDialogVisible.value = false;\r\n      // 若注册成功，添加token令牌并跳转页面\r\n    } else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n        verfication();\r\n    }else {\r\n      console.log('注册失败');\r\n      ElMessage.error('注册失败');\r\n      verfication();\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    ElMessage.error('注册过程中发生错误');\r\n    verfication();\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  verfication()\r\n})\r\n\r\n</script>\r\n<style scoped>\r\n::v-deep .el-dialog__body {\r\n  padding: 0;\r\n}\r\n::v-deep .el-dialog__header {\r\n  padding: 0;\r\n}\r\n.contain{\r\n  display: flex;\r\n  overflow: auto;\r\n}\r\n.one{\r\n  display: flex;\r\n  width: 60%;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  flex-direction: column;\r\n  background-color: #d5e3f2;\r\n  border-radius: 1rem;\r\n}\r\n.two{\r\n  width: 75%;\r\n  height: 78vh;\r\n  overflow: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 2rem auto 1rem;\r\n}\r\n.text{\r\n  font-family: MicrosoftYaHei;\r\n  font-size: 15px;\r\n  color: #000000;\r\n  display: block;\r\n  text-align: center;\r\n}\r\n.fish{\r\n  width: 70px;\r\n  height: 70px;\r\n  background-image: linear-gradient(90deg, \r\n        );\r\n  border-radius: 35px;\r\n  display: block;\r\n}\r\n.group{\r\n  width: 45%;\r\n  height: relative;\r\n  display: block;\r\n}\r\n\r\n.title{\r\n  width: 148px;\r\n  height: 28px;\r\n  font-family: MicrosoftYaHei;\r\n  font-size: 30px;\r\n  font-weight: normal;\r\n  font-stretch: normal;\r\n  letter-spacing: 0px;\r\n  color: #000000;\r\n  margin-left: 48px;\r\n  text-decoration: none;\r\n  position: relative;\r\n}\r\n.context{\r\n  margin-top: 66px;\r\n  margin-left: 66px;\r\n}\r\n:deep .el-dialog{\r\n  --el-dialog-width: 75% !important;\r\n  border-radius: 1rem;\r\n}\r\nel-form-item{\r\n    size: small;\r\n}\r\n/* 默认情况下隐藏错误信息，直到用户开始输入 */\r\n::v-deep .el-form-item__error {\r\n  display: none;\r\n}\r\n/* 当表单被触摸时，显示错误信息 */\r\n.form-touched ::v-deep .el-form-item__error {\r\n  display: block;\r\n}\r\n\r\n.form{\r\n  width: 90%;\r\n  height: 100%;\r\n  display: flex;\r\n  margin: 0 auto;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.center-button{\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.send{\r\n  display: inline-block;\r\n\twidth: 137px;\r\n\theight: 40px;\r\n\tbackground-color: #d5e3f2;\r\n\tbox-shadow: 0px 4px 4px 0px \r\n\t\t#b8cdf8;\r\n\tborder-radius: 4px;\r\n\tborder: solid 1px #d9d9d9;\r\n  margin-left: 20px;\r\n  cursor: pointer;\r\n}\r\n/* 调整输入框样式 */\r\n::v-deep .el-input__wrapper{\r\n  height: 40px;\r\n  border: solid 1px #dfdfdf;\r\n  box-shadow: 0 10px 10px -6px #cbd7f0;\r\n}\r\n/* 调整输入框上方文字颜色 */\r\n.el-form-item__label{\r\n  font-size: 16px;\r\n  color: #000000;\r\n}\r\n.verfication{\r\n\twidth: 100px;\r\n\theight: 49px;\r\n  background-color:#b8cdf8\r\n}  \r\n:deep .send-identifytext .el-form-item__content ,\r\n:deep .send-identifyimg .el-form-item__content {\r\n  gap: 0.6rem;\r\n  justify-content: flex-end;\r\n}\r\n:deep .el-form-item__error {\r\n  top: 45px;\r\n}\r\n/* 对手机屏幕和小尺寸屏幕的样式调整 */\r\n@media (max-width: 768px) {\r\n  .one{\r\n    display: none;\r\n  }\r\n  :deep .el-dialog{\r\n    --el-dialog-width: auto:  !important;\r\n    margin: 0px;\r\n    border-radius: 0rem;\r\n    background: #fafafa;\r\n  }\r\n  .two{\r\n    height: calc(100vh - 3rem);\r\n    width: 90%;\r\n  }\r\n  .form {\r\n    width: auto;\r\n  }\r\n  .send{\r\n    width: 122px;\r\n    height: 30px;\r\n  }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}