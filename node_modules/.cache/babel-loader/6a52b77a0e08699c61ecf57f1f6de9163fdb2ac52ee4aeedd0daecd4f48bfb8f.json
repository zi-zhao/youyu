{"ast":null,"code":"import { watch, ref } from 'vue';\nexport default {\n  __name: 'VideoPlay',\n  props: {\n    poster: String,\n    // 视频封面图片 URL\n    sources: Array,\n    // 视频源信息，支持多种格式\n    autoplay: Boolean,\n    // 是否自动播放视频\n    isLive: Boolean\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n\n    // id: 播放器的唯一标识符。类型为字符串。\n    // src: 视频的URL。类型为字符串，支持响应式布局。\n    // sources: 视频源数组。允许指定多种格式的视频源。类型为数组，支持响应式布局。\n    // width/height: 播放器的宽度和高度。类型为数字，支持响应式布局。\n    // preload: 指定视频预加载的方式。类型为字符串。\n    // loop: 是否循环播放视频。类型为布尔值。\n    // muted: 是否静音播放。类型为布尔值。\n    // poster: 视频的封面图URL。类型为字符串。\n    // controls: 是否显示播放器控制条。类型为布尔值。\n    // autoplay: 是否自动播放视频。类型为布尔值或字符串，支持响应式布局。\n    // playsinline: 在某些设备上，视频是否应该内联播放（而不是全屏）。类型为布尔值。\n    // crossorigin: 设置跨源资源共享(CORS)。类型为字符串。\n    // volume: 控制播放器的音量，介于0（静音）到1（最大音量）之间。类型为数字。\n    // playbackRate: 控制播放速率。类型为数字。\n    // playbackRates: 可选的播放速率数组。类型为数字数组。\n    // fluid: 是否使用流体布局，自适应父容器大小。类型为布尔值。\n    // language: 播放器的语言设置。类型为字符串。\n    // tracks: 视频字幕轨道设置。类型为数组。\n    // responsive: 是否支持响应式布局。类型为布尔值。\n    const props = __props;\n    const player = ref(null);\n    const videoElement = player.value; // 获取到视频元素\n\n    console.log(props.sources);\n    // watch(() => props.sources, (newSources, oldSources) => {\n    //   if (newSources[0].src !== oldSources[0].src) {\n    //     resetPlayer();\n    //   }\n    // }, { deep: true });\n\n    // const resetPlayer = () => {\n    //   if (player.value) {\n    //     player.value.pause();\n    //     player.value.currentTime = 0;  // 重置时间滚动条到开始位置\n    //     player.value.load(); // 为了确保新的视频源加载\n    //   }\n    // };\n\n    const __returned__ = {\n      props,\n      player,\n      videoElement,\n      watch,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["watch","ref","props","__props","player","videoElement","value","console","log","sources"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/components/VideoPlay.vue"],"sourcesContent":["<template>\r\n  <div class=\"video\">\r\n    <video-player\r\n      class=\"video-player vjs-big-play-centered\"\r\n      :ref=\"player\"\r\n      :sources=\"props.sources\"\r\n      :poster=\"props.sources[0].poster\"\r\n      crossorigin=\"anonymous\"\r\n      playsinline\r\n      controls\r\n      :volume=\"0.6\"        \r\n      :height=\"320\"      \r\n      :playback-rates=\"[0.7, 1.0, 1.5, 2.0, 2.5]\"        \r\n      @mounted=\"handleMounted\"\r\n      @ready=\"handleEvent($event)\"\r\n      @play=\"handleEvent($event)\"\r\n      @pause=\"handleEvent($event)\"\r\n      @ended=\"handleEvent($event)\"\r\n      @loadeddata=\"handleEvent($event)\"\r\n      @waiting=\"handleEvent($event)\"\r\n      @playing=\"handleEvent($event)\"\r\n      @canplay=\"handleEvent($event)\"\r\n      @canplaythrough=\"handleEvent($event)\"\r\n      @timeupdate=\"handleEvent(player?.currentTime())\"\r\n      @contextmenu.prevent\r\n  />\r\n  </div>\r\n</template>\r\n  \r\n<script setup>\r\n// id: 播放器的唯一标识符。类型为字符串。\r\n// src: 视频的URL。类型为字符串，支持响应式布局。\r\n// sources: 视频源数组。允许指定多种格式的视频源。类型为数组，支持响应式布局。\r\n// width/height: 播放器的宽度和高度。类型为数字，支持响应式布局。\r\n// preload: 指定视频预加载的方式。类型为字符串。\r\n// loop: 是否循环播放视频。类型为布尔值。\r\n// muted: 是否静音播放。类型为布尔值。\r\n// poster: 视频的封面图URL。类型为字符串。\r\n// controls: 是否显示播放器控制条。类型为布尔值。\r\n// autoplay: 是否自动播放视频。类型为布尔值或字符串，支持响应式布局。\r\n// playsinline: 在某些设备上，视频是否应该内联播放（而不是全屏）。类型为布尔值。\r\n// crossorigin: 设置跨源资源共享(CORS)。类型为字符串。\r\n// volume: 控制播放器的音量，介于0（静音）到1（最大音量）之间。类型为数字。\r\n// playbackRate: 控制播放速率。类型为数字。\r\n// playbackRates: 可选的播放速率数组。类型为数字数组。\r\n// fluid: 是否使用流体布局，自适应父容器大小。类型为布尔值。\r\n// language: 播放器的语言设置。类型为字符串。\r\n// tracks: 视频字幕轨道设置。类型为数组。\r\n// responsive: 是否支持响应式布局。类型为布尔值。\r\nimport { defineProps,watch,ref} from 'vue'\r\n\r\nconst props = defineProps({\r\n  poster: String, // 视频封面图片 URL\r\n  sources: Array,  // 视频源信息，支持多种格式\r\n  autoplay: Boolean,  // 是否自动播放视频\r\n  isLive:Boolean,\r\n});\r\n\r\nconst player = ref(null);\r\nconst videoElement = player.value; // 获取到视频元素\r\n\r\nconsole.log(props.sources);\r\n// watch(() => props.sources, (newSources, oldSources) => {\r\n//   if (newSources[0].src !== oldSources[0].src) {\r\n//     resetPlayer();\r\n//   }\r\n// }, { deep: true });\r\n\r\n// const resetPlayer = () => {\r\n//   if (player.value) {\r\n//     player.value.pause();\r\n//     player.value.currentTime = 0;  // 重置时间滚动条到开始位置\r\n//     player.value.load(); // 为了确保新的视频源加载\r\n//   }\r\n// };\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.video-player {\r\n  background-color: black;\r\n  width: 100%;\r\n  height: 70vh;\r\n}\r\n@media (max-width:768px){\r\n  .video-player {\r\n    height: 35vh;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AAiDA,SAAqBA,KAAK,EAACC,GAAG,QAAO,KAAK;;;;;;;;;;;;;;;;;IAnB1C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA,MAAMC,KAAK,GAAGC,OAKZ;IAEF,MAAMC,MAAM,GAAGH,GAAG,CAAC,IAAI,CAAC;IACxB,MAAMI,YAAY,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC;;IAEnCC,OAAO,CAACC,GAAG,CAACN,KAAK,CAACO,OAAO,CAAC;IAC1B;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}