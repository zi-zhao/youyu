{"ast":null,"code":"import { ref, onMounted, onUnmounted, watch, nextTick } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from '@/utils/request';\nimport { useRoute, useRouter } from 'vue-router';\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\nimport EvaluateDialog from '../EvaluateDialog.vue';\nimport { compressImage } from '@/utils/fileService.js';\nimport { formatDateTime } from '@/utils/timeFormat.js';\nimport { getAskAndQuestionCOSPermission } from '@/utils/cosService';\n\n// 将常量或其他变量放在这里，有访问接口的URL和端口号\nconst ip = '154.8.172.164';\nconst port = '8081';\nexport default {\n  __name: 'LiveChat',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem(\"userId\");\n    const finishTime = ref('24小时');\n    const websock = ref(null);\n    const route = useRoute();\n    const mainBoxRef = ref(null); //为了使sendMessagesList发生变化时（即有新消息），让聊天界面滚动到底部以显示最新消息功能，将显示聊天消息的盒子设为响应式。\n    const inputValue = ref(''); //输入框中的响应式数据\n    const RouteId = parseInt(route.params.id, 10); //路径中的用户ID\n    const questionId = parseInt(route.params.questionId, 10); //路径中的问答ID\n    const numberData = parseInt(route.params.number, 10); //路径中的追问次数\n    const askId = ref(null);\n    const answerId = ref(null);\n    const messageType = ref(null); // 判断此消息时一个回答还是一个提问，如果是0则表示回答，如果是1则表示提问，如果为2，则表示该消息是一个普通的聊天消息\n    const historyData = ref({}); //存放用户历史消息记录\n    const dialogFormVisible = ref(false); //控制评分弹窗是否开启\n    const number = ref(); //如果用户是提问者，记录剩余的追问次数\n    const answererInfo = ref({}); //问答对方的信息\n    const userAvater = ref(); //保存用户自己的头像\n    const sendMessagesList = ref([]); //存放所有消息数据,user:消息发送者是0，消息接受者是1,status:状态未成功为0，成功是1，待确定是2\n    const receiveUsername = ref(''); //消息的接收方名称\n    const router = useRouter();\n    //包含所有默认属性值的消息对象（按照sendMessagesList）\n    const defaultMsgStructure = {\n      uuid: '',\n      //该消息对应的uuid\n      number: null,\n      //如果是提问者发送的消息，则给提问者发送剩余的提问次数\n      status: null,\n      //是否成功发送消息,未成功0，成功1\n      messageType: null,\n      //判断该消息是图片还是文字，如果为图片的话为0，文字为1\n      user: null,\n      //判断发送到消息接收者还是消息发送者，发送者为0，接收者为1\n      toUserId: '',\n      // 消息接收者的id\n      fromUserId: '',\n      //消息发送者id\n      time: '',\n      //消息发送的时间\n      content: '',\n      //消息内容\n      imageurl: '',\n      //图片url\n      visibleRef: false //图片的展示插件是否开启\n    };\n\n    //设置上传图片\n    const fileName = ref();\n    const tempFileName = ref();\n    const imagePreviews = ref([]);\n    const imageInput = ref(null);\n    const selectedImages = ref([]);\n    const tempselectedImages = ref([]);\n    if (route.path.includes('/ask/')) {\n      askId.value = userId;\n      answerId.value = RouteId;\n      messageType.value = 1;\n      number.value = numberData;\n    }\n    if (route.path.includes('/answer/')) {\n      askId.value = RouteId;\n      answerId.value = userId;\n      messageType.value = 0;\n      number.value = -1;\n    }\n    const onHide = message => {\n      message.visibleRef = false;\n    };\n\n    //获取用户历史消息列表\n    async function getMessageLog() {\n      try {\n        const response = await axios.get(`/answer/message/history`, {\n          params: {\n            questionId: questionId\n          }\n        });\n        if (response.data.code === 1) {\n          const user = ref(0);\n          historyData.value = response.data.data;\n          sendMessagesList.value = historyData.value.map(item => {\n            if (item.fromUserId == userId) {\n              user.value = 0;\n            } else if (item.fromUserId == RouteId) {\n              user.value = 1;\n            } else {\n              ElMessage.error('未知的参数错误');\n            }\n            // if(item.isQuestion === 1 && item.type == 0){\n            //     item.imageurl = getFirstAnswerPictureFromCOS(item.questionId);\n            //     // item.imageurl = item.content;\n            // }\n            // if(item.isFirstAnswer === 1 && item.type == 0){\n            //     item.imageurl = getFirstQuestionPictureFromCOS(item.questionId);\n            //     // item.imageurl = item.content;\n            // }\n            return {\n              uuid: '',\n              status: 1,\n              messageType: item.type,\n              user: user.value,\n              toUserId: item.toUserId,\n              fromUserId: item.fromUserId,\n              time: item.createTime,\n              content: item.content,\n              imageurl:\n              // (item.isQuestion === 1 && item.type == 0) ? getFirstAnswerPictureFromCOS(item.questionId) :\n              // (item.isFirstAnswer === 1 && item.type == 0) ? getFirstQuestionPictureFromCOS(item.questionId) :\n              item.type == 0 ? item.cosSecretDto.url : null,\n              number: null,\n              visibleRef: false\n            };\n          });\n          // ElMessage.success('获取用户消息记录成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取用户消息记录失败\");\n          ElMessage.error('获取用户消息记录失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户消息记录失败\", error);\n        ElMessage.error('获取用户消息记录失败');\n      }\n    }\n    const isLoading = type => {\n      return type === 2;\n    };\n    const isLoading2 = type => {\n      return type === 0;\n    };\n\n    //判断和上一条消息的时间是否相同\n    const shouldDisplayTime = currentIndex => {\n      // 如果是第一条消息，则显示时间\n      if (currentIndex === 0) return true;\n      // 检查当前消息时间是否与前一条消息时间相同\n      const currentMessageTime = sendMessagesList.value[currentIndex].time;\n      const previousMessageTime = sendMessagesList.value[currentIndex - 1].time;\n      return currentMessageTime !== previousMessageTime;\n    };\n\n    //当 sendMessagesList 发生变化时，聊天窗口都会滚动到最底部，显示最新的消息。\n    watch(sendMessagesList, () => {\n      nextTick(() => {\n        if (mainBoxRef.value) {\n          mainBoxRef.value.scrollTop = mainBoxRef.value.scrollHeight;\n          console.log('已滚动到最底部');\n        }\n      });\n    }, {\n      deep: true,\n      immediate: true\n    });\n\n    //初始化websocket的一些必需方法，首先需创建websocket实例\n    function initWebSocket() {\n      //判断浏览器是否支持websocket,注意，这里如果判断发现该浏览器不支持websocket，并不会终止后续代码，只是会在页面给予用户弹窗警告\n      if (\"WebSocket\" in window) {\n        websock.value = new WebSocket(`ws://${ip}:${port}/question/${token}`);\n      } else {\n        alert(\"该浏览器不支持websocket!\");\n      }\n      websock.value.onopen = webSocketOnOpen;\n      websock.value.onmessage = webSocketOnMessage;\n      websock.value.onclose = webSocketClose;\n      websock.value.onerror = webSocketOnError;\n    }\n\n    //这是websocket连接（握手）时调用的方法\n    const webSocketOnOpen = () => {\n      // ElMessage.success('websocket连接成功');\n    };\n\n    //这是前端接受并处理后端（服务器）返回值的方法\n    async function webSocketOnMessage(e) {\n      //将JSON格式的字符串转换（解析）为JavaScript对象,如将\"{ \\\"id\\\": 123, \\\"status\\\": \\\"error\\\" }\"换为{id: 123,status: \"error\"}\n      let receivedData = JSON.parse(e.data);\n      console.log(receivedData);\n      switch (receivedData.user) {\n        //判断：如果返回的消息的类型是判断发送的消息有没有发送成功\n        case 0:\n          {\n            const message = sendMessagesList.value.find(item => item.uuid === receivedData.uuid);\n            if (message) {\n              if (receivedData.status === 0) {\n                message.status = 0;\n              } else if (receivedData.status === 1) {\n                message.status = 1;\n                if (route.path.includes('/ask/')) {\n                  number.value = receivedData.number;\n                }\n              } else if (receivedData.status === 2) {\n                const type = await getAskAndQuestionCOSPermission(tempselectedImages.value[0], receivedData.cosSecretDto);\n                sendPictureMessages(receivedData.cosSecretDto.url, 2, type, receivedData.uuid);\n              }\n            }\n            break;\n          }\n        //判断：如果返回的消息的类型是接受的消息\n        case 1:\n          {\n            // const newMessage = { ...defaultMsgStructure, ...receivedData, imageurl: receivedData.cosSecretDto.url };\n            const newMessage = {\n              uuid: receivedData.uuid,\n              //该消息对应的uuid\n              number: receivedData.number,\n              //如果是提问者发送的消息，则给提问者发送剩余的提问次数\n              status: receivedData.status,\n              //是否成功发送消息,未成功0，成功1\n              messageType: receivedData.messageType,\n              //判断该消息是图片还是文字，如果为图片的话为0，文字为1\n              user: receivedData.user,\n              //判断发送到消息接收者还是消息发送者，发送者为0，接收者为1\n              toUserId: receivedData.toUserId,\n              // 消息接收者的id\n              fromUserId: receivedData.fromUserId,\n              //消息发送者id\n              time: receivedData.time,\n              //消息发送的时间\n              content: receivedData.content,\n              //消息内容\n              imageurl: '',\n              //图片url\n              visibleRef: false\n            };\n            if (receivedData.messageType === 0) {\n              newMessage.imageurl = receivedData.cosSecretDto.url;\n            }\n            sendMessagesList.value.push(newMessage);\n            break;\n          }\n        default:\n          console.error('意义不明的返回消息', receivedData.type);\n          ElMessage.error('意义不明的返回消息');\n      }\n    }\n\n    //这是websocket连接时出现异常时处理的函数\n    const webSocketOnError = () => {\n      console.log('WebSocket连接失败');\n      ElMessage.error('WebSocket连接失败');\n    };\n\n    //这是关闭websocket连接的代码\n    const webSocketClose = e => {\n      console.log('已关闭连接', e);\n      // ElMessage.success('已关闭连接')\n    };\n    const webSocketSend = data => {\n      console.log('发送数据');\n      websock.value.send(JSON.stringify(data));\n    };\n    const sendWordMessages = () => {\n      const now = new Date();\n      const uuid = ref(uuidv4());\n      const tempData = {\n        uuid: uuid.value,\n        // questionId:questionId,\n        status: 2,\n        user: 0,\n        messageType: 1,\n        //判断该消息是图片还是文字，如果为图片的话为0，文字为1\n        toUserId: RouteId,\n        fromUserId: userId,\n        time: formatDateTime(now),\n        content: inputValue.value,\n        imageurl: null,\n        number: null\n      };\n      sendMessagesList.value.push(tempData);\n      const tempData2 = {\n        uuid: uuid.value,\n        questionId: questionId,\n        //对应的问题的id,如果是普通消息的话则为0\n        type: messageType.value,\n        //判断此消息时一个回答还是一个提问，如果是0则表示回答，如果是1则表示提问，如果为2，则表示该消息是一个普通的聊天消息\n        toUserId: RouteId,\n        message: inputValue.value,\n        messageType: 1,\n        // 消息类型，0表示图片，1表示文字\n        isConfirm: 1,\n        imageurl: null,\n        filename: null\n      };\n      console.log(tempData2);\n      webSocketSend(tempData2);\n      inputValue.value = '';\n    };\n    const sendPictureMessages = (url, num, type, tempuuid) => {\n      const now = new Date();\n      const uuid = ref(uuidv4());\n      if (num === 1) {\n        const tempData = {\n          uuid: uuid.value,\n          // questionId:questionId,\n          status: 2,\n          user: 0,\n          messageType: 0,\n          //判断该消息是图片还是文字，如果为图片的话为0，文字为1\n          toUserId: RouteId,\n          fromUserId: userId,\n          time: formatDateTime(now),\n          content: null,\n          imageurl: imagePreviews.value[0],\n          number: null,\n          visibleRef: false\n        };\n        sendMessagesList.value.push(tempData);\n        const tempData2 = {\n          uuid: uuid.value,\n          questionId: questionId,\n          //对应的问题的id,如果是普通消息的话则为0\n          type: messageType.value,\n          // 判断此消息时一个回答还是一个提问，如果是0则表示回答，如果是1则表示提问，如果为2，则表示该消息是一个普通的聊天消息\n          toUserId: RouteId,\n          message: null,\n          messageType: 0,\n          // 消息类型，0表示图片，1表示文字\n          isConfirm: type,\n          imageurl: url,\n          filename: fileName.value\n        };\n        webSocketSend(tempData2);\n      } else if (num === 2) {\n        const tempData2 = {\n          uuid: tempuuid,\n          questionId: questionId,\n          //对应的问题的id,如果是普通消息的话则为0\n          type: messageType.value,\n          // 判断此消息时一个回答还是一个提问，如果是0则表示回答，如果是1则表示提问，如果为2，则表示该消息是一个普通的聊天消息\n          toUserId: RouteId,\n          message: null,\n          messageType: 0,\n          // 消息类型，0表示图片，1表示文字\n          isConfirm: type,\n          imageurl: url,\n          filename: fileName.value\n        };\n        webSocketSend(tempData2);\n      }\n      tempselectedImages.value = selectedImages.value;\n      tempFileName.value = fileName.value;\n    };\n    const openrefuse = async () => {\n      try {\n        await ElMessageBox.confirm('确定要结束该回答吗？', {\n          confirmButtonText: '确认结束',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        endQuestion();\n      } catch {\n        console.log('关闭弹框');\n      }\n    };\n\n    //结束问题\n    async function endQuestion() {\n      try {\n        const response = await axios.put(`/answer/myask/end/${questionId}`);\n        if (response.data.code === 1) {\n          ElMessage.success('结束问题成功');\n          router.push('/DefaultPresentation');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"结束问题失败\");\n          ElMessage.error('结束问题失败');\n        }\n      } catch (error) {\n        console.error(\"结束问题失败\", error);\n        ElMessage.error('结束问题失败');\n      }\n    }\n\n    //获取答主具体信息\n    async function getAnswererInfo() {\n      try {\n        const response = await axios.get(`/answer/${RouteId}`);\n        if (response.data.code === 1) {\n          answererInfo.value = response.data.data;\n          answererInfo.value.verified = await fetchUserInformation(RouteId);\n          answererInfo.value.newAvater = await getUsersAvatarFromCOS(answererInfo.value.userId);\n          userAvater.value = await getUsersAvatarFromCOS(userId);\n          receiveUsername.value = answererInfo.value.username;\n          // ElMessage.success('获取答主具体信息成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取答主具体信息失败\");\n          ElMessage.error('获取答主具体信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取答主具体信息失败\", error);\n        ElMessage.error('获取答主具体信息失败');\n      }\n    }\n\n    // (上传图片)当点击按钮时触发文件输入框\n    const triggerImageUpload = () => {\n      if (selectedImages.value.length < 2) {\n        imageInput.value.click();\n      } else {\n        ElMessage.error('只能提交一张照片');\n      }\n    };\n\n    //(上传图片)当文件选择后处理图片\n    const handleImage = async event => {\n      selectedImages.value.length = 0;\n      imagePreviews.value.length = 0;\n      const file = event.target.files[0];\n      if (selectedImages.value.length < 2) {\n        try {\n          const timestamp = new Date().getTime(); // 获取当前时间戳\n          fileName.value = `${timestamp}-${file.name}`; // 在文件名前加时间戳\n          const compressedFile = await compressImage(file);\n          const reader = new FileReader();\n          reader.onload = function (e) {\n            imagePreviews.value.push(e.target.result);\n            selectedImages.value.push(compressedFile);\n            sendPictureMessages(0, 1, 0); //第一个0是因为此时后端不需要图片的URL，随便写的0，第二个1是因为对于某个图片信息来说这是第一次调用图片接口，第三个0是因为此时消息还未确定\n          };\n          reader.readAsDataURL(compressedFile);\n        } catch (error) {\n          console.error(error);\n          ElMessage.error('保存图片失败');\n        }\n      }\n    };\n\n    // 获取用户信息\n    const fetchUserInformation = async userId => {\n      try {\n        const response = await axios.get(`/users/${userId}`);\n        if (response.data.code === 1) {\n          return response.data.data.verified;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('获取用户信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户信息失败\", error);\n        ElMessage.error('获取用户信息失败');\n      }\n    };\n    onMounted(() => {\n      getAnswererInfo();\n      getMessageLog();\n      initWebSocket();\n    });\n    onUnmounted(() => {\n      if (websock.value) {\n        websock.value.close();\n      }\n    });\n    const __returned__ = {\n      ip,\n      port,\n      token,\n      userId,\n      finishTime,\n      websock,\n      route,\n      mainBoxRef,\n      inputValue,\n      RouteId,\n      questionId,\n      numberData,\n      askId,\n      answerId,\n      messageType,\n      historyData,\n      dialogFormVisible,\n      number,\n      answererInfo,\n      userAvater,\n      sendMessagesList,\n      receiveUsername,\n      router,\n      defaultMsgStructure,\n      fileName,\n      tempFileName,\n      imagePreviews,\n      imageInput,\n      selectedImages,\n      tempselectedImages,\n      onHide,\n      getMessageLog,\n      isLoading,\n      isLoading2,\n      shouldDisplayTime,\n      initWebSocket,\n      webSocketOnOpen,\n      webSocketOnMessage,\n      webSocketOnError,\n      webSocketClose,\n      webSocketSend,\n      sendWordMessages,\n      sendPictureMessages,\n      openrefuse,\n      endQuestion,\n      getAnswererInfo,\n      triggerImageUpload,\n      handleImage,\n      fetchUserInformation,\n      ref,\n      onMounted,\n      onUnmounted,\n      watch,\n      nextTick,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get uuidv4() {\n        return uuidv4;\n      },\n      get axios() {\n        return axios;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get getUsersAvatarFromCOS() {\n        return getUsersAvatarFromCOS;\n      },\n      EvaluateDialog,\n      get compressImage() {\n        return compressImage;\n      },\n      get formatDateTime() {\n        return formatDateTime;\n      },\n      get getAskAndQuestionCOSPermission() {\n        return getAskAndQuestionCOSPermission;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","watch","nextTick","ElMessage","ElMessageBox","v4","uuidv4","axios","useRoute","useRouter","getUsersAvatarFromCOS","EvaluateDialog","compressImage","formatDateTime","getAskAndQuestionCOSPermission","ip","port","token","localStorage","getItem","userId","finishTime","websock","route","mainBoxRef","inputValue","RouteId","parseInt","params","id","questionId","numberData","number","askId","answerId","messageType","historyData","dialogFormVisible","answererInfo","userAvater","sendMessagesList","receiveUsername","router","defaultMsgStructure","uuid","status","user","toUserId","fromUserId","time","content","imageurl","visibleRef","fileName","tempFileName","imagePreviews","imageInput","selectedImages","tempselectedImages","path","includes","value","onHide","message","getMessageLog","response","get","data","code","map","item","error","type","createTime","cosSecretDto","url","msg","toString","console","isLoading","isLoading2","shouldDisplayTime","currentIndex","currentMessageTime","previousMessageTime","scrollTop","scrollHeight","log","deep","immediate","initWebSocket","window","WebSocket","alert","onopen","webSocketOnOpen","onmessage","webSocketOnMessage","onclose","webSocketClose","onerror","webSocketOnError","e","receivedData","JSON","parse","find","sendPictureMessages","newMessage","push","webSocketSend","send","stringify","sendWordMessages","now","Date","tempData","tempData2","isConfirm","filename","num","tempuuid","openrefuse","confirm","confirmButtonText","cancelButtonText","endQuestion","put","success","getAnswererInfo","verified","fetchUserInformation","newAvater","username","triggerImageUpload","length","click","handleImage","event","file","target","files","timestamp","getTime","name","compressedFile","reader","FileReader","onload","result","readAsDataURL","close"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/QACenter/components/OngoingConversation/LiveChat.vue"],"sourcesContent":["<template>\r\n    <div class=\"bgc_box\">\r\n        <!-- 提问者聊天框   向**的提问+价值 -->\r\n        <div v-if=\"route.path.includes('/ask/')\" class=\"top\">\r\n            <div class=\"one\">\r\n                <span>向</span>\r\n                <div style=\"display: flex;align-items: center;\">\r\n                    <span class=\"text1\">{{ receiveUsername }}</span>\r\n                    <img v-if=\"answererInfo.verified === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;margin: 0 10px 0 -9px;\" alt=\"\">\r\n                </div>\r\n                <span>提问</span>\r\n            </div>\r\n            <!-- <div class=\"timer\">\r\n                此提问将在{{finishTime}}后结束\r\n            </div> -->\r\n            <div  class=\"btn\" @click=\"openrefuse\">\r\n                结束\r\n            </div>\r\n        </div>\r\n         <!-- 答主聊天框   **的提问+价值 -->\r\n        <div v-if=\"route.path.includes('/answer/')\" class=\"top\">\r\n            <div class=\"one\">\r\n                <span class=\"text1\">{{ receiveUsername }}</span>\r\n                <span>的提问</span>\r\n            </div>\r\n            <!-- <div class=\"timer\">\r\n                此提问将在{{finishTime}}后结束\r\n            </div> -->\r\n        </div>\r\n        <!-- 对话列表  -->\r\n        <div class=\"main_box\" ref=\"mainBoxRef\">\r\n            <div  v-for=\"(message, index) in sendMessagesList\" :key=\"message.time\">\r\n                <div v-if=\"shouldDisplayTime(index)\" class=\"time\">\r\n                    {{ message.time }}\r\n                </div>\r\n                <div class=\"left_box\" v-if=\"message.user === 1\">\r\n                    <div class=\"leftchat\">\r\n                        <img :src=\"answererInfo.newAvater\" alt=\"\" class=\"userpic\">\r\n                        <div v-if=\"message.messageType === 1\" class=\"conversation_L\">\r\n                            <span >{{ message.content }}</span>\r\n                        </div>\r\n                        <div v-if=\"message.messageType === 0\">\r\n                            <img :src=\"message.imageurl\" @click=\"message.visibleRef = true\" alt=\"\" class=\"sendpic\">\r\n                            <vue-easy-lightbox\r\n                                :visible=\"message.visibleRef\"\r\n                                :imgs=\"message.imageurl\"\r\n                                :index=\"index\"\r\n                                @hide=\"onHide(message)\"\r\n                            ></vue-easy-lightbox>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"right_box\" v-if=\"message.user === 0\">\r\n                    <div class=\"rightchat\">\r\n                        <div style=\"display: flex;align-items: center;\">\r\n                            <div v-if=\"isLoading(message.status)\" v-loading=\"true\" class=\"send-state\"></div>\r\n                            <div v-if=\"isLoading2(message.status)\" class=\"send-state\">\r\n                                <el-result\r\n                                    icon=\"error\"\r\n                                ></el-result>\r\n                            </div> \r\n                            <div v-if=\"message.messageType === 1\" class=\"conversation_R\">\r\n                                <span >{{ message.content }}</span>\r\n                            </div>\r\n                            <div v-if=\"message.messageType === 0\">\r\n                                <img :src=\"message.imageurl\" @click=\"message.visibleRef = true\" alt=\"\" class=\"sendpic\">\r\n                                <vue-easy-lightbox\r\n                                    :visible=\"message.visibleRef\"\r\n                                    :imgs=\"message.imageurl\"\r\n                                    :index=\"index\"\r\n                                    @hide=\"onHide(message)\"\r\n                                ></vue-easy-lightbox>\r\n                            </div>\r\n                        </div>\r\n                        <img :src=\"userAvater\" alt=\"\" class=\"userpic\">\r\n                    </div>\r\n                </div>\r\n            </div>   \r\n        </div>\r\n        <div class=\"bottom\">\r\n            <div v-if=\"route.path.includes('/ask/')\" class=\"inputbox\">\r\n                <!-- <input type=\"text\" v-model=\"inputValue\"   :placeholder=\"'您还能发送' + number + '追问'\"> -->\r\n                <el-input\r\n                    v-model=\"inputValue\"\r\n                    :autosize=\"{ minRows: 1, maxRows: 5 }\"\r\n                    type=\"textarea\"\r\n                    maxlength=\"200\"\r\n                    show-word-limit=\"true\"\r\n                    resize=\"none\"\r\n                    :placeholder=\"'您还能发送' + number + '追问'\"\r\n                    class=\"livechat-input\"\r\n                />\r\n            </div>\r\n            <div v-else class=\"inputbox\">\r\n                <el-input\r\n                    v-model=\"inputValue\"\r\n                    :autosize=\"{ minRows: 1, maxRows: 5 }\"\r\n                    type=\"textarea\"\r\n                    maxlength=\"200\"\r\n                    show-word-limit=\"true\"\r\n                    resize=\"none\"\r\n                    class=\"livechat-input\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <input type=\"file\" ref=\"imageInput\"  style=\"display: none;\" @change=\"handleImage\"  >\r\n                <img @click=\"triggerImageUpload\" src=\"@/assets/QACenter/UploadPic.svg\" style=\"width: 28px; height: 28px; cursor: pointer;\" alt=\"\">\r\n                 <!-- 将上传的输入框隐藏 -->\r\n            </div>\r\n            <div \r\n                class=\"send_btn\" \r\n                @click=\"sendWordMessages\"\r\n                :class=\"{'disabled': number === 'a'}\"\r\n            >发送</div>\r\n        </div>\r\n    </div>\r\n    <div v-if=\"dialogFormVisible\">\r\n        <EvaluateDialog \r\n            v-model=\"dialogFormVisible\" \r\n            QuestionId: questionId\r\n            Number:number.value\r\n        ></EvaluateDialog>\r\n    </div> \r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted,watch, nextTick} from 'vue';\r\nimport { ElMessage,ElMessageBox } from 'element-plus';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport axios from '@/utils/request';\r\nimport { useRoute,useRouter } from 'vue-router';\r\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\r\nimport EvaluateDialog from '../EvaluateDialog.vue';\r\nimport { compressImage } from '@/utils/fileService.js';\r\nimport { formatDateTime } from '@/utils/timeFormat.js';\r\nimport {getAskAndQuestionCOSPermission} from '@/utils/cosService';\r\n\r\n// 将常量或其他变量放在这里，有访问接口的URL和端口号\r\nconst ip = '154.8.172.164';\r\nconst port = '8081';\r\nconst token = localStorage.getItem('token');\r\nconst userId = localStorage.getItem(\"userId\");\r\nconst finishTime = ref('24小时');\r\nconst websock = ref(null);\r\nconst route = useRoute ();\r\nconst mainBoxRef = ref(null);//为了使sendMessagesList发生变化时（即有新消息），让聊天界面滚动到底部以显示最新消息功能，将显示聊天消息的盒子设为响应式。\r\nconst inputValue = ref('');//输入框中的响应式数据\r\nconst RouteId = parseInt(route.params.id,10);//路径中的用户ID\r\nconst questionId = parseInt(route.params.questionId,10);//路径中的问答ID\r\nconst numberData = parseInt(route.params.number,10);//路径中的追问次数\r\nconst askId = ref(null);\r\nconst answerId = ref(null);\r\nconst messageType = ref(null);// 判断此消息时一个回答还是一个提问，如果是0则表示回答，如果是1则表示提问，如果为2，则表示该消息是一个普通的聊天消息\r\nconst historyData = ref({});//存放用户历史消息记录\r\nconst dialogFormVisible = ref(false);//控制评分弹窗是否开启\r\nconst number = ref();//如果用户是提问者，记录剩余的追问次数\r\nconst answererInfo = ref({});//问答对方的信息\r\nconst userAvater = ref();//保存用户自己的头像\r\nconst sendMessagesList = ref([]);//存放所有消息数据,user:消息发送者是0，消息接受者是1,status:状态未成功为0，成功是1，待确定是2\r\nconst receiveUsername = ref('');//消息的接收方名称\r\nconst router = useRouter();\r\n//包含所有默认属性值的消息对象（按照sendMessagesList）\r\nconst defaultMsgStructure = {\r\n    uuid: '',//该消息对应的uuid\r\n    number:null,//如果是提问者发送的消息，则给提问者发送剩余的提问次数\r\n    status:null,//是否成功发送消息,未成功0，成功1\r\n    messageType: null,//判断该消息是图片还是文字，如果为图片的话为0，文字为1\r\n    user: null,//判断发送到消息接收者还是消息发送者，发送者为0，接收者为1\r\n    toUserId:'',// 消息接收者的id\r\n    fromUserId:'',//消息发送者id\r\n    time: '',//消息发送的时间\r\n    content: '',//消息内容\r\n    imageurl:'',//图片url\r\n    visibleRef:false,//图片的展示插件是否开启\r\n};\r\n\r\n//设置上传图片\r\nconst fileName = ref();\r\nconst tempFileName = ref();\r\nconst imagePreviews = ref([]);\r\nconst imageInput = ref(null);  \r\nconst selectedImages = ref([]);\r\nconst tempselectedImages = ref([]);\r\n\r\nif (route.path.includes('/ask/')) {\r\n    askId.value =  userId;\r\n    answerId.value = RouteId;\r\n    messageType.value = 1;\r\n    number.value = numberData;\r\n}\r\n\r\nif (route.path.includes('/answer/')) {\r\n    askId.value =  RouteId;\r\n    answerId.value = userId;\r\n    messageType.value = 0;\r\n    number.value = -1;\r\n}\r\n\r\nconst onHide = (message) => {\r\n    message.visibleRef = false;\r\n};\r\n\r\n//获取用户历史消息列表\r\nasync function getMessageLog() {\r\n  try{\r\n    const response = await axios.get(`/answer/message/history`,{\r\n        params: {\r\n            questionId:questionId,\r\n        }\r\n    });\r\n    if(response.data.code === 1){\r\n        const user = ref(0);\r\n        historyData.value = response.data.data;\r\n        sendMessagesList.value = historyData.value.map(item => {\r\n            if(item.fromUserId == userId) {\r\n                user.value = 0;\r\n            }else if(item.fromUserId == RouteId){\r\n                user.value = 1;\r\n            }else{\r\n                ElMessage.error('未知的参数错误');\r\n            }\r\n            // if(item.isQuestion === 1 && item.type == 0){\r\n            //     item.imageurl = getFirstAnswerPictureFromCOS(item.questionId);\r\n            //     // item.imageurl = item.content;\r\n            // }\r\n            // if(item.isFirstAnswer === 1 && item.type == 0){\r\n            //     item.imageurl = getFirstQuestionPictureFromCOS(item.questionId);\r\n            //     // item.imageurl = item.content;\r\n            // }\r\n            return {\r\n                uuid: '', \r\n                status: 1, \r\n                messageType: item.type, \r\n                user: user.value, \r\n                toUserId: item.toUserId, \r\n                fromUserId: item.fromUserId, \r\n                time: item.createTime, \r\n                content: item.content,\r\n                imageurl:   \r\n                    // (item.isQuestion === 1 && item.type == 0) ? getFirstAnswerPictureFromCOS(item.questionId) :\r\n                    // (item.isFirstAnswer === 1 && item.type == 0) ? getFirstQuestionPictureFromCOS(item.questionId) :\r\n                    (item.type == 0) ? item.cosSecretDto.url :\r\n                    null,\r\n                number:null,\r\n                visibleRef:false,\r\n            };\r\n        });\r\n        // ElMessage.success('获取用户消息记录成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取用户消息记录失败\");\r\n        ElMessage.error('获取用户消息记录失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取用户消息记录失败\", error); \r\n    ElMessage.error('获取用户消息记录失败');\r\n  }\r\n}\r\n\r\n\r\nconst isLoading = (type) => {\r\n    return type === 2;\r\n}\r\nconst isLoading2 = (type) => {\r\n    return type === 0;\r\n}\r\n\r\n\r\n//判断和上一条消息的时间是否相同\r\nconst shouldDisplayTime = (currentIndex) => {\r\n    // 如果是第一条消息，则显示时间\r\n    if (currentIndex === 0) return true;\r\n    // 检查当前消息时间是否与前一条消息时间相同\r\n    const currentMessageTime = sendMessagesList.value[currentIndex].time;\r\n    const previousMessageTime = sendMessagesList.value[currentIndex - 1].time;   \r\n    return currentMessageTime !== previousMessageTime;\r\n}\r\n\r\n\r\n\r\n//当 sendMessagesList 发生变化时，聊天窗口都会滚动到最底部，显示最新的消息。\r\nwatch(sendMessagesList, () => {\r\n  nextTick(() => {\r\n    if (mainBoxRef.value) {\r\n      mainBoxRef.value.scrollTop = mainBoxRef.value.scrollHeight;\r\n      console.log('已滚动到最底部')\r\n    }\r\n  });\r\n}, {  deep: true, immediate: true });\r\n\r\n\r\n\r\n//初始化websocket的一些必需方法，首先需创建websocket实例\r\nfunction initWebSocket() {\r\n    //判断浏览器是否支持websocket,注意，这里如果判断发现该浏览器不支持websocket，并不会终止后续代码，只是会在页面给予用户弹窗警告\r\n    if (\"WebSocket\" in window) {\r\n        websock.value = new WebSocket(`ws://${ip}:${port}/question/${token}`);\r\n    } else {\r\n        alert(\"该浏览器不支持websocket!\");\r\n    }\r\n    websock.value.onopen = webSocketOnOpen;\r\n    websock.value.onmessage = webSocketOnMessage;\r\n    websock.value.onclose = webSocketClose;\r\n    websock.value.onerror = webSocketOnError;\r\n}\r\n\r\n//这是websocket连接（握手）时调用的方法\r\nconst webSocketOnOpen = () => {\r\n    // ElMessage.success('websocket连接成功');\r\n}\r\n\r\n//这是前端接受并处理后端（服务器）返回值的方法\r\nasync function webSocketOnMessage (e) {\r\n    //将JSON格式的字符串转换（解析）为JavaScript对象,如将\"{ \\\"id\\\": 123, \\\"status\\\": \\\"error\\\" }\"换为{id: 123,status: \"error\"}\r\n    let receivedData = JSON.parse(e.data);\r\n    console.log(receivedData);\r\n    switch(receivedData.user) {\r\n        //判断：如果返回的消息的类型是判断发送的消息有没有发送成功\r\n        case 0:{\r\n            const message = sendMessagesList.value.find(item => item.uuid === receivedData.uuid);\r\n            if (message) {\r\n                if (receivedData.status === 0) {\r\n                    message.status = 0;\r\n                } else if (receivedData.status === 1) {\r\n                    message.status = 1;\r\n                    if(route.path.includes('/ask/')){\r\n                        number.value = receivedData.number;\r\n                    }\r\n                }else if(receivedData.status === 2){\r\n                    const type = await getAskAndQuestionCOSPermission(tempselectedImages.value[0],receivedData.cosSecretDto);\r\n                    sendPictureMessages(receivedData.cosSecretDto.url,2,type,receivedData.uuid);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        //判断：如果返回的消息的类型是接受的消息\r\n        case 1:{\r\n            // const newMessage = { ...defaultMsgStructure, ...receivedData, imageurl: receivedData.cosSecretDto.url };\r\n            const newMessage = {\r\n                uuid: receivedData.uuid,//该消息对应的uuid\r\n                number:receivedData.number,//如果是提问者发送的消息，则给提问者发送剩余的提问次数\r\n                status:receivedData.status,//是否成功发送消息,未成功0，成功1\r\n                messageType: receivedData.messageType,//判断该消息是图片还是文字，如果为图片的话为0，文字为1\r\n                user: receivedData.user,//判断发送到消息接收者还是消息发送者，发送者为0，接收者为1\r\n                toUserId:receivedData.toUserId,// 消息接收者的id\r\n                fromUserId:receivedData.fromUserId,//消息发送者id\r\n                time: receivedData.time,//消息发送的时间\r\n                content: receivedData.content,//消息内容\r\n                imageurl:'',//图片url\r\n                visibleRef:false,\r\n            };\r\n            if(receivedData.messageType === 0){\r\n                newMessage.imageurl = receivedData.cosSecretDto.url;\r\n            }\r\n            sendMessagesList.value.push(newMessage);\r\n            break;\r\n        }\r\n\r\n        default:\r\n            console.error('意义不明的返回消息', receivedData.type);\r\n            ElMessage.error('意义不明的返回消息');\r\n    }\r\n}\r\n\r\n//这是websocket连接时出现异常时处理的函数\r\nconst webSocketOnError = () => {\r\n    console.log('WebSocket连接失败');\r\n    ElMessage.error('WebSocket连接失败');\r\n}\r\n\r\n//这是关闭websocket连接的代码\r\nconst webSocketClose = (e) => {\r\n    console.log('已关闭连接', e);\r\n    // ElMessage.success('已关闭连接')\r\n}\r\n\r\n\r\n\r\nconst webSocketSend = (data) => {\r\n  console.log('发送数据');\r\n  websock.value.send(JSON.stringify(data));\r\n}\r\n\r\nconst sendWordMessages = ()  =>{\r\n    const now = new Date();\r\n    const uuid = ref(uuidv4());\r\n    const tempData = {\r\n        uuid:uuid.value,\r\n        // questionId:questionId,\r\n        status: 2,\r\n        user:0,\r\n        messageType:1, //判断该消息是图片还是文字，如果为图片的话为0，文字为1\r\n        toUserId:RouteId,\r\n        fromUserId:userId,\r\n        time: formatDateTime(now),\r\n        content: inputValue.value,\r\n        imageurl: null,\r\n        number:null,\r\n    }\r\n    sendMessagesList.value.push(tempData);\r\n    const tempData2 = {\r\n        uuid:uuid.value,\r\n        questionId:questionId,//对应的问题的id,如果是普通消息的话则为0\r\n        type:messageType.value,//判断此消息时一个回答还是一个提问，如果是0则表示回答，如果是1则表示提问，如果为2，则表示该消息是一个普通的聊天消息\r\n        toUserId:RouteId,\r\n        message: inputValue.value,\r\n        messageType:1,// 消息类型，0表示图片，1表示文字\r\n        isConfirm:1,\r\n        imageurl:null,\r\n        filename:null,\r\n    }\r\n    console.log(tempData2);\r\n    webSocketSend(tempData2);\r\n    inputValue.value ='';\r\n}\r\n\r\nconst sendPictureMessages = (url,num,type,tempuuid)  =>{\r\n    const now = new Date();\r\n    const uuid = ref(uuidv4());\r\n    if(num === 1){\r\n        const tempData = {\r\n            uuid:uuid.value,\r\n            // questionId:questionId,\r\n            status: 2,\r\n            user:0,\r\n            messageType:0, //判断该消息是图片还是文字，如果为图片的话为0，文字为1\r\n            toUserId:RouteId,\r\n            fromUserId:userId,\r\n            time: formatDateTime(now),\r\n            content: null,\r\n            imageurl: imagePreviews.value[0],\r\n            number:null,\r\n            visibleRef:false,\r\n        }\r\n        sendMessagesList.value.push(tempData);\r\n        const tempData2 = {\r\n            uuid:uuid.value,\r\n            questionId:questionId,//对应的问题的id,如果是普通消息的话则为0\r\n            type:messageType.value,// 判断此消息时一个回答还是一个提问，如果是0则表示回答，如果是1则表示提问，如果为2，则表示该消息是一个普通的聊天消息\r\n            toUserId:RouteId,\r\n            message:null,\r\n            messageType:0,// 消息类型，0表示图片，1表示文字\r\n            isConfirm:type,\r\n            imageurl:url,\r\n            filename:fileName.value,\r\n        }\r\n        webSocketSend(tempData2);\r\n    }else if(num === 2){\r\n        const tempData2 = {\r\n            uuid:tempuuid,\r\n            questionId:questionId,//对应的问题的id,如果是普通消息的话则为0\r\n            type:messageType.value,// 判断此消息时一个回答还是一个提问，如果是0则表示回答，如果是1则表示提问，如果为2，则表示该消息是一个普通的聊天消息\r\n            toUserId:RouteId,\r\n            message:null,\r\n            messageType:0,// 消息类型，0表示图片，1表示文字\r\n            isConfirm:type,\r\n            imageurl:url,\r\n            filename:fileName.value,\r\n        }\r\n        webSocketSend(tempData2);\r\n    }\r\n\r\n    tempselectedImages.value = selectedImages.value;\r\n    tempFileName.value = fileName.value;\r\n}\r\n\r\n\r\nconst openrefuse = async () => {\r\n  try {\r\n    await ElMessageBox.confirm(\r\n      '确定要结束该回答吗？',\r\n      {\r\n        confirmButtonText: '确认结束',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }\r\n    );\r\n    endQuestion();\r\n  } catch {\r\n    console.log('关闭弹框')\r\n  }\r\n}\r\n\r\n\r\n//结束问题\r\nasync function endQuestion() {\r\n  try{\r\n    const response = await axios.put(`/answer/myask/end/${questionId}`)\r\n    if(response.data.code === 1){\r\n        ElMessage.success('结束问题成功');\r\n        router.push('/DefaultPresentation');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"结束问题失败\");\r\n        ElMessage.error('结束问题失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"结束问题失败\", error); \r\n    ElMessage.error('结束问题失败');\r\n  }\r\n}\r\n\r\n//获取答主具体信息\r\nasync function getAnswererInfo() {\r\n  try{\r\n    const response = await axios.get(`/answer/${RouteId}`)\r\n    if(response.data.code === 1){\r\n        answererInfo.value = response.data.data;\r\n        answererInfo.value.verified = await fetchUserInformation(RouteId);\r\n        answererInfo.value.newAvater = await getUsersAvatarFromCOS(answererInfo.value.userId);\r\n        userAvater.value = await getUsersAvatarFromCOS(userId);\r\n        receiveUsername.value =  answererInfo.value.username;\r\n        // ElMessage.success('获取答主具体信息成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取答主具体信息失败\");\r\n        ElMessage.error('获取答主具体信息失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取答主具体信息失败\", error); \r\n    ElMessage.error('获取答主具体信息失败');\r\n  }\r\n}\r\n\r\n\r\n// (上传图片)当点击按钮时触发文件输入框\r\nconst triggerImageUpload = () => {\r\n    if (selectedImages.value.length < 2) {\r\n        imageInput.value.click();\r\n    } else {\r\n        ElMessage.error('只能提交一张照片');\r\n    }\r\n};\r\n\r\n//(上传图片)当文件选择后处理图片\r\nconst handleImage = async (event) => {\r\n    selectedImages.value.length = 0;\r\n    imagePreviews.value.length = 0;\r\n    const file = event.target.files[0];\r\n    if (selectedImages.value.length < 2) {\r\n        try {\r\n            const timestamp = new Date().getTime(); // 获取当前时间戳\r\n            fileName.value = `${timestamp}-${file.name}`; // 在文件名前加时间戳\r\n            const compressedFile = await compressImage(file);\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                imagePreviews.value.push(e.target.result);\r\n                selectedImages.value.push(compressedFile);\r\n                sendPictureMessages(0,1,0);//第一个0是因为此时后端不需要图片的URL，随便写的0，第二个1是因为对于某个图片信息来说这是第一次调用图片接口，第三个0是因为此时消息还未确定\r\n            };\r\n            reader.readAsDataURL(compressedFile);\r\n            \r\n        } catch (error) {\r\n            console.error(error);\r\n            ElMessage.error('保存图片失败');\r\n        }\r\n    }\r\n    \r\n};\r\n\r\n// 获取用户信息\r\nconst fetchUserInformation = async (userId) => {\r\n    try {\r\n        const response = await axios.get(`/users/${userId}`);\r\n        if(response.data.code === 1){\r\n            return (response.data.data.verified);\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            ElMessage.error('获取用户信息失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取用户信息失败\", error);\r\n        ElMessage.error('获取用户信息失败');\r\n    }\r\n};\r\n\r\n\r\nonMounted(() => {\r\n    getAnswererInfo();\r\n    getMessageLog();\r\n    initWebSocket();\r\n});\r\n\r\nonUnmounted(() => {\r\n    if (websock.value) {\r\n        websock.value.close();\r\n    }\r\n});\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.bgc_box{\r\n    width: 100%;\r\n}\r\n.top{\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding-bottom: 4px;\r\n    gap: 8px;\r\n}\r\n.one{\r\n    display: flex;\r\n}\r\n.text1{\r\n    color: #3F87E1;\r\n    margin: 0px 10px;\r\n    position: relative;\r\n}\r\n.top span{\r\n    font-size: 20px;\r\n}\r\n.timer{\r\n    color: #BCBCBC;\r\n    text-align: center;\r\n    line-height: 1.6; \r\n}\r\n.btn{\r\n    width: 32px;\r\n    height: 19px;\r\n    padding: 8px 20px;\r\n    border-radius: 16px;\r\n    background: #9FA9CA;\r\n    color: #fff;\r\n    position: absolute;\r\n    right: 135px;\r\n    top: 15px;\r\n    cursor: pointer;\r\n}\r\n.main_box{\r\n    width: 950px;\r\n    height: 73vh;\r\n    overflow: auto;\r\n    padding: 20px 12px;\r\n    border-radius: 12px;\r\n    border: 1px solid #EEE;\r\n    background: #FAFAFA;\r\n    margin: 0px auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.time{\r\n    color: #626B89;\r\n    text-align: center;\r\n    font-size: 12px;\r\n    line-height: 1.6; \r\n}\r\n.left_box,\r\n.right_box{\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 10px; \r\n}\r\n.left_box {\r\n    justify-content: flex-start; \r\n}\r\n\r\n.right_box {\r\n    justify-content: flex-end; \r\n}\r\n.leftchat,\r\n.rightchat{\r\n    display: flex;\r\n    align-items: flex-start;\r\n}\r\n.leftchat img{\r\n    margin-right: 10px; \r\n}\r\n.rightchat img {\r\n    margin-left: 10px;\r\n}\r\n.userpic{\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n}\r\nimg.sendpic {\r\n    width: 13rem;\r\n    border-radius: 1.2rem;\r\n}\r\n.conversation_L,\r\n.conversation_R{\r\n    max-width: 530px;\r\n    padding: 12px;\r\n    margin-top: 16px;\r\n    line-height: 1.6;\r\n}\r\n.conversation_L{\r\n    background: #FFF;\r\n    border-radius: 0px 16px 16px 16px;\r\n}\r\n.conversation_R{\r\n    background: #EEF1FF;\r\n    border-radius: 16px 0px 16px 16px;\r\n}\r\n.send-state{\r\n    width: 20px;\r\n    height: 20px;\r\n    background-color: #FAFAFA;\r\n    margin: 16px 8px 0px 0px;\r\n}\r\n::v-deep .el-loading-mask{\r\n    background-color: #FAFAFA;\r\n}\r\n::v-deep .el-loading-spinner{\r\n    position: initial;\r\n    margin-top: 0px;\r\n}\r\n::v-deep .el-loading-spinner .circular{\r\n    width: 20px;\r\n    height: 20px;\r\n}\r\n::v-deep .el-loading-spinner .path{\r\n    stroke: #566183;\r\n}\r\n::v-deep .el-result{\r\n    padding: 0px;\r\n    --el-result-icon-font-size:20px;\r\n}\r\n.bottom{\r\n    display: flex;\r\n    width: 1000px;\r\n    padding: 8px 12px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 20px;\r\n    margin: 0px auto;\r\n}\r\n/* .bottom input{\r\n    width: calc(100% - 16px);\r\n    height: 19px;\r\n    padding: 8px;\r\n    border-radius: 4px;\r\n    background: #F8F8F8;\r\n    border: 1px solid #F8F8F8;\r\n} */\r\n.inputbox{\r\n    width: 83%;\r\n}\r\ninput:focus{\r\n    outline: none;\r\n    box-shadow: 0 1px 7px #dbdae5;\r\n    border: 1px solid #d7d7d7;\r\n}\r\n.send_btn{\r\n    width: 46px;\r\n    height: 16px;\r\n    padding: 8px 14px;\r\n    border-radius: 16px;\r\n    background: #9FA9CA;\r\n    font-size: 14px;\r\n    color: #fff;\r\n    text-align: center;\r\n    line-height: 14px;\r\n    cursor: pointer;\r\n}\r\n.disabled {\r\n  pointer-events: none; /* 禁止鼠标事件 */\r\n  color: grey; /* 可以更改为你想要的“不可点击”的样式 */\r\n  cursor: not-allowed; /* 更改鼠标光标样式 */\r\n}\r\n@media (max-width:768px) {\r\n    .bgc_box{\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        height: 100vh;\r\n    }\r\n    .top{\r\n        margin-top: 2vh\r\n    }\r\n    .main_box{\r\n        width: 96%;\r\n        height: 78vh;\r\n        padding: 0px;\r\n    }\r\n    .bottom{\r\n        width: 96%;\r\n        padding: 0px;\r\n        justify-content: space-between;\r\n        gap: 0px;\r\n        margin: 0 auto 2vh;\r\n    }\r\n    .bottom img{\r\n        width: 1.4rem;\r\n        height: 1.4rem;\r\n    }\r\n    .inputbox{\r\n        width: 75%;\r\n    }\r\n    .btn{\r\n        right: 30px;\r\n    }\r\n    .send_btn{\r\n        width: auto;\r\n        padding: 2% 3%;\r\n    }\r\n    .text{\r\n        font-size: 1rem;\r\n    }\r\n    .timer{\r\n        font-size: 0.9rem;\r\n    }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}