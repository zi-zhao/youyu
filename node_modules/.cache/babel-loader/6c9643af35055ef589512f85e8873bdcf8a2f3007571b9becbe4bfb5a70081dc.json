{"ast":null,"code":"import { ref, onMounted, watch } from 'vue';\nimport { fetchShareCoverage } from '@/utils/fileService';\nimport axios from '@/utils/request';\nimport { convertDateFormat } from '@/utils/timeFormat';\nimport { ElMessageBox, ElMessage } from 'element-plus';\nimport ShareDialog from '../../../ShareShow/components/ShareDialog.vue';\nexport default {\n  __name: 'ShareManagement',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const currentPageShare = ref(1);\n    const userId = localStorage.getItem(\"userId\"); // 获取用户ID\n    const filter = ref('all');\n    const type = ref(0);\n    const selectedColumnCategory = ref();\n    const keyword = ref();\n    const columnGroup = ref([]);\n    const shareGroup = ref([]); //获取分享列表\n    const newColumnArray = ref([]); //存放用户的分享专栏数据\n    const dialogShowVisible = ref(false); //控制分享展示弹框是否展示\n    const shareId = ref(null);\n\n    //点击打开分享展示弹框\n    const openShareDialog = id => {\n      shareId.value = id;\n      dialogShowVisible.value = true;\n    };\n\n    //点击删除的弹框\n    const deleteShare = async shareItem => {\n      try {\n        await ElMessageBox.confirm('确定要删除该条分享吗？', {\n          confirmButtonText: '确认删除',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        handleDelete(shareItem);\n      } catch {\n        console.log('关闭弹框');\n      }\n    };\n\n    //点击范围分类\n    function handleTapageClick(tabName) {\n      if (tabName === 'all') {\n        type.value = 0;\n      } else if (tabName === 'mesee') {\n        type.value = 1;\n      } else if (tabName === 'recycleBin') {\n        type.value = 4;\n      }\n      console.log(tabName);\n    }\n\n    // 使用watch来监听type的变化\n    watch(type, (newValue, oldValue) => {\n      currentPageShare.value = 1;\n      keyword.value = '';\n      getShareList(keyword.value, currentPageShare.value, newValue);\n    });\n\n    // //点击专栏分类\n    // function handleColumnCategoryChange() {\n    //     selectedColumnCategory.value = getIdFromColumnName( selectedColumnCategory.value);\n    //     currentPageShare.value = 1;\n    //     keyword.value ='';\n    //     getShareList(selectedColumnCategory.value, keyword.value,currentPageShare.value,type.value);\n    // }\n\n    //点击搜索框\n    function handleSearch() {\n      currentPageShare.value = 1;\n      getShareList(keyword.value, currentPageShare.value, type.value);\n    }\n\n    // //根据专栏名获取专栏ID\n    // function getIdFromColumnName(columnName) {\n    //     const matchedItem = newColumnArray.value.find(item => item.name === columnName);\n    //     return matchedItem ? matchedItem.id : null;  \n    // }\n\n    // //根据专栏id获取专栏名\n    // function getNameFromColumnId(columnId) {\n    //     const matchedItem = newColumnArray.value.find(item => item.id === columnId);\n    //     return matchedItem ? matchedItem.name : null;  \n    // }\n\n    //根据分享分页数据判断分享状态\n    function juageShareStatus(status) {\n      if (status === 0) return '草稿';\n      if (status === 1) return '审核中';\n      if (status === 2) return '已发表';\n      if (status === -1) return '审核未通过';\n    }\n\n    //根据分享分页数据判断分享可见范围\n    function juageShareAccess(access) {\n      if (access === 0) return '全部可见';\n      if (access === 1) return '仅我可见';\n    }\n\n    //因为要获取多种分享数据列表，所以封装一下获取到分享分类数据后的处理函数\n    async function processShareGroup(records) {\n      const updates = records.map(async record => {\n        const showDeletebtn = false;\n        const newCoverPicture = await fetchShareCoverage(record.id);\n        const postTime = convertDateFormat(record.postTime);\n        let tags = {};\n        tags.articleStatus = juageShareStatus(record.status);\n        // tags.column = getNameFromColumnId(record.columnId);\n        tags.access = juageShareAccess(record.access);\n        return {\n          ...record,\n          showDeletebtn,\n          newCoverPicture,\n          postTime,\n          tags\n        };\n      });\n      // 等待所有的并行操作完成\n      return Promise.all(updates);\n    }\n\n    // 添加一个锁状态\n    let isLoading = false;\n    async function load() {\n      if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\n      isLoading = true; // 开始加载数据，设置锁状态为true\n      try {\n        if (currentPageShare.value === 1) {\n          currentPageShare.value++;\n        }\n        await getShareList(keyword.value, currentPageShare.value, type.value);\n        currentPageShare.value++; // 只有在请求成功完成后才递增页\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('滚动时的未知错误');\n      } finally {\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\n      }\n    }\n\n    //删除分享接口\n    async function handleDelete(shareItem) {\n      try {\n        const response = await axios.delete(`/share/${shareItem.id}`);\n        if (response.data.code === 1) {\n          shareItem.showDeletebtn = false;\n          ElMessage.success('删除分享成功！');\n          currentPageShare.value = 1;\n          getShareList(keyword.value, currentPageShare.value, type.value);\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error('删除分享失败', response.data.msg);\n          ElMessage.error('删除分享失败');\n        }\n      } catch (error) {\n        console.error(\"删除分享失败\", error);\n        ElMessage.error('删除分享失败');\n      }\n    }\n\n    //获取分享分页数据\n    async function getShareList(textValue, currentPage, type) {\n      try {\n        if (currentPage === 1) {\n          shareGroup.value = [];\n        }\n        let params = {\n          currentPage: currentPage,\n          type: type\n        };\n        // if (selectedColumnId) params.columnId = selectedColumnId;\n        if (textValue) params.title = textValue;\n        const response = await axios.get('/users/share/list', {\n          params: params\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          const shareGroupNew = response.data.data.records;\n          const processedArticleGroup = await processShareGroup(shareGroupNew);\n          shareGroup.value = [...shareGroup.value, ...processedArticleGroup];\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取分享数据失败\");\n          ElMessage.error(\"获取分享数据失败\");\n        }\n      } catch (error) {\n        console.error(\"请求分享接口失败\", error);\n        ElMessage.error(\"请求分享接口失败\");\n      }\n    }\n\n    // //获取分享专栏列表\n    // async function getColumnShareList() {\n    //   try {\n    //     const response = await axios.get('/column',{\n    //       params: {\n    //           type:1,\n    //           page:1,\n    //           pageSize:1000,\n    //           userId:userId,\n    //         }\n    //     });\n    //     if (response.data.code === 1 ) {\n    //         columnGroup.value = response.data.data.records;\n    //         console.log(response.data); \n    //     }else if(response.data.code === 0 && response.data.msg){\n    //         ElMessage.error(response.data.msg.toString());\n    //     }else{\n    //         console.error(\"获取分享专栏数据失败\");\n    //         ElMessage.error(\"获取分享专栏数据失败\");\n    //     }\n    //   } catch (error) {\n    //     console.error(\"请求分享专栏接口失败\", error); \n    //     ElMessage.error(\"请求分享专栏接口失败\");\n    //   }\n    // }\n\n    //一定要先等待获取专栏的接口完成，不然在获取分享分页数据时无法确定每篇分享的专栏名称\n    onMounted(async () => {\n      // getColumnShareList();  \n      getShareList(keyword.value, currentPageShare.value, type.value);\n    });\n    const __returned__ = {\n      currentPageShare,\n      userId,\n      filter,\n      type,\n      selectedColumnCategory,\n      keyword,\n      columnGroup,\n      shareGroup,\n      newColumnArray,\n      dialogShowVisible,\n      shareId,\n      openShareDialog,\n      deleteShare,\n      handleTapageClick,\n      handleSearch,\n      juageShareStatus,\n      juageShareAccess,\n      processShareGroup,\n      get isLoading() {\n        return isLoading;\n      },\n      set isLoading(v) {\n        isLoading = v;\n      },\n      load,\n      handleDelete,\n      getShareList,\n      ref,\n      onMounted,\n      watch,\n      get fetchShareCoverage() {\n        return fetchShareCoverage;\n      },\n      get axios() {\n        return axios;\n      },\n      get convertDateFormat() {\n        return convertDateFormat;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      ShareDialog\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","fetchShareCoverage","axios","convertDateFormat","ElMessageBox","ElMessage","ShareDialog","currentPageShare","userId","localStorage","getItem","filter","type","selectedColumnCategory","keyword","columnGroup","shareGroup","newColumnArray","dialogShowVisible","shareId","openShareDialog","id","value","deleteShare","shareItem","confirm","confirmButtonText","cancelButtonText","handleDelete","console","log","handleTapageClick","tabName","newValue","oldValue","getShareList","handleSearch","juageShareStatus","status","juageShareAccess","access","processShareGroup","records","updates","map","record","showDeletebtn","newCoverPicture","postTime","tags","articleStatus","Promise","all","isLoading","load","error","response","delete","data","code","success","msg","toString","textValue","currentPage","params","title","get","length","shareGroupNew","processedArticleGroup"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/CreateCenter/components/WorkManagement/ShareManagement.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div >\r\n            <el-tabs v-model=\"filter\" @tab-change=\"handleTapageClick\">\r\n                    <el-tab-pane label=\"全部\" name=\"all\"></el-tab-pane>\r\n                    <el-tab-pane label=\"仅我可见\" name=\"mesee\"></el-tab-pane>\r\n                    <!-- <el-tab-pane label=\"审核中\"></el-tab-pane>\r\n                    <el-tab-pane label=\"草稿箱\"></el-tab-pane> -->\r\n                    <el-tab-pane label=\"回收站\" name=\"recycleBin\"></el-tab-pane>\r\n            </el-tabs>\r\n            <div class=\"search\">\r\n                <!-- <el-select v-model=\"selectedColumnCategory\" placeholder=\"专栏分类\" @change=\"handleColumnCategoryChange\">\r\n                    <el-option-group>\r\n                        <el-option :value=\"option.name\" v-for=\"option in columnGroup\" :key=\"option.id\"></el-option>\r\n                    </el-option-group>\r\n                </el-select>  -->\r\n                <div style=\"display: flex; align-items: center; width: 300px; height: 35px; border: 1px solid #ccc; border-radius: 4px;\">\r\n                    <input type=\"text\" style=\"flex: 1; padding: 6px 10px; border: none; outline: none; font-size: 14px;\"\r\n                        placeholder=\"请输入关键字\" v-model=\"keyword\">\r\n                    <div style=\"padding: 0 10px;\" class=\"search-box\" @click=\"handleSearch\">\r\n                        <el-icon>\r\n                            <Search />\r\n                        </el-icon>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        \r\n            <div class=\"content-container\" v-infinite-scroll=\"load\" infinite-scroll-distance=\"100\" infinite-scroll-immediate=\"false\">\r\n                <!-- 分享管理内容 -->\r\n                <div class=\"content-box\" v-for=\"shareItem in shareGroup\" :key=\"shareItem.id\">\r\n                    <div  v-for= \"(image, imgIndex) in shareItem.newCoverPicture.slice(0, 1)\"  :key=\"imgIndex\">\r\n                        <img :src='image' alt=\"Share Image\" class=\"image\">\r\n                    </div>\r\n                    <div class=\"title\">\r\n                        <div class=\"head\">{{ shareItem.title }}</div>\r\n                        <div class=\"tags\" style=\"display: flex; gap: 8px;\">\r\n                            <el-tag v-for=\"tag in shareItem.tags\" :key=\"tag\" size=\"mini\">{{ tag }}</el-tag>\r\n                        </div>\r\n                        <div class=\"foot\">\r\n                            <div class=\"icon\">\r\n                                <div class=\"icon-box\">\r\n                                    <img src=\"@/assets/LikeBefore.svg\" alt=\"\">\r\n                                    <span class=\"icon-text\">{{ shareItem.likeCount }}</span>\r\n                                </div>\r\n                                <div class=\"icon-box\">\r\n                                    <img src=\"@/assets/Comment.svg\" alt=\"\">\r\n                                    <span class=\"icon-text\">{{ shareItem.commentCount }}</span>\r\n                                </div>\r\n                                <div class=\"icon-box\">\r\n                                    <img src=\"@/assets/FavoriteBefore.svg\" alt=\"\">\r\n                                    <span class=\"icon-text\">{{ shareItem.favoriteCount }}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"time\">\r\n                        <div class=\"detailed-time\">{{ shareItem.time }}</div>\r\n                        <div class=\"btn\">\r\n                            <!-- <el-button>\r\n                                <el-icon><Tickets /></el-icon>数据\r\n                            </el-button> -->\r\n                            <el-button @click=\"openShareDialog(shareItem.id)\">\r\n                                查看\r\n                            </el-button>\r\n                            <el-button @click=\"shareItem.showDeletebtn=true\">\r\n                                <el-icon><MoreFilled /></el-icon>\r\n                            </el-button>\r\n                            <div v-show=\"shareItem.showDeletebtn\" @click=\"deleteShare(shareItem)\" @mouseleave=\"showDeletebtn=false\" class=\"delete-btn\">删除</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <el-empty \r\n                    v-if=\"shareGroup.length === 0 || !shareGroup\" \r\n                    :image-size=\"200\" \r\n                    description=\"您还没有分享呢，快去创作吧！\"\r\n                />\r\n            </div>\r\n        </div>\r\n        <div v-if=\"dialogShowVisible\">\r\n            <ShareDialog v-model=\"dialogShowVisible\" :Id = shareId></ShareDialog>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref,onMounted,watch} from 'vue';\r\nimport { fetchShareCoverage } from '@/utils/fileService'; \r\nimport axios from '@/utils/request';\r\nimport { convertDateFormat } from '@/utils/timeFormat'; \r\nimport { ElMessageBox , ElMessage } from 'element-plus';\r\nimport ShareDialog from '../../../ShareShow/components/ShareDialog.vue'\r\n\r\nconst currentPageShare = ref(1);\r\nconst userId = localStorage.getItem(\"userId\"); // 获取用户ID\r\nconst filter = ref('all');\r\nconst type = ref(0);\r\nconst selectedColumnCategory = ref();\r\nconst keyword = ref();\r\nconst columnGroup = ref([]);\r\nconst shareGroup = ref([]);//获取分享列表\r\nconst newColumnArray = ref([]);//存放用户的分享专栏数据\r\nconst dialogShowVisible = ref(false)//控制分享展示弹框是否展示\r\nconst shareId = ref(null); \r\n\r\n//点击打开分享展示弹框\r\nconst openShareDialog = (id) =>{\r\n    shareId.value = id;\r\n    dialogShowVisible.value = true\r\n}\r\n\r\n//点击删除的弹框\r\nconst deleteShare = async (shareItem) => {\r\n  try {\r\n    await ElMessageBox.confirm(\r\n      '确定要删除该条分享吗？',\r\n      {\r\n        confirmButtonText: '确认删除',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }\r\n    );\r\n    handleDelete(shareItem);\r\n  } catch {\r\n    console.log('关闭弹框')\r\n  }\r\n}\r\n\r\n//点击范围分类\r\nfunction handleTapageClick(tabName){\r\n    if(tabName === 'all' ){\r\n        type.value = 0;\r\n    }else if (tabName === 'mesee'){\r\n        type.value = 1;\r\n    }\r\n    else if (tabName === 'recycleBin'){\r\n        type.value = 4;\r\n    }\r\n    console.log(tabName);\r\n}\r\n\r\n// 使用watch来监听type的变化\r\nwatch(type, (newValue, oldValue) => {\r\n    currentPageShare.value = 1;\r\n    keyword.value ='';\r\n    getShareList(keyword.value, currentPageShare.value,newValue);\r\n});\r\n\r\n// //点击专栏分类\r\n// function handleColumnCategoryChange() {\r\n//     selectedColumnCategory.value = getIdFromColumnName( selectedColumnCategory.value);\r\n//     currentPageShare.value = 1;\r\n//     keyword.value ='';\r\n//     getShareList(selectedColumnCategory.value, keyword.value,currentPageShare.value,type.value);\r\n// }\r\n\r\n//点击搜索框\r\nfunction handleSearch() {\r\n    currentPageShare.value = 1;\r\n    getShareList(keyword.value,currentPageShare.value,type.value);\r\n}\r\n\r\n// //根据专栏名获取专栏ID\r\n// function getIdFromColumnName(columnName) {\r\n//     const matchedItem = newColumnArray.value.find(item => item.name === columnName);\r\n//     return matchedItem ? matchedItem.id : null;  \r\n// }\r\n\r\n// //根据专栏id获取专栏名\r\n// function getNameFromColumnId(columnId) {\r\n//     const matchedItem = newColumnArray.value.find(item => item.id === columnId);\r\n//     return matchedItem ? matchedItem.name : null;  \r\n// }\r\n\r\n//根据分享分页数据判断分享状态\r\nfunction juageShareStatus(status) {\r\n    if(status === 0) return '草稿'\r\n    if(status === 1) return '审核中'\r\n    if(status === 2) return '已发表'\r\n    if(status === -1) return '审核未通过'\r\n}\r\n\r\n//根据分享分页数据判断分享可见范围\r\nfunction juageShareAccess(access) {\r\n    if(access === 0) return '全部可见'\r\n    if(access === 1) return '仅我可见'\r\n}\r\n\r\n//因为要获取多种分享数据列表，所以封装一下获取到分享分类数据后的处理函数\r\nasync function processShareGroup(records) {\r\n    const updates = records.map(async (record) => {\r\n        const showDeletebtn = false;\r\n        const newCoverPicture = await fetchShareCoverage(record.id);\r\n        const postTime = convertDateFormat(record.postTime);\r\n        let tags = {}; \r\n        tags.articleStatus = juageShareStatus(record.status);\r\n        // tags.column = getNameFromColumnId(record.columnId);\r\n        tags.access = juageShareAccess(record.access);\r\n        return {\r\n            ...record, \r\n            showDeletebtn,\r\n            newCoverPicture, \r\n            postTime, \r\n            tags\r\n        };\r\n    });\r\n    // 等待所有的并行操作完成\r\n    return Promise.all(updates);\r\n}\r\n\r\n// 添加一个锁状态\r\nlet isLoading = false;\r\nasync function load() {\r\n    if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\r\n    isLoading = true; // 开始加载数据，设置锁状态为true\r\n    try {\r\n        if(currentPageShare.value === 1){\r\n            currentPageShare.value++;\r\n        }\r\n        await getShareList(keyword.value,currentPageShare.value,type.value);\r\n        currentPageShare.value++; // 只有在请求成功完成后才递增页\r\n    } catch (error) {\r\n        console.error(error);\r\n        ElMessage.error('滚动时的未知错误');\r\n    } finally {\r\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\r\n    }\r\n}\r\n\r\n//删除分享接口\r\nasync function handleDelete(shareItem) {\r\n    try {\r\n        const response = await axios.delete(`/share/${shareItem.id}`);\r\n        if (response.data.code === 1) {\r\n            shareItem.showDeletebtn = false;\r\n            ElMessage.success('删除分享成功！');\r\n            currentPageShare.value = 1;\r\n            getShareList(keyword.value,currentPageShare.value,type.value);\r\n        } else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else {\r\n            console.error('删除分享失败', response.data.msg);\r\n            ElMessage.error('删除分享失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"删除分享失败\", error); \r\n        ElMessage.error('删除分享失败');\r\n    }\r\n}\r\n\r\n//获取分享分页数据\r\nasync function getShareList(textValue,currentPage,type) {\r\n  try {\r\n    if(currentPage === 1){\r\n        shareGroup.value =[];\r\n    }\r\n    let params = {\r\n        currentPage:currentPage,\r\n        type:type,\r\n    };\r\n    // if (selectedColumnId) params.columnId = selectedColumnId;\r\n    if (textValue) params.title = textValue;\r\n    const response = await axios.get('/users/share/list',{ params: params });\r\n    if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n        const shareGroupNew = response.data.data.records;\r\n        const processedArticleGroup = await processShareGroup(shareGroupNew);\r\n        shareGroup.value = [...shareGroup.value, ...processedArticleGroup];\r\n    }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n        // ElMessage.info('已加载所有数据');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取分享数据失败\");\r\n        ElMessage.error(\"获取分享数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求分享接口失败\", error); \r\n    ElMessage.error(\"请求分享接口失败\");\r\n    \r\n  }\r\n}\r\n\r\n// //获取分享专栏列表\r\n// async function getColumnShareList() {\r\n//   try {\r\n//     const response = await axios.get('/column',{\r\n//       params: {\r\n//           type:1,\r\n//           page:1,\r\n//           pageSize:1000,\r\n//           userId:userId,\r\n//         }\r\n//     });\r\n//     if (response.data.code === 1 ) {\r\n//         columnGroup.value = response.data.data.records;\r\n//         console.log(response.data); \r\n//     }else if(response.data.code === 0 && response.data.msg){\r\n//         ElMessage.error(response.data.msg.toString());\r\n//     }else{\r\n//         console.error(\"获取分享专栏数据失败\");\r\n//         ElMessage.error(\"获取分享专栏数据失败\");\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"请求分享专栏接口失败\", error); \r\n//     ElMessage.error(\"请求分享专栏接口失败\");\r\n//   }\r\n// }\r\n\r\n//一定要先等待获取专栏的接口完成，不然在获取分享分页数据时无法确定每篇分享的专栏名称\r\nonMounted(async () => {\r\n    // getColumnShareList();  \r\n    getShareList( keyword.value,currentPageShare.value,type.value);\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.icon-text{\r\n    color:#2d2d2d;\r\n}\r\n.search {\r\n    display: flex;\r\n    gap: 2rem;\r\n}\r\n\r\n.search-box {\r\n    cursor: pointer;\r\n}\r\n.content-box {\r\n    display: flex;\r\n    width: 100%;\r\n    border-radius: 4px;\r\n    padding: 1rem 1rem;\r\n    border-bottom: 1px solid #ccc;\r\n}\r\n.image {\r\n    width: 142px;\r\n    height: 100px;\r\n    border-radius: 8px;\r\n}\r\n.title {\r\n    padding-left: 1rem;\r\n    flex: 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n}\r\n.icon {\r\n    width: 35%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    color: #888;\r\n    gap: 8px;\r\n}\r\n.icon-box {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 3px;\r\n}\r\n.icon-box span{\r\n    font-size: 14px;\r\n}\r\n.detailed-time {\r\n    font-size: 14px;\r\n}\r\n.time {\r\n    flex: 10%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    padding-right: 1rem;\r\n    color: #888;\r\n    gap: 1rem;\r\n}\r\n.btn {\r\n    color: black;\r\n    position: relative;\r\n}\r\n.delete-btn{\r\n    position: absolute;\r\n    top: 35px ;\r\n    right: 0px;\r\n    width: 50px;\r\n    height: 26px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 5px; \r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n    cursor: pointer;\r\n    font-size: 14px;\r\n    color: #5d5d5d;\r\n}\r\n.underline {\r\n  border: none;\r\n  border-top: 1px solid #ccc;\r\n}\r\n\r\n/* 去除el-tabs底部灰色横线 */\r\n::v-deep .el-tabs__nav-wrap::after {\r\n    height: 0px;\r\n}\r\n.el-select-dropdown{\r\n    overflow-y: auto;\r\n    height: 180px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}