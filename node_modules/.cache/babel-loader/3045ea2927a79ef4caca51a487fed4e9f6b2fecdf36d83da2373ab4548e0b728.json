{"ast":null,"code":"import axios from '@/utils/request.js';\nimport { ref, onMounted, computed, watch } from 'vue';\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\nimport { getArticleCoverageFromCOS } from '@/utils/cosService';\nimport { fetchShareCoverage } from '@/utils/fileService';\nimport { ElMessage } from 'element-plus';\nimport { convertDateFormat } from '@/utils/timeFormat';\nimport ShareDialog from '@/page/ShareShow/components/ShareDialog.vue';\nimport { useRouter } from 'vue-router';\nimport { openUrl } from '@/utils/routeJudge';\nexport default {\n  __name: 'MyFocus',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const currentLoadFunction = ref(1); //判定该调用getall函数还是getoneperson函数  \n    const currentPageOnePerson = ref(1);\n    const currentPageAllPerson = ref(1);\n    const checked1 = ref(true);\n    const checked2 = ref(true);\n    const focusMeNotification = ref([]); //存放用户关注列表中用户的动态\n    const focusMeUser = ref([]); //存放用户关注列表的数据\n    const userId = localStorage.getItem(\"userId\"); // 获取用户ID\n    const focusId = ref(null); //用户点击的用户Id\n    const dialogShowVisible = ref(false); //控制分享展示弹框是否展示\n    const shareId = ref(null);\n    const type = computed(() => {\n      if (checked1.value && checked2.value) return 2;\n      if (checked1.value) return 0;\n      if (checked2.value) return 1;\n      return 2;\n    });\n    watch(type, (newValue, oldValue) => {\n      console.log(`Type from ${oldValue} to ${newValue}`);\n      focusMeNotification.value = [];\n      currentPageAllPerson.value = 1;\n      currentPageOnePerson.value = 1;\n      if (currentLoadFunction.value === 1) {\n        getAll(currentPageAllPerson.value);\n      } else if (currentLoadFunction.value === 2) {\n        getOnePerson(currentPageOnePerson.value);\n      }\n    });\n\n    // 点击进入文章展示或分享弹框\n    const goToDetail = item => {\n      if (item.type === 0) {\n        // const routeLocation = router.resolve({ path: `/TheArticle/${item.id}`});\n        // window.open(routeLocation.href, '_blank');\n        openUrl(`/TheArticle/${item.id}`);\n      } else if (item.type === 1) {\n        //点击打开分享展示弹框\n        shareId.value = item.id;\n        dialogShowVisible.value = true;\n      }\n    };\n\n    // 添加一个锁状态\n    let isLoading = false;\n    async function load() {\n      if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\n      isLoading = true; // 开始加载数据，设置锁状态为true\n      try {\n        if (currentLoadFunction.value === 1) {\n          if (currentPageAllPerson.value === 1) {\n            currentPageAllPerson.value++;\n          }\n          await getAll(currentPageAllPerson.value);\n          currentPageAllPerson.value++; // 只有在请求成功完成后才递增页码\n        } else if (currentLoadFunction.value === 2) {\n          if (currentPageAllPerson.value === 1) {\n            currentPageAllPerson.value++;\n          }\n          await getOnePerson(currentPageAllPerson.value);\n          currentPageOnePerson.value++; // 只有在请求成功完成后才递增页码\n        }\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('滚动时的未知错误');\n      } finally {\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\n      }\n    }\n    const clickToGetOnePerson = focusId1 => {\n      focusId.value = focusId1;\n      focusMeNotification.value = [];\n      currentPageAllPerson.value = 1;\n      currentPageOnePerson.value = 1;\n      currentLoadFunction.value = 2;\n      getOnePerson(currentPageOnePerson.value, focusId.value);\n    };\n    const getAllFocus = async () => {\n      try {\n        //    const response = await axios.get('/users/subscribe?apifoxApiId=105505953');\n        const response = await axios.get('/users/subscribe', {\n          params: {\n            id: userId,\n            page: 1,\n            pazeSize: 1000\n          }\n        });\n        if (response.data.code === 1) {\n          focusMeUser.value = response.data.data.records;\n          for (let record of focusMeUser.value) {\n            record.newAvatar = await getUsersAvatarFromCOS(record.starId);\n          }\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else error => {\n          console.log(error);\n          ElMessage.error('获取用户的关注列表失败');\n        };\n      } catch (error) {\n        console.log(error);\n        ElMessage.error('获取用户的关注列表失败');\n        return []; // 返回空数组\n      }\n    };\n\n    // 获取某个用户动态消息\n    const getOnePerson = async (currentPage, userId) => {\n      currentLoadFunction.value = 2;\n      if (currentPageAllPerson.value === 1) {\n        focusMeNotification.value = [];\n      }\n      try {\n        const params = {\n          page: currentPage,\n          pageSize: 5,\n          userId: userId\n        };\n        if (type.value) {\n          params.type = type.value;\n        }\n        const response = await axios.get('/users/works', {\n          params\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          let newRecords = response.data.data.records;\n          let updatePromises = newRecords.map(async record => {\n            record.createTime = convertDateFormat(record.createTime);\n            const avatarPromise = getUsersAvatarFromCOS(record.userId);\n            const coverPromise = record.type === 0 ? getArticleCoverageFromCOS(record.id) : fetchShareCoverage(record.id);\n            const [newAvatar, newCoverPicture] = await Promise.all([avatarPromise, coverPromise]);\n            return {\n              ...record,\n              newAvatar,\n              newCoverPicture\n            };\n          });\n          newRecords = await Promise.all(updatePromises);\n          focusMeNotification.value.push(...newRecords);\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        }\n      } catch (error) {\n        console.log(error);\n        ElMessage.error('获取用户动态失败');\n      }\n    };\n\n    // 获取所有关注用户动态消息\n    const getAll = async currentPage => {\n      currentLoadFunction.value = 1;\n      if (currentPage === 1) {\n        focusMeNotification.value = [];\n      }\n      try {\n        const params = {\n          currentPage: currentPage,\n          pageSize: 5\n        };\n        if (type.value) {\n          params.type = type.value;\n        }\n        const response = await axios.get('/users/subscribe/works', {\n          params\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          const updates = response.data.data.records.map(async record => {\n            const createTime = convertDateFormat(record.createTime);\n            const avatarPromise = getUsersAvatarFromCOS(record.userId);\n            const verified = await fetchUserInformation(record.userId);\n            const coverPromise = record.type === 0 ? getArticleCoverageFromCOS(record.id) : fetchShareCoverage(record.id);\n            const [newAvatar, newCoverPicture] = await Promise.all([avatarPromise, coverPromise]);\n            return {\n              ...record,\n              newAvatar,\n              newCoverPicture,\n              verified,\n              createTime\n            };\n          });\n          const updatedRecords = await Promise.all(updates);\n          focusMeNotification.value = [...focusMeNotification.value, ...updatedRecords];\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        }\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('获取关注用户的动态失败');\n      }\n    };\n\n    // 获取用户信息\n    const fetchUserInformation = async userId => {\n      try {\n        const response = await axios.get(`/users/${userId}`);\n        if (response.data.code === 1) {\n          return response.data.data.verified;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('获取用户信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户信息失败\", error);\n        ElMessage.error('获取用户信息失败');\n      }\n    };\n    onMounted(() => {\n      getAllFocus();\n      getAll(currentPageAllPerson.value);\n      listWidth.value = focusMeUser.value.length * 68;\n    });\n\n    // 左滑与右滑功能\n    const data = ref(0); // 这是滚动位置变量\n    const listWidth = ref(0); // 滚动内容的总宽度\n    // function moveLeft(){\n    //     data.value = (data.value - 68 + listWidth.value) % listWidth.value;\n    // }\n    // function moveRight(){\n    //     data.value = (data.value + 68) % listWidth.value;\n    // }\n\n    const __returned__ = {\n      router,\n      currentLoadFunction,\n      currentPageOnePerson,\n      currentPageAllPerson,\n      checked1,\n      checked2,\n      focusMeNotification,\n      focusMeUser,\n      userId,\n      focusId,\n      dialogShowVisible,\n      shareId,\n      type,\n      goToDetail,\n      get isLoading() {\n        return isLoading;\n      },\n      set isLoading(v) {\n        isLoading = v;\n      },\n      load,\n      clickToGetOnePerson,\n      getAllFocus,\n      getOnePerson,\n      getAll,\n      fetchUserInformation,\n      data,\n      listWidth,\n      get axios() {\n        return axios;\n      },\n      ref,\n      onMounted,\n      computed,\n      watch,\n      get getUsersAvatarFromCOS() {\n        return getUsersAvatarFromCOS;\n      },\n      get getArticleCoverageFromCOS() {\n        return getArticleCoverageFromCOS;\n      },\n      get fetchShareCoverage() {\n        return fetchShareCoverage;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get convertDateFormat() {\n        return convertDateFormat;\n      },\n      ShareDialog,\n      get useRouter() {\n        return useRouter;\n      },\n      get openUrl() {\n        return openUrl;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["axios","ref","onMounted","computed","watch","getUsersAvatarFromCOS","getArticleCoverageFromCOS","fetchShareCoverage","ElMessage","convertDateFormat","ShareDialog","useRouter","openUrl","router","currentLoadFunction","currentPageOnePerson","currentPageAllPerson","checked1","checked2","focusMeNotification","focusMeUser","userId","localStorage","getItem","focusId","dialogShowVisible","shareId","type","value","newValue","oldValue","console","log","getAll","getOnePerson","goToDetail","item","id","isLoading","load","error","clickToGetOnePerson","focusId1","getAllFocus","response","get","params","page","pazeSize","data","code","records","record","newAvatar","starId","msg","toString","currentPage","pageSize","length","newRecords","updatePromises","map","createTime","avatarPromise","coverPromise","newCoverPicture","Promise","all","push","info","updates","verified","fetchUserInformation","updatedRecords","listWidth"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/MessageCenter/component/MyFocus/MyFocus.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"first\">\r\n            <div class=\"one\">\r\n                <img src=\"@/assets/MessageCenter/MyFocus.svg\" alt=\"\">\r\n                <span>关注列表</span>\r\n            </div>\r\n            <div>\r\n                <el-checkbox v-model=\"checked1\" label=\"发表文章\" size=\"large\" @change=\"change\"/>\r\n                <el-checkbox v-model=\"checked2\" label=\"发表分享\" size=\"large\" @change=\"change\"/>\r\n            </div>\r\n            <div class=\"container\">\r\n                <!-- <div class=\"arrow-left\" @click=\"moveLeft\">\r\n                    <img src=\"@/assets/MessageCenter/left.svg\" alt=\"\">\r\n                </div> -->\r\n                <div style=\"display: flex;flex-direction: column;align-items: center;margin-bottom: 10px;\">\r\n                    <div class=\"circle-box\">\r\n                        <img class=\"small-image\" src=\"@/assets/MessageCenter/one.svg\" @click=\"getAll(currentPageAllPerson)\" alt=\"\">\r\n                    </div>\r\n                    <span class=\"all\" @click=\"getAll(currentPageAllPerson)\">全部动态</span>\r\n                </div>\r\n                <div class=\"slide\">\r\n                    <div  class=\"image-list\" :style=\"`transform: translateX(-${data}px)`\">\r\n                        <div v-for=\"(source,index) in focusMeUser\" :key=\"index\">\r\n                            <img :src=source.newAvatar alt=\"\" @click=\"clickToGetOnePerson(source.starId)\">\r\n                            <span>{{ source.username }}</span>\r\n                        </div>\r\n                    </div>    \r\n                </div>\r\n                <!-- <div class=\"arrow-right\" @click=\"moveRight\">\r\n                    <img src=\"@/assets/MessageCenter/right.svg\" alt=\"\">\r\n                </div> -->\r\n            </div>\r\n        </div>\r\n        <div class=\"then\" v-infinite-scroll=\"load\" infinite-scroll-distance=\"100\" infinite-scroll-immediate=\"false\">\r\n            <div v-for=\"(source,index) in focusMeNotification\" :key=\"index\" class=\"box\">\r\n                <!-- 发表文章 -->\r\n                <div v-if=\"source.type === 0\" class=\"large\" @click=\"goToDetail(source)\">\r\n                    <div class=\"top\">\r\n                        <img :src=source.newAvatar alt=\"\" class=\"cover\">\r\n                        <div class=\"top_right\">\r\n                            <div style=\"display: flex;align-items: center;margin-bottom: 5px;\">\r\n                                <span class=\"name\">{{ source.username }}</span>\r\n                                <img  v-if=\"source.verified === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;margin-left: -9px;\" alt=\"\">\r\n                            </div>\r\n                            <div >\r\n                                <span class=\"middle\">发布了文章</span>\r\n                                <span class=\"time\">{{ source.createTime }}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"text\">\r\n                        <img :src=source.newCoverPicture alt=\"\" class=\"aritle_cover\">\r\n                        <div style=\"display: flex; flex-direction: column; position: relative;width: 65%;cursor: pointer;\">\r\n                            <span class=\"article_title\">{{ source.title }}</span>\r\n                            <span class=\"article_content\">{{ source.summary }}</span>\r\n                            <div class=\"icons\">\r\n                                <div class=\"everyitem\">\r\n                                    <img src=\"@/assets/LikeBefore.svg\" alt=\"\" class=\"everyicon\">\r\n                                    <span>{{ source.likeCount }}</span>\r\n                                </div>\r\n                                <div class=\"everyitem\">\r\n                                    <img src=\"@/assets/FavoriteBefore.svg\" alt=\"\" class=\"everyicon\">\r\n                                    <span>{{ source.favoriteCount }}</span>\r\n                                </div>\r\n                                <div class=\"everyitem\">\r\n                                    <img src=\"@/assets/Comment.svg\" alt=\"\" class=\"everyicon\">\r\n                                    <span>{{ source.commentCount }}</span>\r\n                                </div>\r\n                                <div class=\"everyitem\">\r\n                                    <img src=\"@/assets/Transpond.svg\" alt=\"\" class=\"everyicon\">\r\n                                    <span>{{ source.transmitCount }}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>                    \r\n                </div>  \r\n                <!-- 发表分享 -->\r\n                <div v-if=\"source.type === 1\" class=\"large\" @click=\"goToDetail(source)\">\r\n                    <div class=\"top\">\r\n                        <img :src=source.newAvatar alt=\"\" class=\"cover\">\r\n                        <div class=\"top_right\">\r\n                            <div style=\"display: flex;align-items: center;margin-bottom: 5px;\">\r\n                                <span class=\"name\">{{ source.username }}</span>\r\n                                <img  v-if=\"source.verified === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;margin-left: -9px;\" alt=\"\">\r\n                            </div>\r\n                            <div >\r\n                                <span class=\"middle\">发布了分享</span>\r\n                                <span class=\"time\">{{ source.createTime }}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"text2\">\r\n                        <div style=\"display: flex; flex-direction: column;width: 95%;cursor: pointer;\" >\r\n                            <span class=\"share_title\">{{ source.title }}</span>\r\n                            <span class=\"share_content multi-line-ellipsis-4\">{{ source.content }}</span>\r\n                        </div>\r\n                        <div  class=\"pic-container\">\r\n                            <img :src='image' v-for= \"(image, imgIndex) in source.newCoverPicture.slice(0, 4)\"  :key=\"imgIndex\" alt=\"Share Image\" class=\"pic\">\r\n                        </div>\r\n                        <div class=\"icons2\">\r\n                            <div class=\"everyitem\">\r\n                                <img src=\"@/assets/LikeBefore.svg\" alt=\"\" class=\"everyicon\">\r\n                                <span>{{ source.likeCount }}</span>\r\n                            </div>\r\n                            <div class=\"everyitem\">\r\n                                <img src=\"@/assets/FavoriteBefore.svg\" alt=\"\" class=\"everyicon\">\r\n                                <span>{{ source.favoriteCount }}</span>\r\n                            </div>\r\n                            <div class=\"everyitem\">\r\n                                <img src=\"@/assets/Comment.svg\" alt=\"\" class=\"everyicon\">\r\n                                <span>{{ source.commentCount }}</span>\r\n                            </div>\r\n                            <div class=\"everyitem\">\r\n                                <img src=\"@/assets/Transpond.svg\" alt=\"\" class=\"everyicon\">\r\n                                <span>{{ source.transmitCount }}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n            <el-empty \r\n                v-if=\"!focusMeNotification || focusMeNotification.length === 0\" \r\n                :image-size=\"200\" \r\n                description=\"您暂时还没有收到关注列表消息呢！\"\r\n            />\r\n        </div>\r\n    </div>\r\n    <div v-if=\"dialogShowVisible\">\r\n        <ShareDialog v-model=\"dialogShowVisible\" :Id = shareId></ShareDialog>\r\n    </div>  \r\n</template>\r\n\r\n<script setup>\r\nimport axios from '@/utils/request.js';\r\nimport { ref,onMounted,computed,watch} from 'vue';\r\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\r\nimport { getArticleCoverageFromCOS } from '@/utils/cosService';\r\nimport { fetchShareCoverage } from '@/utils/fileService'; \r\nimport { ElMessage } from 'element-plus';\r\nimport { convertDateFormat } from '@/utils/timeFormat';\r\nimport ShareDialog from '@/page/ShareShow/components/ShareDialog.vue'\r\nimport { useRouter } from 'vue-router'\r\nimport { openUrl } from '@/utils/routeJudge'\r\n\r\nconst router = useRouter()\r\nconst currentLoadFunction = ref(1); //判定该调用getall函数还是getoneperson函数  \r\nconst currentPageOnePerson = ref(1); \r\nconst currentPageAllPerson = ref(1); \r\nconst checked1 = ref(true)\r\nconst checked2 = ref(true)\r\nconst focusMeNotification = ref([]);//存放用户关注列表中用户的动态\r\nconst focusMeUser = ref([]);//存放用户关注列表的数据\r\nconst userId = localStorage.getItem(\"userId\"); // 获取用户ID\r\nconst focusId = ref(null);//用户点击的用户Id\r\nconst dialogShowVisible = ref(false)//控制分享展示弹框是否展示\r\nconst shareId = ref(null);\r\n\r\n\r\nconst type = computed(() => {\r\n    if (checked1.value && checked2.value) return 2;\r\n    if (checked1.value) return 0;\r\n    if (checked2.value) return 1;\r\n    return 2;  \r\n});\r\n\r\nwatch(type, (newValue, oldValue) => {\r\n    console.log(`Type from ${oldValue} to ${newValue}`);\r\n    focusMeNotification.value = [];\r\n    currentPageAllPerson.value = 1;\r\n    currentPageOnePerson.value = 1;\r\n    if(currentLoadFunction.value === 1){\r\n        getAll( currentPageAllPerson.value);\r\n    }\r\n    else if(currentLoadFunction.value === 2){\r\n        getOnePerson(currentPageOnePerson.value);\r\n    }\r\n});\r\n\r\n// 点击进入文章展示或分享弹框\r\nconst goToDetail = (item) =>{\r\n    if(item.type === 0){\r\n        // const routeLocation = router.resolve({ path: `/TheArticle/${item.id}`});\r\n        // window.open(routeLocation.href, '_blank');\r\n        openUrl(`/TheArticle/${item.id}`)\r\n    }\r\n    else if(item.type === 1){\r\n        //点击打开分享展示弹框\r\n        shareId.value = item.id;\r\n        dialogShowVisible.value = true;\r\n    }\r\n}\r\n\r\n// 添加一个锁状态\r\nlet isLoading = false;\r\nasync function load() {\r\n    if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\r\n    isLoading = true; // 开始加载数据，设置锁状态为true\r\n    try {\r\n        if(currentLoadFunction.value === 1){\r\n            if(currentPageAllPerson.value === 1){\r\n                currentPageAllPerson.value++;\r\n            }\r\n            await getAll(currentPageAllPerson.value);\r\n            currentPageAllPerson.value++; // 只有在请求成功完成后才递增页码\r\n        }else if(currentLoadFunction.value === 2){\r\n            if(currentPageAllPerson.value === 1){\r\n                currentPageAllPerson.value++;\r\n            }\r\n            await getOnePerson(currentPageAllPerson.value);\r\n            currentPageOnePerson.value++; // 只有在请求成功完成后才递增页码\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        ElMessage.error('滚动时的未知错误')\r\n    } finally {\r\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\r\n    }\r\n}\r\n\r\nconst clickToGetOnePerson = (focusId1) =>{\r\n    focusId.value = focusId1;\r\n    focusMeNotification.value = [];\r\n    currentPageAllPerson.value = 1;\r\n    currentPageOnePerson.value = 1;\r\n    currentLoadFunction.value = 2;\r\n    getOnePerson(currentPageOnePerson.value,focusId.value);\r\n    \r\n}\r\nconst getAllFocus = async()=>{\r\n    try{\r\n        //    const response = await axios.get('/users/subscribe?apifoxApiId=105505953');\r\n        const response = await axios.get('/users/subscribe', {\r\n                params: {\r\n                    id:userId,\r\n                    page:1,\r\n                    pazeSize:1000\r\n                }\r\n            });\r\n        if(response.data.code === 1){\r\n            focusMeUser.value = response.data.data.records;\r\n            for (let record of focusMeUser.value) { \r\n                record.newAvatar = await getUsersAvatarFromCOS(record.starId);\r\n            }\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else(error)=>{\r\n            console.log(error);\r\n            ElMessage.error('获取用户的关注列表失败');\r\n        }\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n        ElMessage.error('获取用户的关注列表失败');\r\n        return []; // 返回空数组\r\n    }\r\n}\r\n\r\n// 获取某个用户动态消息\r\nconst getOnePerson = async(currentPage, userId) => {\r\n    currentLoadFunction.value = 2;\r\n    if(currentPageAllPerson.value === 1){\r\n        focusMeNotification.value = [];\r\n    }\r\n    try {\r\n        const params = {\r\n            page: currentPage,\r\n            pageSize: 5,\r\n            userId: userId,\r\n        };\r\n        if (type.value) {\r\n            params.type = type.value;\r\n        }\r\n        const response = await axios.get('/users/works', { params });\r\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n            let newRecords = response.data.data.records;\r\n            let updatePromises = newRecords.map(async (record) => {\r\n                record.createTime = convertDateFormat(record.createTime);\r\n                const avatarPromise = getUsersAvatarFromCOS(record.userId);\r\n                const coverPromise = record.type === 0 ? getArticleCoverageFromCOS(record.id) : fetchShareCoverage(record.id);\r\n                const [newAvatar, newCoverPicture] = await Promise.all([avatarPromise, coverPromise]);\r\n                return {\r\n                    ...record,\r\n                    newAvatar,\r\n                    newCoverPicture\r\n                };\r\n            });\r\n            newRecords = await Promise.all(updatePromises);\r\n            focusMeNotification.value.push(...newRecords);\r\n        }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n            ElMessage.info('已加载所有数据');\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        ElMessage.error('获取用户动态失败');\r\n    }\r\n};\r\n\r\n// 获取所有关注用户动态消息\r\nconst getAll = async(currentPage) => {\r\n    currentLoadFunction.value = 1;\r\n    if (currentPage === 1) {\r\n        focusMeNotification.value = [];\r\n    }\r\n    try {\r\n        const params = {\r\n            currentPage: currentPage,\r\n            pageSize: 5\r\n        };\r\n        if (type.value) {\r\n            params.type = type.value;\r\n        }\r\n        const response = await axios.get('/users/subscribe/works', { params });\r\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n            const updates = response.data.data.records.map(async (record) => {\r\n                const createTime = convertDateFormat(record.createTime);\r\n                const avatarPromise = getUsersAvatarFromCOS(record.userId);\r\n                const verified = await fetchUserInformation(record.userId);\r\n                const coverPromise = record.type === 0 ? getArticleCoverageFromCOS(record.id) : fetchShareCoverage(record.id);\r\n                const [newAvatar, newCoverPicture] = await Promise.all([avatarPromise, coverPromise]);\r\n                return { ...record, newAvatar, newCoverPicture,verified,createTime};\r\n            });\r\n            const updatedRecords = await Promise.all(updates);\r\n            focusMeNotification.value = [...focusMeNotification.value, ...updatedRecords];\r\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n            ElMessage.info('已加载所有数据');\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        ElMessage.error('获取关注用户的动态失败');\r\n    }\r\n};\r\n\r\n// 获取用户信息\r\nconst fetchUserInformation = async (userId) => {\r\n    try {\r\n        const response = await axios.get(`/users/${userId}`);\r\n        if(response.data.code === 1){\r\n            return (response.data.data.verified);\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            ElMessage.error('获取用户信息失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取用户信息失败\", error);\r\n        ElMessage.error('获取用户信息失败');\r\n    }\r\n};\r\n\r\n\r\nonMounted(()=>{\r\n    getAllFocus();\r\n    getAll(currentPageAllPerson.value);\r\n    listWidth.value = focusMeUser.value.length * 68;\r\n});\r\n\r\n\r\n\r\n// 左滑与右滑功能\r\nconst data = ref(0); // 这是滚动位置变量\r\nconst listWidth = ref(0); // 滚动内容的总宽度\r\n// function moveLeft(){\r\n//     data.value = (data.value - 68 + listWidth.value) % listWidth.value;\r\n// }\r\n// function moveRight(){\r\n//     data.value = (data.value + 68) % listWidth.value;\r\n// }\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.first{\r\n    width: 77vw;\r\n    padding: 12px 12px 0px; \r\n    justify-content: center; \r\n    gap: 12px;\r\n    border-radius: 8px;\r\n    border: 2px solid #F0F0F0;\r\n    background: #FFF;\r\n    margin-top: 50px;\r\n}\r\n.one{\r\n    display: flex;\r\n    margin-bottom: 5px;\r\n    align-items: center;\r\n}\r\n.one img{\r\n    width: 20px;\r\n    height: 20px;\r\n}\r\n.one span{\r\n    color: #6B757B;\r\n    text-align: center;\r\n    font-weight: 700;\r\n    line-height: 1.6; \r\n    margin-left: 8px;\r\n}\r\n.container{\r\n    width: 98%;\r\n    height: 75px;\r\n    margin: 0 auto 1rem;\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n    position: relative;\r\n}\r\n.circle-box{\r\n    width: 47px; \r\n    height: 47px; \r\n    border-radius: 50%;\r\n    border: 1px solid #6577b0;\r\n    background-color: #dee8fa;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n.small-image{\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 100%;\r\n}\r\n.slide{\r\n    overflow: hidden;\r\n    max-width: 88%;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n.arrow-left,\r\n.arrow-right{\r\n    height: 35px;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 28%;\r\n}\r\n.arrow-left {\r\n    left: -17px;\r\n}\r\n.arrow-right {\r\n    right: -17px;\r\n}\r\n.image-list{\r\n    display: flex;\r\n    white-space: nowrap; /* 确保水平排列，不换行 */\r\n    overflow-x: auto; /* 允许水平滚动 */\r\n    scroll-behavior: smooth; /* 使滚动平滑 */\r\n    padding-bottom: 20px;\r\n\r\n        /* 对于基于 WebKit 的浏览器 */\r\n    &::-webkit-scrollbar {\r\n        height: 3px; /* 设置滚动条高度 */\r\n    }\r\n    &::-webkit-scrollbar-track {\r\n        background: transparent; /* 设置滚动条轨道背景颜色 */\r\n        background-color: #f0f0f0;\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n        background-color: #e2e2e2; /* 设置滚动条颜色 */\r\n    }\r\n    &::-webkit-scrollbar-thumb:hover {\r\n        background-color: #d0d0d0; \r\n    }\r\n}\r\n/* 隐藏滚动条 */\r\n/* .image-list::-webkit-scrollbar {\r\n    display: none;\r\n} */\r\n.image-list {\r\n    scrollbar-width: none; /* Firefox */\r\n    -ms-overflow-style: none; /* Internet Explorer 10+ */\r\n}\r\n.all{\r\n    display: block;\r\n    color: #6577B0;\r\n    font-size: 10px;\r\n    line-height: 1.6; \r\n}\r\n.image-list img {\r\n    display: block;\r\n    width: 48px;\r\n    height: 48px;\r\n    margin: 0 10px;\r\n    cursor: pointer;\r\n    border-radius: 100%;\r\n}\r\n.image-list span{\r\n    display: block;\r\n    color: #6D757A;\r\n    text-align: center;\r\n    font-size: 10px;\r\n    line-height: 1.6; \r\n}\r\n::v-deep label.el-checkbox.el-checkbox--large.is-checked{\r\n    width: 80px;\r\n}\r\n.then{\r\n    width: 77vw;\r\n    height: calc(60vh - 1rem);\r\n    border-radius: 8px;\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n    padding: 12px 12px 0px;\r\n    border: 2px solid #F0F0F0;\r\n    margin-top: 12px;\r\n}\r\n.box{\r\n    width: 95%;\r\n    margin: 0px auto;\r\n    border-bottom:1px solid #e7e7e7;\r\n    display: flex;\r\n    margin-bottom: 25px;\r\n}\r\n.large{\r\n    display: flex;\r\n    width: 98%;\r\n    gap: 5px;\r\n    flex-direction: column;\r\n    position: relative;\r\n}\r\n.top {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    margin: 0px auto;\r\n}\r\n.cover{\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 100%;\r\n    cursor: pointer;\r\n}\r\n.top_right{\r\n    margin-left: 5px;\r\n}\r\n.name{\r\n    color: #000;\r\n    text-align: center;\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    line-height: 1.6;\r\n    margin: 0 10px;\r\n}\r\n.middle{\r\n    color: #505050;\r\n    font-size: 14px;\r\n    margin-left: 10px;\r\n    line-height: 1.6; \r\n}\r\n.time{\r\n    color: #939393;\r\n    font-size: 12px;\r\n    line-height: 1.6;\r\n    position: absolute;\r\n    right: 0px;\r\n}\r\n.text{\r\n    display: inline-block;\r\n    display: flex;\r\n    height: 140px;\r\n    padding: 10px 0px 20px;\r\n}\r\n.aritle_cover{\r\n    width: 205px;\r\n    height: 140px;\r\n    border-radius: 8px;\r\n    margin: 0px 25px 0px 75px;\r\n    border: 1px solid #ebebeb;\r\n    cursor: pointer;\r\n}\r\n.article_title{\r\n    margin-bottom: 5px;\r\n    font-size: 16px;\r\n    line-height: 1.6; \r\n}\r\n.article_content{\r\n    color: #7E7E7E;\r\n    font-size: 14px;\r\n    line-height: 1.6; \r\n    max-height: 90px;\r\n    width: 95%;\r\n}\r\n.icons,\r\n.icons2{\r\n    height: 20px;\r\n    display: flex;\r\n    gap: 25px;\r\n}\r\n.icons{\r\n    position: absolute;\r\n    bottom: 0px ;\r\n}\r\n.everyitem{\r\n    display: flex;\r\n    gap: 3px;\r\n    align-items: center;\r\n}\r\n.everyicon{\r\n    width: 16px;\r\n    height: 16px;\r\n}\r\n.everyitem span{\r\n    display: inline-block;\r\n    font-size: 12px;\r\n    color: #2d2d2d;\r\n}\r\n.text2{\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px 0px 20px 75px;\r\n}\r\n.share_title{\r\n    margin-bottom: 5px;\r\n    font-size: 16px;\r\n    line-height: 1.6; \r\n    font-weight: 700;\r\n}\r\n.share_content{\r\n    font-size: 14px;\r\n    line-height: 1.6; \r\n    max-height: 90px;\r\n    width: 105%;\r\n}\r\n.share_cover{\r\n    width: 160px;\r\n    height: 140px;\r\n    border-radius: 8px;\r\n    margin: 20px 5px;\r\n} \r\n.pic-container{\r\n    display: flex;\r\n    cursor: pointer;\r\n    justify-content: space-between;\r\n    padding: 20px 0px;\r\n}\r\n.pic {\r\n    width: 182px;\r\n    height: 160px;\r\n    border-radius: 8px;\r\n    border: 1px solid #ebebeb;\r\n}\r\n/* 调整滚动条宽度和颜色 */\r\n::-webkit-scrollbar {\r\n    width: 6px; /* 增加纵向滚动条的宽度 */\r\n    height: 3px; /* 增加横向滚动条的高度 */\r\n    background: transparent;\r\n}\r\n\r\n/* 定义滚动条轨道，设置为透明 */\r\n::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 8px rgba(0, 0, 0, 0); /* 内阴影 */\r\n    background: transparent; /* 将轨道背景设置为透明 */\r\n}\r\n\r\n/* 定义滑块，设置为浅灰色并增加内阴影 */\r\n::-webkit-scrollbar-thumb {\r\n    box-shadow: inset 0 0 8px rgba(145, 145, 145, 0.3); /* 添加淡灰色内阴影 */\r\n    background-color: #e2e2e2; /* 滑块的颜色改为浅灰色 */\r\n    border-radius: 10px; /* 保持圆角不变 */\r\n}\r\n/* 当鼠标悬停在滚动条滑块上时改变滑块的颜色 */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #c8c8c8;\r\n}\r\n@media (max-width: 768px) {\r\n    .first,\r\n    .then{\r\n        width: 800px;\r\n    }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}