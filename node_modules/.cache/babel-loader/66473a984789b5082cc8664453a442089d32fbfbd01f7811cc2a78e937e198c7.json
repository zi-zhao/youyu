{"ast":null,"code":"import { ref, watch, onMounted, onUnmounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport EvaluateDialog from '../components/EvaluateDialog.vue';\nimport { ElMessage } from 'element-plus';\nimport axios from '@/utils/request';\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\nimport { convertDateFormat } from '@/utils/timeFormat';\nimport { openUrl } from '@/utils/routeJudge';\nexport default {\n  __name: 'InitiatedQuestion',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const currentPage = ref(1);\n    const router = useRouter();\n    const typeNumber = ref(0);\n    const dialogFormVisible = ref(false);\n    const dataList = ref([]);\n    const countData = ref();\n    let interval = null;\n    const newValueOne = ref(0);\n    const handleTypeNumberChange = newValue => {\n      newValueOne.value = newValue;\n      if (newValue === 0) {\n        currentPage.value = 1;\n        getEndAnswer(currentPage.value);\n      } else if (newValue === 1) {\n        currentPage.value = 1;\n        getTocommentAnswer(currentPage.value);\n      } else if (newValue === 2) {\n        currentPage.value = 1;\n        getIngAnswer(currentPage.value);\n      } else if (newValue === 3) {\n        currentPage.value = 1;\n        getNoanswerAnswer(currentPage.value);\n      }\n    };\n    const changeType = () => {\n      dialogFormVisible.value = true;\n    };\n\n    //监视typeNumber的值\n    watch(typeNumber, handleTypeNumberChange);\n    const updateRemainTimes = () => {\n      if (typeNumber.value === 3) {\n        for (let record of dataList.value) {\n          record.remainTime = computeTimeRemain(record.createTime); // 假设 record.answerTime 是你需要计算剩余时间的字段\n        }\n      } else if (typeNumber.value === 2) {\n        for (let record of dataList.value) {\n          record.remainTime = computeTimeRemain(record.answerTime); // 假设 record.answerTime 是你需要计算剩余时间的字段\n        }\n      }\n    };\n\n    //计算时间差的函数，传入的startDateTime和endDateTime都是时间字符串,如YYYY-MM-DD HH:MM:SS\n    const computeTimeDifference = (startDateTime, endDateTime) => {\n      const startDate = new Date(startDateTime);\n      const endDate = new Date(endDateTime);\n      // 计算时间差值，得到的是毫秒数\n      const differenceInMillis = endDate - startDate;\n      // 将毫秒转换为小时、分钟和秒\n      const hours = Math.floor(differenceInMillis / (1000 * 60 * 60));\n      const minutes = Math.floor(differenceInMillis % (1000 * 60 * 60) / (1000 * 60));\n      const seconds = Math.floor(differenceInMillis % (1000 * 60) / 1000);\n      // 格式化小时、分钟和秒为两位数\n      const formattedHours = hours.toString().padStart(2, '0');\n      const formattedMinutes = minutes.toString().padStart(2, '0');\n      const formattedSeconds = seconds.toString().padStart(2, '0');\n      // 返回 HH:MM:SS 格式的字符串\n      return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n    };\n\n    //计算剩余时间\n    const computeTimeRemain = startDateTime => {\n      const now = new Date();\n      const formatted = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')}`;\n      const dateObj = new Date(startDateTime);\n      dateObj.setDate(dateObj.getDate() + 2);\n      const newDateTime = `${dateObj.getFullYear()}-${String(dateObj.getMonth() + 1).padStart(2, '0')}-${String(dateObj.getDate()).padStart(2, '0')} ${String(dateObj.getHours()).padStart(2, '0')}:${String(dateObj.getMinutes()).padStart(2, '0')}:${String(dateObj.getSeconds()).padStart(2, '0')}`;\n      const endTime = computeTimeDifference(formatted, newDateTime);\n      return endTime;\n    };\n\n    //判断哦评价展示的星星数量\n    const getStarCount1 = grade => {\n      const result = Math.floor(grade);\n      return result;\n    };\n    const goToConversationList = (typeNumber, id, questionId, number) => {\n      if (typeNumber === 0) {\n        // const routeLocation = router.resolve({ name:'LMyQuestioned'});\n        // window.open(routeLocation.href, '_blank');\n        // const routeLocation = router.resolve({ path: `/CompletedList/LMyQuestioned/${questionId}/${id}` });\n        // window.open(routeLocation.href, '_blank');\n        openUrl(`/CompletedList/LMyQuestioned/${questionId}/${id}`);\n      }\n      if (typeNumber === 2) {\n        // const routeLocation = router.resolve({ path:`/OngoingConversation/LiveChat/ask/${id}/${questionId}/${number}`});\n        // window.open(routeLocation.href, '_blank');\n        // const routeLocation = router.resolve({ path: `/OngoingConversation/LiveChat/ask/${id}/${questionId}/${number}` });\n        // window.open(routeLocation.href, '_blank');\n        openUrl(`/OngoingConversation/LiveChat/ask/${id}/${questionId}/${number}`);\n      }\n    };\n\n    // 添加一个锁状态\n    let isLoading = false;\n    async function load() {\n      if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\n      isLoading = true; // 开始加载数据，设置锁状态为true\n      if (currentPage.value === 1) {\n        currentPage.value++;\n      }\n      try {\n        if (newValueOne.value === 0) {\n          await getEndAnswer(currentPage.value);\n          currentPage.value++; // 只有在请求成功完成后才递增页码\n        } else if (newValueOne.value === 1) {\n          await getTocommentAnswer(currentPage.value);\n          currentPage.value++; // 只有在请求成功完成后才递增页码\n        } else if (newValueOne.value === 2) {\n          await getIngAnswer(currentPage.value);\n          currentPage.value++; // 只有在请求成功完成后才递增页码\n        } else if (newValueOne.value === 3) {\n          await getNoanswerAnswer(currentPage.value);\n          currentPage.value++; // 只有在请求成功完成后才递增页码\n        }\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('滚动时的未知错误');\n      } finally {\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\n      }\n    }\n\n    //获取各类提问数目（待解答、进行中、待评价和已完成）\n    async function countAnswer() {\n      try {\n        const response = await axios.get(`/answer/myask/count`);\n        if (response.data.code === 1) {\n          countData.value = response.data.data;\n          // ElMessage.success('获取各类提问数目成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取各类提问数目失败\");\n          ElMessage.error('获取各类提问数目失败');\n        }\n      } catch (error) {\n        console.error(\"获取各类提问数目失败\", error);\n        ElMessage.error('获取各类提问数目失败');\n      }\n    }\n\n    //获取进行中的问答（用户为提问者）\n    async function getIngAnswer(currentPage) {\n      if (currentPage === 1) {\n        dataList.value = [];\n      }\n      try {\n        const response = await axios.get(`/answer/myask/ing`, {\n          params: {\n            page: currentPage,\n            pazeSize: 10\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          const updates = response.data.data.records.map(async record => {\n            const avatarPromise = getUsersAvatarFromCOS(record.answererId);\n            const avatar = await avatarPromise;\n            const createTime = convertDateFormat(record.createTime);\n            const verified = await fetchUserInformation(record.answererId);\n            return {\n              ...record,\n              avatar,\n              verified,\n              createTime\n            };\n          });\n          const updatedRecords = await Promise.all(updates);\n          dataList.value = [...dataList.value, ...updatedRecords];\n          // ElMessage.success('获取进行中的问答成功');\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取进行中的问答失败\");\n          ElMessage.error('获取进行中的问答失败');\n        }\n      } catch (error) {\n        console.error(\"获取进行中的问答失败\", error);\n        ElMessage.error('获取进行中的问答失败');\n      }\n    }\n\n    //获取待评论的问答（用户为提问者）\n    async function getTocommentAnswer(currentPage) {\n      if (currentPage === 1) {\n        dataList.value = [];\n      }\n      try {\n        const response = await axios.get(`/answer/myask/tocomment`, {\n          params: {\n            page: currentPage,\n            pageSize: 10\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          const updates = response.data.data.records.map(async record => {\n            const avatar = await getUsersAvatarFromCOS(record.answererId);\n            const createTime = convertDateFormat(record.createTime);\n            const verified = await fetchUserInformation(record.answererId);\n            return {\n              ...record,\n              avatar,\n              verified,\n              createTime\n            };\n          });\n          const updatedRecords = await Promise.all(updates);\n          dataList.value = [...dataList.value, ...updatedRecords];\n          // ElMessage.success('获取待评论的问答成功');\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取待评论的问答失败\");\n          ElMessage.error('获取待评论的问答失败');\n        }\n      } catch (error) {\n        console.error(\"获取待评论的问答失败\", error);\n        ElMessage.error('获取待评论的问答失败');\n      }\n    }\n\n    //获取已结束的问答（用户为提问者）\n    async function getEndAnswer(currentPage) {\n      if (currentPage === 1) {\n        dataList.value = [];\n      }\n      try {\n        const response = await axios.get(`/answer/myask/end`, {\n          params: {\n            page: currentPage,\n            pageSize: 10\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          const updates = response.data.data.records.map(async record => {\n            const avatar = await getUsersAvatarFromCOS(record.answererId);\n            const createTime = convertDateFormat(record.createTime);\n            const verified = await fetchUserInformation(record.answererId);\n            return {\n              ...record,\n              avatar,\n              verified,\n              createTime\n            };\n          });\n          const updatedRecords = await Promise.all(updates);\n          dataList.value = [...dataList.value, ...updatedRecords];\n          // ElMessage.success('获取已结束的问答成功');\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取已结束的问答失败\");\n          ElMessage.error('获取已结束的问答失败');\n        }\n      } catch (error) {\n        console.error(\"获取已结束的问答失败\", error);\n        ElMessage.error('获取已结束的问答失败');\n      }\n    }\n\n    //获取未解答的问答（用户为提问者）\n    async function getNoanswerAnswer(currentPage) {\n      if (currentPage === 1) {\n        dataList.value = [];\n      }\n      try {\n        const response = await axios.get(`/answer/myask/noanswer`, {\n          params: {\n            page: currentPage,\n            pageSize: 10\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          const updates = response.data.data.records.map(async record => {\n            const avatar = await getUsersAvatarFromCOS(record.answererId);\n            const createTime = convertDateFormat(record.createTime);\n            const verified = await fetchUserInformation(record.answererId);\n            return {\n              ...record,\n              avatar,\n              verified,\n              createTime\n            };\n          });\n          const updatedRecords = await Promise.all(updates);\n          dataList.value = [...dataList.value, ...updatedRecords];\n          // ElMessage.success('获取未解答的问答成功');\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取未解答的问答失败\");\n          ElMessage.error('获取未解答的问答失败');\n        }\n      } catch (error) {\n        console.error(\"获取未解答的问答失败\", error);\n        ElMessage.error('获取未解答的问答失败');\n      }\n    }\n\n    // 获取用户信息\n    const fetchUserInformation = async userId => {\n      try {\n        const response = await axios.get(`/users/${userId}`);\n        if (response.data.code === 1) {\n          return response.data.data.verified;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('获取用户信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户信息失败\", error);\n        ElMessage.error('获取用户信息失败');\n      }\n    };\n\n    // 在组件挂载时设置定时器，每秒更新一次剩余时间\n    onMounted(() => {\n      updateRemainTimes(); // 立即更新一次剩余时间\n      interval = setInterval(updateRemainTimes, 1000); // 设置定时器\n      countAnswer();\n      getEndAnswer(currentPage.value);\n    });\n\n    // 在组件卸载时清除定时器\n    onUnmounted(() => {\n      clearInterval(interval);\n    });\n    const __returned__ = {\n      currentPage,\n      router,\n      typeNumber,\n      dialogFormVisible,\n      dataList,\n      countData,\n      get interval() {\n        return interval;\n      },\n      set interval(v) {\n        interval = v;\n      },\n      newValueOne,\n      handleTypeNumberChange,\n      changeType,\n      updateRemainTimes,\n      computeTimeDifference,\n      computeTimeRemain,\n      getStarCount1,\n      goToConversationList,\n      get isLoading() {\n        return isLoading;\n      },\n      set isLoading(v) {\n        isLoading = v;\n      },\n      load,\n      countAnswer,\n      getIngAnswer,\n      getTocommentAnswer,\n      getEndAnswer,\n      getNoanswerAnswer,\n      fetchUserInformation,\n      ref,\n      watch,\n      onMounted,\n      onUnmounted,\n      get useRouter() {\n        return useRouter;\n      },\n      EvaluateDialog,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get axios() {\n        return axios;\n      },\n      get getUsersAvatarFromCOS() {\n        return getUsersAvatarFromCOS;\n      },\n      get convertDateFormat() {\n        return convertDateFormat;\n      },\n      get openUrl() {\n        return openUrl;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","onUnmounted","useRouter","EvaluateDialog","ElMessage","axios","getUsersAvatarFromCOS","convertDateFormat","openUrl","currentPage","router","typeNumber","dialogFormVisible","dataList","countData","interval","newValueOne","handleTypeNumberChange","newValue","value","getEndAnswer","getTocommentAnswer","getIngAnswer","getNoanswerAnswer","changeType","updateRemainTimes","record","remainTime","computeTimeRemain","createTime","answerTime","computeTimeDifference","startDateTime","endDateTime","startDate","Date","endDate","differenceInMillis","hours","Math","floor","minutes","seconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","now","formatted","getFullYear","String","getMonth","getDate","getHours","getMinutes","getSeconds","dateObj","setDate","newDateTime","endTime","getStarCount1","grade","result","goToConversationList","id","questionId","number","isLoading","load","error","console","countAnswer","response","get","data","code","msg","params","page","pazeSize","records","length","updates","map","avatarPromise","answererId","avatar","verified","fetchUserInformation","updatedRecords","Promise","all","pageSize","userId","setInterval","clearInterval"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/QACenter/SquareQuestion/InitiatedQuestion.vue"],"sourcesContent":["<template>\r\n    <!-- 已完成，进行中，未回答 筛选 -->\r\n    <div class=\"select\">\r\n        <div style=\"display: flex; gap: 20px;\">\r\n            <div @click=\"typeNumber = 0\" :class=\"{ selected: typeNumber === 0 }\" class=\"select_btn\">\r\n                <span>已完成</span>\r\n                <span>{{  countData[3] }}</span>\r\n            </div>\r\n            <div @click=\"typeNumber = 1\" :class=\"{ selected: typeNumber === 1 }\" class=\"select_btn\">\r\n                <span>待评价</span>\r\n                <span>{{  countData[2] }}</span>\r\n            </div>\r\n            <div @click=\"typeNumber = 2\" :class=\"{ selected: typeNumber === 2 }\" class=\"select_btn\">\r\n                <span>进行中</span>\r\n                <span>{{ countData[1] }}</span>\r\n            </div>\r\n            <div @click=\"typeNumber = 3\" :class=\"{ selected: typeNumber === 3 }\" class=\"select_btn\">\r\n                <span>待解答</span>\r\n                <span>{{ countData[0] }}</span>\r\n            </div>\r\n        </div>\r\n    </div> \r\n    <!-- 推送框  -->\r\n    <div class=\"main_box\" v-infinite-scroll=\"load\" infinite-scroll-distance=\"100\" infinite-scroll-immediate=\"false\" >\r\n        <div v-for=\"(source,index) in dataList\" :key=\"index\" :class=\"{'item cur': typeNumber !== 1, 'item': typeNumber === 1}\" @click=\"goToConversationList(typeNumber,source.answererId,source.id,source.number)\">\r\n            <div class=\"up\">\r\n                <div class=\"up_box\">\r\n                    <div style=\"display: flex;\">\r\n                        <span class=\"ask\">我向</span>\r\n                        <div style=\"display: flex;align-items: center;\">\r\n                            <span class=\"name\">{{ source.answererUsername }}</span>\r\n                            <img  v-if=\"source.verified === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;margin: 0 5px 0 -4px;\" alt=\"\">\r\n                        </div>\r\n                        <span class=\"ask\">提问</span>\r\n                    </div>\r\n                    <span class=\"content multi-line-ellipsis-2\">{{ source.questionContent }}</span>\r\n                    <span class=\"time\">{{ source.createTime }}</span>\r\n                </div>\r\n            </div>\r\n            <div class=\"down\">\r\n                <div v-if=\"typeNumber === 0\" class=\"mark\">\r\n                    <div>\r\n                        <img v-for= \"n in getStarCount1(source.grade)\" :key=\"n\" src=\"@/assets/QACenter/ScoreStar.svg\" alt=\"\">\r\n                    </div>\r\n                    <span  style=\"font-size: 16px;line-height: 1.6; \" >{{source.content}}</span>\r\n                </div>\r\n                <div v-if=\"typeNumber === 1\" class=\"ing_box\">\r\n                    <div class=\"left_box\" @click=\"changeType\">\r\n                        <span >去评价</span>\r\n                        <img style=\"width: 16px;height: 16px; margin-left: 5px;cursor: pointer;\" src=\"@/assets/QACenter/Evaluation.svg\" alt=\"\">\r\n                    </div>\r\n                    <div v-if=\"dialogFormVisible\">\r\n                        <EvaluateDialog v-model=\"dialogFormVisible\" :QuestionId=\"source.id\"></EvaluateDialog>\r\n                    </div>\r\n                </div>\r\n                <div v-if=\"typeNumber === 2\" class=\"ing_box\">\r\n                    <div class=\"left_box\">\r\n                        <span style=\"cursor: pointer;\">继续提问</span>\r\n                        <img style=\"width: 16px;height: 16px; margin-left: 5px;cursor: pointer;\" src=\"@/assets/QACenter/QASquare_B.svg\" alt=\"\">\r\n                    </div>\r\n                    <div class=\"ing_btn\">\r\n                        <span style=\"color: #fff;\">剩余{{ source.remainTime }}</span>\r\n                    </div>\r\n                </div>\r\n                <div v-if=\"typeNumber === 3\" class=\"ing_box\">\r\n                    <div class=\"ing_btn2\">\r\n                        <span style=\"color: #fff;\">{{ source.remainTime }}后自动被拒绝</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <el-empty \r\n            v-if=\"!dataList || dataList.length === 0\" \r\n            :image-size=\"200\" \r\n            description=\"您还没有发起过提问呢！\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref,watch,onMounted,onUnmounted} from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport EvaluateDialog from '../components/EvaluateDialog.vue';\r\nimport { ElMessage } from 'element-plus';\r\nimport axios from '@/utils/request';\r\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\r\nimport { convertDateFormat } from '@/utils/timeFormat'; \r\nimport { openUrl } from '@/utils/routeJudge'\r\n\r\nconst currentPage = ref(1);\r\nconst router = useRouter()\r\nconst typeNumber = ref(0);\r\nconst dialogFormVisible = ref(false);\r\nconst dataList = ref([]);\r\nconst countData = ref();\r\nlet interval = null;\r\nconst newValueOne = ref(0);\r\n\r\nconst handleTypeNumberChange = (newValue) => {\r\n    newValueOne.value = newValue;\r\n    if(newValue === 0) {\r\n        currentPage.value = 1;\r\n        getEndAnswer(currentPage.value);\r\n    }\r\n    else if(newValue === 1) {\r\n        currentPage.value = 1;\r\n        getTocommentAnswer(currentPage.value);\r\n    }\r\n    else if(newValue === 2) {\r\n        currentPage.value = 1;\r\n        getIngAnswer(currentPage.value);\r\n    }\r\n    else if(newValue === 3) {\r\n        currentPage.value = 1;\r\n        getNoanswerAnswer(currentPage.value);\r\n    }\r\n}\r\n\r\nconst changeType = () =>{\r\n    dialogFormVisible.value = true;\r\n}\r\n\r\n//监视typeNumber的值\r\nwatch(typeNumber, handleTypeNumberChange);\r\n\r\nconst updateRemainTimes = () => {\r\n    if(typeNumber.value === 3){\r\n        for (let record of dataList.value) {\r\n            record.remainTime = computeTimeRemain(record.createTime); // 假设 record.answerTime 是你需要计算剩余时间的字段\r\n        }\r\n    }else if(typeNumber.value === 2){\r\n        for (let record of dataList.value) {\r\n            record.remainTime = computeTimeRemain(record.answerTime); // 假设 record.answerTime 是你需要计算剩余时间的字段\r\n        }\r\n    }\r\n\r\n};\r\n\r\n//计算时间差的函数，传入的startDateTime和endDateTime都是时间字符串,如YYYY-MM-DD HH:MM:SS\r\nconst computeTimeDifference = (startDateTime, endDateTime) => {\r\n    const startDate = new Date(startDateTime);\r\n    const endDate = new Date(endDateTime);\r\n    // 计算时间差值，得到的是毫秒数\r\n    const differenceInMillis = endDate - startDate;\r\n    // 将毫秒转换为小时、分钟和秒\r\n    const hours = Math.floor(differenceInMillis / (1000 * 60 * 60));\r\n    const minutes = Math.floor((differenceInMillis % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((differenceInMillis % (1000 * 60)) / 1000);\r\n    // 格式化小时、分钟和秒为两位数\r\n    const formattedHours = hours.toString().padStart(2, '0');\r\n    const formattedMinutes = minutes.toString().padStart(2, '0');\r\n    const formattedSeconds = seconds.toString().padStart(2, '0');\r\n    // 返回 HH:MM:SS 格式的字符串\r\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\r\n}\r\n\r\n\r\n//计算剩余时间\r\nconst computeTimeRemain = (startDateTime) => {\r\n    const now = new Date();\r\n    const formatted = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')}`;\r\n    const dateObj = new Date(startDateTime); \r\n    dateObj.setDate(dateObj.getDate() + 2); \r\n    const newDateTime = `${dateObj.getFullYear()}-${String(dateObj.getMonth() + 1).padStart(2, '0')}-${String(dateObj.getDate()).padStart(2, '0')} ${String(dateObj.getHours()).padStart(2, '0')}:${String(dateObj.getMinutes()).padStart(2, '0')}:${String(dateObj.getSeconds()).padStart(2, '0')}`;\r\n    const endTime = computeTimeDifference(formatted,newDateTime)\r\n    return endTime;\r\n}\r\n\r\n//判断哦评价展示的星星数量\r\nconst getStarCount1 = (grade) =>{\r\n    const result = Math.floor(grade);\r\n    return result\r\n}\r\n\r\n\r\nconst goToConversationList = ( typeNumber,id,questionId,number ) => {\r\n    if (typeNumber === 0) {\r\n        // const routeLocation = router.resolve({ name:'LMyQuestioned'});\r\n        // window.open(routeLocation.href, '_blank');\r\n        // const routeLocation = router.resolve({ path: `/CompletedList/LMyQuestioned/${questionId}/${id}` });\r\n        // window.open(routeLocation.href, '_blank');\r\n        openUrl(`/CompletedList/LMyQuestioned/${questionId}/${id}`)\r\n    }\r\n    if (typeNumber === 2) {\r\n        // const routeLocation = router.resolve({ path:`/OngoingConversation/LiveChat/ask/${id}/${questionId}/${number}`});\r\n        // window.open(routeLocation.href, '_blank');\r\n        // const routeLocation = router.resolve({ path: `/OngoingConversation/LiveChat/ask/${id}/${questionId}/${number}` });\r\n        // window.open(routeLocation.href, '_blank');\r\n        openUrl(`/OngoingConversation/LiveChat/ask/${id}/${questionId}/${number}`)\r\n    }\r\n  }\r\n\r\n// 添加一个锁状态\r\nlet isLoading = false;\r\nasync function load() {\r\n    if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\r\n    isLoading = true; // 开始加载数据，设置锁状态为true\r\n    if(currentPage.value === 1){\r\n        currentPage.value++;\r\n    }\r\n    try {\r\n        if(newValueOne.value === 0) {\r\n            await getEndAnswer(currentPage.value);\r\n            currentPage.value++; // 只有在请求成功完成后才递增页码\r\n        }\r\n        else if(newValueOne.value === 1) {\r\n            await getTocommentAnswer(currentPage.value);\r\n            currentPage.value++; // 只有在请求成功完成后才递增页码\r\n        }\r\n        else if(newValueOne.value === 2) {\r\n            await getIngAnswer(currentPage.value);\r\n            currentPage.value++; // 只有在请求成功完成后才递增页码\r\n        }\r\n        else if(newValueOne.value === 3) {\r\n            await getNoanswerAnswer(currentPage.value);\r\n            currentPage.value++; // 只有在请求成功完成后才递增页码\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        ElMessage.error('滚动时的未知错误');\r\n    } finally {\r\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\r\n    }\r\n}\r\n\r\n//获取各类提问数目（待解答、进行中、待评价和已完成）\r\nasync function countAnswer() {\r\n  try{\r\n    const response = await axios.get(`/answer/myask/count`)\r\n    if(response.data.code === 1){\r\n        countData.value = response.data.data;\r\n        // ElMessage.success('获取各类提问数目成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取各类提问数目失败\");\r\n        ElMessage.error('获取各类提问数目失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取各类提问数目失败\", error); \r\n    ElMessage.error('获取各类提问数目失败');\r\n  }\r\n}\r\n\r\n//获取进行中的问答（用户为提问者）\r\nasync function getIngAnswer(currentPage) {\r\n    if(currentPage === 1){\r\n        dataList.value = [];\r\n    }\r\n    try{\r\n        const response = await axios.get(`/answer/myask/ing`, {\r\n            params: {\r\n                page:currentPage,\r\n                pazeSize:10\r\n            }\r\n        });\r\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n            const updates = response.data.data.records.map(async (record) => {\r\n                const avatarPromise = getUsersAvatarFromCOS(record.answererId);\r\n                const avatar = await avatarPromise;\r\n                const createTime = convertDateFormat(record.createTime);\r\n                const verified = await fetchUserInformation(record.answererId);\r\n                return {\r\n                    ...record,\r\n                    avatar,\r\n                    verified,\r\n                    createTime,\r\n                };\r\n            });\r\n            const updatedRecords = await Promise.all(updates);\r\n            dataList.value = [...dataList.value, ...updatedRecords];\r\n            // ElMessage.success('获取进行中的问答成功');\r\n        }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n            // ElMessage.info('已加载所有数据');\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            console.error(\"获取进行中的问答失败\");\r\n            ElMessage.error('获取进行中的问答失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取进行中的问答失败\", error); \r\n        ElMessage.error('获取进行中的问答失败');\r\n    }\r\n}\r\n\r\n//获取待评论的问答（用户为提问者）\r\nasync function getTocommentAnswer(currentPage) {\r\n    if(currentPage === 1){\r\n        dataList.value = [];\r\n    }\r\n    try{\r\n        const response = await axios.get(`/answer/myask/tocomment`, {\r\n            params: {\r\n                page:currentPage,\r\n                pageSize:10\r\n            }\r\n        });\r\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n            const updates = response.data.data.records.map(async (record) => {\r\n                const avatar = await getUsersAvatarFromCOS(record.answererId);\r\n                const createTime = convertDateFormat(record.createTime);\r\n                const verified = await fetchUserInformation(record.answererId);\r\n                return {\r\n                    ...record,\r\n                    avatar,\r\n                    verified,\r\n                    createTime\r\n                };\r\n            });\r\n            const updatedRecords = await Promise.all(updates);\r\n            dataList.value = [...dataList.value, ...updatedRecords];\r\n            // ElMessage.success('获取待评论的问答成功');\r\n        }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n            // ElMessage.info('已加载所有数据');\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            console.error(\"获取待评论的问答失败\");\r\n            ElMessage.error('获取待评论的问答失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取待评论的问答失败\", error); \r\n        ElMessage.error('获取待评论的问答失败');\r\n    }\r\n}\r\n\r\n\r\n//获取已结束的问答（用户为提问者）\r\nasync function getEndAnswer(currentPage) {\r\n    if(currentPage === 1){\r\n        dataList.value = [];\r\n    }\r\n    try{\r\n        const response = await axios.get(`/answer/myask/end`, {\r\n            params: {\r\n                page:currentPage,\r\n                pageSize:10,\r\n            }\r\n        });\r\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n            const updates = response.data.data.records.map(async (record) => {\r\n                const avatar = await getUsersAvatarFromCOS(record.answererId);\r\n                const createTime = convertDateFormat(record.createTime);\r\n                const verified = await fetchUserInformation(record.answererId);\r\n                return {\r\n                    ...record,\r\n                    avatar,\r\n                    verified,\r\n                    createTime\r\n                };\r\n            });\r\n            const updatedRecords = await Promise.all(updates);\r\n            dataList.value = [...dataList.value, ...updatedRecords];\r\n            // ElMessage.success('获取已结束的问答成功');\r\n        }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n            // ElMessage.info('已加载所有数据');\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            console.error(\"获取已结束的问答失败\");\r\n            ElMessage.error('获取已结束的问答失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取已结束的问答失败\", error); \r\n        ElMessage.error('获取已结束的问答失败');\r\n    }\r\n}\r\n\r\n//获取未解答的问答（用户为提问者）\r\nasync function getNoanswerAnswer(currentPage) {\r\n    if(currentPage === 1){\r\n        dataList.value = [];\r\n    }\r\n    try{\r\n        const response = await axios.get(`/answer/myask/noanswer`, {\r\n            params: {\r\n                page:currentPage,\r\n                pageSize:10,\r\n            }\r\n        });\r\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n            const updates = response.data.data.records.map(async (record) => {\r\n                const avatar = await getUsersAvatarFromCOS(record.answererId);\r\n                const createTime = convertDateFormat(record.createTime);\r\n                const verified = await fetchUserInformation(record.answererId);\r\n                return {\r\n                    ...record,\r\n                    avatar,\r\n                    verified,\r\n                    createTime,\r\n                };\r\n            });\r\n            const updatedRecords = await Promise.all(updates);\r\n            dataList.value = [...dataList.value, ...updatedRecords];\r\n            // ElMessage.success('获取未解答的问答成功');\r\n        }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n            // ElMessage.info('已加载所有数据');\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            console.error(\"获取未解答的问答失败\");\r\n            ElMessage.error('获取未解答的问答失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取未解答的问答失败\", error); \r\n        ElMessage.error('获取未解答的问答失败');\r\n    }\r\n}\r\n\r\n// 获取用户信息\r\nconst fetchUserInformation = async (userId) => {\r\n    try {\r\n        const response = await axios.get(`/users/${userId}`);\r\n        if(response.data.code === 1){\r\n            return (response.data.data.verified);\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            ElMessage.error('获取用户信息失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取用户信息失败\", error);\r\n        ElMessage.error('获取用户信息失败');\r\n    }\r\n};\r\n\r\n\r\n\r\n// 在组件挂载时设置定时器，每秒更新一次剩余时间\r\nonMounted(() => {\r\n  updateRemainTimes(); // 立即更新一次剩余时间\r\n  interval = setInterval(updateRemainTimes, 1000); // 设置定时器\r\n  countAnswer();\r\n  getEndAnswer(currentPage.value);\r\n});\r\n\r\n// 在组件卸载时清除定时器\r\nonUnmounted(() => {\r\n  clearInterval(interval);\r\n});\r\n\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.select{\r\n    width: 75%;\r\n    margin: 1rem auto 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n.select_btn{\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    cursor: pointer;\r\n}\r\n.select_btn span{\r\n    font-size: 12px;\r\n    line-height: 1.6;\r\n}\r\n.selected span{\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    line-height: 1.6;\r\n}\r\n.main_box{\r\n    padding: 15px 0px;\r\n    height: 58vh;\r\n    overflow: auto;\r\n}\r\n.item{\r\n    display: flex;\r\n    width: 70%;\r\n    padding: 16px 20px;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    gap: 12px;\r\n    margin: 0px auto 30px;\r\n    border-radius: 12px;\r\n    background: #FFF;\r\n}\r\n.cur{\r\n    cursor: pointer;\r\n}\r\n.up{\r\n    padding-bottom: 12px;\r\n    width: 100%;\r\n    border-bottom: 1px solid #EEE;\r\n}\r\n.up_box{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n}\r\n.name{\r\n    color: #3F87E1;\r\n    margin: 0px 5px;\r\n    line-height: 1.6;\r\n}\r\n.ask{\r\n    color: #9B9B9B;\r\n    line-height: 1.6;\r\n}\r\n.content{\r\n    width: 100%;\r\n    line-height: 1.6;\r\n}\r\n.time{\r\n    color: #7E7E7E;\r\n    font-size: 14px;\r\n    line-height: 1.6;\r\n}\r\n.down{\r\n    width: 100%;\r\n}\r\n.mark{\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n}\r\n.ing_box,\r\n.left_box{\r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n}\r\n.ing_box{\r\n    justify-content: space-between;\r\n    width: 100%;\r\n}\r\n.ing_btn{\r\n    height: 19px;\r\n    padding: 8px 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #EEE;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 10px;\r\n    background: #67ABFF;\r\n}\r\n.ing_btn2{\r\n    width: 173px;\r\n    height: 19px;\r\n    padding: 8px 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #EEE;\r\n    background: #67ABFF;\r\n    cursor: pointer;\r\n}\r\n/* 对手机屏幕和小尺寸屏幕的样式调整 */\r\n@media (max-width: 768px) {\r\n    .select{\r\n        width: 90%;\r\n    }\r\n    .item{\r\n        width: 88%;\r\n        padding: 16px 1rem;\r\n        gap: 12px;\r\n        border-radius: 12px;\r\n        background: #FFF;\r\n        cursor: pointer;\r\n    }\r\n    .main_box{\r\n        height: 57vh;\r\n    }\r\n    .ing_btn,\r\n    .ing_btn2{\r\n        font-size: 0.8rem;\r\n        padding: 0.4rem 0.5rem;\r\n    }\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}