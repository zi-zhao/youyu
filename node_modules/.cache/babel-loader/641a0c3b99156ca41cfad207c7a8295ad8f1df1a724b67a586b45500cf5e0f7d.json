{"ast":null,"code":"import { ElMessage, ElPagination } from 'element-plus';\nimport axios from \"@/utils/request\";\nimport { ref, onMounted, reactive } from \"vue\";\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\nimport unlikedImage from '@/assets/LikeBefore.svg'; //点赞前图片\nimport likedImage from '@/assets/LikeAfter.svg'; //点赞后图片\nimport { useRouter } from 'vue-router';\nimport CreportedDialog from '@/page/components/CreportedDialog.vue';\nimport { formatDateTime } from '@/utils/timeFormat';\nimport { openUrl } from '@/utils/routeJudge';\nexport default {\n  __name: 'ShareCommentL',\n  props: {\n    shareId: Number,\n    shareAuthorId: Number,\n    shareAuthorName: String,\n    shareTitle: String\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const dialogVisible2 = ref(false); //控制评论举报弹框是否显示\n    const type = ref(null);\n    const workId = ref(null);\n    const props = __props;\n    const currentPage = ref(1);\n    const router = useRouter();\n    let userId = localStorage.getItem(\"userId\");\n    let userName = localStorage.getItem(\"userName\");\n    const records = ref([]); //储存一级评论列表\n    const repliesMap = ref({}); // 存储每个一级评论ID对应的二级评论列表\n    const newUserAvater = ref(); //存放用户自己的头像\n    const paginationStates = reactive({}); //存储每个分页器\n\n    const initPaginationState = recordId => {\n      if (!paginationStates[recordId]) {\n        paginationStates[recordId] = {\n          currentPage: 1,\n          //分页器中的当前页数\n          pageSize: 5,\n          //分页器中的每页呈现数据条数\n          pageCount: 0,\n          //分页器中总页数\n          pagerCount: 5 //分页器最多显示几个页码\n        };\n      }\n    };\n\n    //分页器中获取新的页码\n    const handleCurrentChange = (commentId, currentChange) => {\n      if (paginationStates[commentId]) {\n        paginationStates[commentId].currentPage = currentChange;\n        fetchReplies(commentId, paginationStates[commentId].currentPage, paginationStates[commentId].pageSize);\n      }\n    };\n\n    //向举报弹窗赋值的函数\n    const commentReport = (id, typeNum) => {\n      workId.value = id;\n      type.value = typeNum;\n      dialogVisible2.value = true;\n    };\n\n    //点击用户头像进行跳转\n    const navigateToUserProfile = user_id => {\n      console.log('点击用户头像跳转');\n      if (user_id == userId) {\n        // const routeLocation = router.resolve({ path: '/PersonalPage' });\n        // window.open(routeLocation.href, '_blank');\n        openUrl('/PersonalPage');\n      } else {\n        // const routeLocation = router.resolve({ path: `/OtherUserPersonalPage/${user_id}`});\n        // window.open(routeLocation.href, '_blank');\n        openUrl(`/OtherUserPersonalPage/${user_id}`);\n      }\n    };\n\n    // 添加一个锁状态\n    let isLoading = false;\n    async function load() {\n      if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\n      isLoading = true; // 开始加载数据，设置锁状态为true\n      try {\n        if (currentPage.value === 1) {\n          currentPage.value++;\n        }\n        await fetchComments(props.shareId, currentPage.value);\n        currentPage.value++; // 只有在请求成功完成后才递增页码\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('滚动时的未知错误');\n      } finally {\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\n      }\n    }\n\n    //获取一级评论并获取对应的二级评论（调用fetchReplies）\n    const fetchComments = async (shareId, currentPage) => {\n      try {\n        const response = await axios.get(\"/comment/list\", {\n          params: {\n            pageSize: 10,\n            currentPage: currentPage,\n            articleId: shareId,\n            type: 1\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          response.data.data.records.forEach(record => initPaginationState(record.id));\n          const updates = response.data.data.records.map(async record => {\n            const newAvatar = await getUsersAvatarFromCOS(record.userId);\n            const verified = await fetchUserInformation(record.userId);\n            return {\n              ...record,\n              verified,\n              showReported: false,\n              // 控制评论的举报按钮是否显示\n              showMore: false,\n              // 控制评论“more”图标是否显示\n              newAvatar,\n              showComments: false\n            };\n          });\n          const updatedRecords = await Promise.all(updates);\n          records.value = [...records.value, ...updatedRecords];\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取一级评论数据失败:\", response.data.msg || \"Unknown error\");\n          ElMessage.error('获取分享评论失败');\n        }\n      } catch (error) {\n        console.error(\"请求一级评论接口失败:\", error.message);\n        ElMessage.error('获取分享评论失败');\n      }\n    };\n\n    //根据一级评论id获取对应二级评论\n    const fetchReplies = async (commentId, currentPage, pageSize) => {\n      try {\n        const response = await axios.get(\"/comment/reply/list\", {\n          params: {\n            pageSize: pageSize,\n            currentPage: currentPage,\n            commentId: commentId\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          repliesMap.value[commentId] = response.data.data.records;\n          if (paginationStates[commentId]) {\n            paginationStates[commentId].pageCount = Math.ceil(response.data.data.total / pageSize);\n          }\n          const updates = repliesMap.value[commentId].map(async record => {\n            const newAvatar = await getUsersAvatarFromCOS(record.userId);\n            const verified = await fetchUserInformation(record.userId);\n            return {\n              ...record,\n              verified,\n              showReported: false,\n              // 控制评论的举报按钮是否显示\n              showMore: false,\n              // 控制评论“more”图标是否显示\n              newAvatar\n            };\n          });\n          repliesMap.value[commentId] = await Promise.all(updates);\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取二级评论接口失败\", response.data.msg || \"Unknown error\");\n          ElMessage.error('获取二级评论接口失败');\n        }\n      } catch (error) {\n        console.error(\"获取二级评论接口失败\", error.message);\n        ElMessage.error('获取二级评论接口失败');\n      }\n    };\n\n    //点击一级评论的评论按钮，展开对应的二级评论\n    const handleSubComment = recordId => {\n      const record = records.value.find(r => r.id === recordId);\n      if (record) {\n        record.showComments = !record.showComments;\n      }\n      if (record.showComments) {\n        // 初始化分页状态，如果尚未初始化\n        initPaginationState(recordId);\n        // 使用该一级评论的分页状态来获取二级评论\n        fetchReplies(recordId, paginationStates[recordId].currentPage, paginationStates[recordId].pageSize);\n      }\n    };\n\n    //最顶部的评论框提交的相关接口\n    const levelOneCommentContent = ref(\"\");\n    const handlerlevelOneComment = async () => {\n      if (!levelOneCommentContent.value) {\n        ElMessage.error(\"评论内容不能为空!\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"/comment/send\", {\n          authorId: props.shareAuthorId,\n          authorName: props.shareAuthorName,\n          worksId: props.shareId,\n          worksTitle: props.shareTitle,\n          userId: userId,\n          username: userName,\n          content: levelOneCommentContent.value,\n          type: 1\n        });\n        if (response.data.code === 1) {\n          const newReplyId = response.data.map.id;\n          ElMessage.success(\"评论成功!\");\n          const time = new Date();\n          // 假设并构造新的评论\n          const newComment = {\n            id: newReplyId,\n            username: userName,\n            newAvatar: newUserAvater.value,\n            content: levelOneCommentContent.value,\n            createTime: formatDateTime(time),\n            // 使用当前时间作为评论时间\n            state: 0,\n            // 初始状态下，该评论未被点赞\n            likeCount: 0,\n            replyCount: 0,\n            shareId: props.shareId\n          };\n          // 将新评论添加到records数组的开头\n          records.value.unshift(newComment);\n          // 清除评论输入框的内容\n          levelOneCommentContent.value = \"\";\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error(\"评论失败: \" + (response.data.msg || \"未知错误\"));\n        }\n      } catch (error) {\n        ElMessage.error(\"提交评论时出现错误: \" + error.message);\n      }\n    };\n\n    //一级评论框的内容获取\n    const replyCommentContent = ref(\"\");\n    const handleReplyToFirstLevelComment = async comment => {\n      if (!replyCommentContent.value) {\n        ElMessage.error(\"回复内容不能为空!\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"/comment/reply/send\", {\n          userId: userId,\n          // 假设用户ID\n          username: userName,\n          worksId: props.shareId,\n          worksTitle: props.shareTitle,\n          commentId: comment.id,\n          content: replyCommentContent.value,\n          type: 1\n        });\n        if (response.data.code === 1) {\n          ElMessage.success(\"回复成功!\");\n          // 折叠回复框\n          activeReplyBoxId.value = null;\n          replyCommentContent.value = \"\"; // 重置回复内容\n          comment.showComments = false;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error(\"回复失败: \" + (response.data.msg || \"未知错误\"));\n        }\n      } catch (error) {\n        ElMessage.error(\"提交回复时出现错误: \" + error.message);\n      }\n    };\n\n    //一级评论的点赞接口，接受一个 record 作为参数\n    async function increaseCount(record) {\n      try {\n        const config = record.state === 0 ? {\n          method: 'put',\n          url: `/comment/like`,\n          params: {\n            id: record.id,\n            userId: record.userId\n          }\n        } : {\n          method: 'delete',\n          url: `/comment/unlike`,\n          params: {\n            id: record.id,\n            userId: record.userId\n          }\n        };\n        const response = await axios(config);\n        if (response.data && response.data.code === 1) {\n          record.state = record.state === 0 ? 1 : 0;\n          record.likeCount = response.data.data;\n          console.log('点赞/取消赞 成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(response.data.msg || 'Unknown error');\n        }\n      } catch (error) {\n        console.error('获取点赞状态失败', error.message);\n      }\n    }\n\n    //二级评论的点赞接口，接受一个 reply 作为参数\n    async function increaseCount2(reply) {\n      try {\n        const config = reply.state === 0 ? {\n          method: 'put',\n          url: `comment/reply/like`,\n          params: {\n            id: reply.id,\n            userId: reply.userId\n          }\n        } : {\n          method: 'delete',\n          url: `/comment/reply/unlike`,\n          params: {\n            id: reply.id,\n            userId: reply.userId\n          }\n        };\n        const response = await axios(config);\n        if (response.data && response.data.code === 1) {\n          reply.state = reply.state === 0 ? 1 : 0;\n          reply.likeCount = response.data.data;\n          console.log('点赞/取消赞 成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(response.data.msg || 'Unknown error');\n        }\n      } catch (error) {\n        console.error('获取点赞状态失败', error.message);\n      }\n    }\n\n    //一级回复框的折叠（点击回复后出现）\n    const activeReplyBoxId = ref(null);\n    const toggleReplyBox = id => {\n      activeReplyBoxId.value = activeReplyBoxId.value === id ? null : id;\n    };\n\n    // 获取用户信息\n    const fetchUserInformation = async userId => {\n      try {\n        const response = await axios.get(`/users/${userId}`);\n        if (response.data.code === 1) {\n          return response.data.data.verified;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('获取用户信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户信息失败\", error);\n        ElMessage.error('获取用户信息失败');\n      }\n    };\n    onMounted(async () => {\n      newUserAvater.value = await getUsersAvatarFromCOS(userId);\n      fetchComments(props.shareId, currentPage.value);\n    });\n    const __returned__ = {\n      dialogVisible2,\n      type,\n      workId,\n      props,\n      currentPage,\n      router,\n      get userId() {\n        return userId;\n      },\n      set userId(v) {\n        userId = v;\n      },\n      get userName() {\n        return userName;\n      },\n      set userName(v) {\n        userName = v;\n      },\n      records,\n      repliesMap,\n      newUserAvater,\n      paginationStates,\n      initPaginationState,\n      handleCurrentChange,\n      commentReport,\n      navigateToUserProfile,\n      get isLoading() {\n        return isLoading;\n      },\n      set isLoading(v) {\n        isLoading = v;\n      },\n      load,\n      fetchComments,\n      fetchReplies,\n      handleSubComment,\n      levelOneCommentContent,\n      handlerlevelOneComment,\n      replyCommentContent,\n      handleReplyToFirstLevelComment,\n      increaseCount,\n      increaseCount2,\n      activeReplyBoxId,\n      toggleReplyBox,\n      fetchUserInformation,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElPagination() {\n        return ElPagination;\n      },\n      get axios() {\n        return axios;\n      },\n      ref,\n      onMounted,\n      reactive,\n      get getUsersAvatarFromCOS() {\n        return getUsersAvatarFromCOS;\n      },\n      get unlikedImage() {\n        return unlikedImage;\n      },\n      get likedImage() {\n        return likedImage;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      CreportedDialog,\n      get formatDateTime() {\n        return formatDateTime;\n      },\n      get openUrl() {\n        return openUrl;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ElMessage","ElPagination","axios","ref","onMounted","reactive","getUsersAvatarFromCOS","unlikedImage","likedImage","useRouter","CreportedDialog","formatDateTime","openUrl","dialogVisible2","type","workId","props","__props","currentPage","router","userId","localStorage","getItem","userName","records","repliesMap","newUserAvater","paginationStates","initPaginationState","recordId","pageSize","pageCount","pagerCount","handleCurrentChange","commentId","currentChange","fetchReplies","commentReport","id","typeNum","value","navigateToUserProfile","user_id","console","log","isLoading","load","fetchComments","shareId","error","response","get","params","articleId","data","code","length","forEach","record","updates","map","newAvatar","verified","fetchUserInformation","showReported","showMore","showComments","updatedRecords","Promise","all","msg","toString","message","Math","ceil","total","handleSubComment","find","r","levelOneCommentContent","handlerlevelOneComment","post","authorId","shareAuthorId","authorName","shareAuthorName","worksId","worksTitle","shareTitle","username","content","newReplyId","success","time","Date","newComment","createTime","state","likeCount","replyCount","unshift","replyCommentContent","handleReplyToFirstLevelComment","comment","activeReplyBoxId","increaseCount","config","method","url","increaseCount2","reply","toggleReplyBox"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/ShareShow/components/ShareCommentL.vue"],"sourcesContent":["<template>\r\n  <div class=\"commont_body\">\r\n    <div class=\"commentListCont\">\r\n      <!-- 一级评论 输入 -->\r\n      <div class=\"levelOneCommentInput commentInput\">\r\n        <div class=\"input\">\r\n          <el-input\r\n              v-model.lazy.trim=\"levelOneCommentContent\"\r\n              :autosize=\"{ minRows: 1, maxRows: 5 }\"\r\n              type=\"textarea\"\r\n              maxlength=\"200\"\r\n              show-word-limit=\"true\"\r\n              resize=\"none\"\r\n              placeholder=\"发表你的评论吧\"\r\n              class=\"comment-input\"\r\n              style=\"width: 90%;\"\r\n          />\r\n          <button @click=\"handlerlevelOneComment\">评论</button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 评论渲染 -->\r\n      <!-- 评论渲染 -->\r\n      <div class=\"commentList\"  v-infinite-scroll=\"load\" infinite-scroll-distance=\"100\" infinite-scroll-immediate=\"false\">\r\n        <!-- 评论item -->\r\n        <div v-for=\"record in records\" :key=\"record.id\" style=\"margin-left: 60px;\">\r\n          <div class=\"levelOneComment commentItem\" @mouseenter=\"record.showMore = true\" @mouseleave=\"record.showMore = false\">\r\n            <div class=\"userPhoto_1\">\r\n              <img \r\n                v-if=\"record.newAvatar\"\r\n                :src=\"record.newAvatar\"\r\n                alt=\"\"\r\n                class=\"navbar-avatar\"\r\n                @click=\"navigateToUserProfile(record.userId)\"\r\n                :style=\"{ cursor: 'pointer' }\"\r\n            >\r\n            </div>\r\n            <!-- 一级评论内容 -->\r\n            <div class=\"userComment\">\r\n              <div style=\"display: flex;align-items: center;gap: 3px;\">\r\n                  <p class=\"userName\">{{ record.username }}</p>\r\n                  <img v-if=\"record.verified === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;\" alt=\"\">\r\n              </div>\r\n              <p class=\"content\">{{ record.content }}</p>\r\n              <div class=\"operationBar\">\r\n                <span class=\"commentDate\">{{ record.createTime }}</span>\r\n                <img\r\n                  class=\"like-pic\"\r\n                  :src=\" record.state === 0 ? unlikedImage : likedImage\"\r\n                  @click=\"increaseCount(record)\"\r\n                />\r\n                <span class=\"like-count\">{{ record.likeCount }}</span>\r\n                <img class=\"like-pic\" src=\"@/assets/Comment.svg\"  @click=\"handleSubComment(record.id)\"/>\r\n                <span class=\"like-count\">{{ record.replyCount }}</span>\r\n                <span class=\"commentBtn\" @click=\"toggleReplyBox(record.id)\"\r\n                  >回复</span\r\n                >\r\n                <img src=\"@//assets/More.svg\" class=\"more\" v-if=\"record.showMore\" @click=\"record.showReported = true\" alt=\"\">\r\n                <div class=\"hover-box\" v-if=\"record.showReported\" @mouseleave=\"record.showReported = false\">\r\n                    <div class=\"report-hover\" @click=\"commentReport(record.id,0)\">\r\n                      举报\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <!-- 一级回复输入框 - 显示在每个一级评论的底下 -->\r\n          <div v-if=\"activeReplyBoxId === record.id\" class=\"userinput2\">\r\n            <div class=\"input\">\r\n              <el-input\r\n                v-model.lazy.trim=\"replyCommentContent\"\r\n                :autosize=\"{ minRows: 1, maxRows: 5 }\"\r\n                type=\"textarea\"\r\n                maxlength=\"200\"\r\n                show-word-limit=\"true\"\r\n                resize=\"none\"\r\n                placeholder=\"文本中的评论将被发送\"\r\n                class=\"comment-input\"\r\n                style=\"width: 89%;\"\r\n              />\r\n              <button @click=\"handleReplyToFirstLevelComment(record)\">\r\n                评论\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 二级评论 -->\r\n          <div v-if=\"record.showComments\" >\r\n            <div\r\n              v-for=\"reply in repliesMap[record.id] || []\"\r\n              :key=\"reply.id\"\r\n              class=\"userComment\"\r\n            >\r\n              <div class=\"leveltwoComment commentItem\" @mouseenter=\"reply.showMore = true\" @mouseleave=\"reply.showMore = false\">\r\n                <div class=\"userPhoto_2\">\r\n                  <img \r\n                    v-if=\"reply.newAvatar\"\r\n                    :src=\"reply.newAvatar\"\r\n                    alt=\"\"\r\n                    class=\"navbar-avatar\"\r\n                    @click=\"navigateToUserProfile(reply.userId)\"\r\n                    :style=\"{ cursor: 'pointer' }\"\r\n                  >\r\n                </div>\r\n                <div class=\"userComment2\">\r\n                  <div style=\"display: flex;align-items: center;gap: 3px;\">\r\n                      <p class=\"userName2\">{{ reply.username }}</p>\r\n                      <img  v-if=\"reply.verified === 1\"  src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;\" alt=\"\">\r\n                  </div>\r\n                  <p class=\"content2\">{{ reply.content }}</p>\r\n                  <div class=\"operationBar2\">\r\n                    <span class=\"commentDate2\">{{ reply.createTime }}</span>\r\n                    <!-- 点赞图片 -->\r\n                    <img\r\n                      class=\"like-pic2\"\r\n                      :src=\"reply.state === 0 ? unlikedImage : likedImage\"\r\n                      @click=\"increaseCount2(reply)\"\r\n                    />\r\n                    <span class=\"like-count2\">{{ reply.likeCount }}</span>\r\n                    <!-- 评论举报 -->\r\n                    <img src=\"@/assets/More.svg\" class=\"more\" v-if=\" reply.showMore\" @click=\" reply.showReported = true\" alt=\"\">\r\n                    <div class=\"hover-box\" v-if=\" reply.showReported\" @mouseleave=\" reply.showReported = false\">\r\n                      <div class=\"report-hover\" @click=\"commentReport(reply.id,1)\">\r\n                        举报\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"bottom\" v-if=\"record.replyCount>0\">\r\n                <el-pagination\r\n                  v-model:current-page=\"paginationStates[record.id].currentPage\"\r\n                  v-model:page-size=\"paginationStates[record.id].pageSize\"\r\n                  :small=\"small\"\r\n                  layout=\"prev, pager, next\"\r\n                  :pager-count=\"paginationStates[record.id].pageCount\"\r\n                  :page-count=\"paginationStates[record.id].pageCount\"\r\n                  @current-change=\"newPage => handleCurrentChange(record.id, newPage)\"/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"dialogVisible2\">\r\n      <CreportedDialog v-model=\"dialogVisible2\" :id=\"workId\" :type=\"type\" ></CreportedDialog>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script setup>\r\nimport { ElMessage,ElPagination } from 'element-plus';\r\nimport axios from \"@/utils/request\";\r\nimport { ref,defineProps,onMounted,reactive } from \"vue\";\r\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\r\nimport unlikedImage from '@/assets/LikeBefore.svg';//点赞前图片\r\nimport likedImage from '@/assets/LikeAfter.svg';//点赞后图片\r\nimport { useRouter } from 'vue-router';\r\nimport CreportedDialog from '@/page/components/CreportedDialog.vue';\r\nimport { formatDateTime} from '@/utils/timeFormat'; \r\nimport { openUrl } from '@/utils/routeJudge'\r\n\r\nconst dialogVisible2 = ref(false);//控制评论举报弹框是否显示\r\nconst type = ref(null);\r\nconst workId = ref(null);\r\n\r\nconst props = defineProps({\r\n    shareId : Number,\r\n    shareAuthorId : Number,\r\n    shareAuthorName : String,\r\n    shareTitle : String\r\n});\r\n\r\nconst currentPage = ref(1);\r\nconst router = useRouter();\r\nlet userId = localStorage.getItem(\"userId\");\r\nlet userName = localStorage.getItem(\"userName\");\r\nconst records = ref([]); //储存一级评论列表\r\nconst repliesMap = ref({}); // 存储每个一级评论ID对应的二级评论列表\r\nconst newUserAvater = ref();//存放用户自己的头像\r\nconst paginationStates = reactive({});//存储每个分页器\r\n\r\nconst initPaginationState = (recordId) => {\r\n  if (!paginationStates[recordId]) {\r\n    paginationStates[recordId] = {\r\n      currentPage: 1, //分页器中的当前页数\r\n      pageSize: 5, //分页器中的每页呈现数据条数\r\n      pageCount:0,//分页器中总页数\r\n      pagerCount: 5,//分页器最多显示几个页码\r\n    };\r\n  }\r\n};\r\n  \r\n//分页器中获取新的页码\r\nconst handleCurrentChange = (commentId, currentChange) => {\r\n  if (paginationStates[commentId]) {\r\n    paginationStates[commentId].currentPage = currentChange;\r\n    fetchReplies(commentId, paginationStates[commentId].currentPage, paginationStates[commentId].pageSize);\r\n  }\r\n};\r\n\r\n//向举报弹窗赋值的函数\r\nconst commentReport = (id,typeNum) =>{\r\n  workId.value = id;\r\n  type.value = typeNum;\r\n  dialogVisible2.value = true;\r\n}\r\n\r\n//点击用户头像进行跳转\r\nconst navigateToUserProfile = (user_id) => {\r\n  console.log('点击用户头像跳转');\r\n  if(user_id == userId){\r\n    // const routeLocation = router.resolve({ path: '/PersonalPage' });\r\n    // window.open(routeLocation.href, '_blank');\r\n    openUrl('/PersonalPage')\r\n  }else{\r\n    // const routeLocation = router.resolve({ path: `/OtherUserPersonalPage/${user_id}`});\r\n    // window.open(routeLocation.href, '_blank');\r\n    openUrl(`/OtherUserPersonalPage/${user_id}`)\r\n  }\r\n};\r\n\r\n// 添加一个锁状态\r\nlet isLoading = false;\r\nasync function load() {\r\n    if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\r\n    isLoading = true; // 开始加载数据，设置锁状态为true\r\n    try {\r\n      if(currentPage.value === 1){\r\n          currentPage.value++;\r\n      }\r\n      await fetchComments(props.shareId,currentPage.value);\r\n      currentPage.value++; // 只有在请求成功完成后才递增页码\r\n    } catch (error) {\r\n        console.error(error);\r\n        ElMessage.error('滚动时的未知错误');\r\n    } finally {\r\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\r\n    }\r\n}\r\n\r\n//获取一级评论并获取对应的二级评论（调用fetchReplies）\r\nconst fetchComments = async (shareId,currentPage) => {\r\n  try {\r\n    const response = await axios.get(\"/comment/list\", {\r\n      params: {\r\n        pageSize: 10,\r\n        currentPage: currentPage,\r\n        articleId: shareId,\r\n        type:1,\r\n      },\r\n    });\r\n    if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n      response.data.data.records.forEach(record => initPaginationState(record.id));\r\n      const updates = response.data.data.records.map(async (record) => {\r\n        const newAvatar = await getUsersAvatarFromCOS(record.userId);\r\n        const verified = await fetchUserInformation(record.userId);\r\n        return {\r\n          ...record,\r\n          verified,\r\n          showReported: false, // 控制评论的举报按钮是否显示\r\n          showMore: false, // 控制评论“more”图标是否显示\r\n          newAvatar,\r\n          showComments: false,\r\n        };\r\n      });\r\n      const updatedRecords = await Promise.all(updates);\r\n      records.value = [...records.value, ...updatedRecords];\r\n    }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n      // ElMessage.info('已加载所有数据');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      console.error( \"获取一级评论数据失败:\", response.data.msg || \"Unknown error\" );\r\n      ElMessage.error('获取分享评论失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求一级评论接口失败:\", error.message);\r\n    ElMessage.error('获取分享评论失败');\r\n  }\r\n};\r\n\r\n//根据一级评论id获取对应二级评论\r\nconst fetchReplies = async (commentId,currentPage,pageSize) => {\r\n  try {\r\n    const response = await axios.get(\"/comment/reply/list\", {\r\n      params: {\r\n        pageSize: pageSize,\r\n        currentPage: currentPage,\r\n        commentId: commentId,\r\n      },\r\n    });\r\n    if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n      repliesMap.value[commentId] = response.data.data.records;\r\n      if (paginationStates[commentId]) {\r\n        paginationStates[commentId].pageCount = Math.ceil(response.data.data.total / pageSize);\r\n      }\r\n      const updates =repliesMap.value[commentId].map(async (record) => {\r\n        const newAvatar = await getUsersAvatarFromCOS(record.userId);\r\n        const verified = await fetchUserInformation(record.userId);\r\n        return {\r\n          ...record,\r\n          verified,\r\n          showReported: false, // 控制评论的举报按钮是否显示\r\n          showMore: false, // 控制评论“more”图标是否显示\r\n          newAvatar\r\n        };\r\n      });\r\n      repliesMap.value[commentId] = await Promise.all(updates);\r\n    }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n      // ElMessage.info('已加载所有数据');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      console.error(\"获取二级评论接口失败\", response.data.msg || \"Unknown error\");\r\n      ElMessage.error('获取二级评论接口失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取二级评论接口失败\", error.message);\r\n    ElMessage.error('获取二级评论接口失败');\r\n  }\r\n};\r\n\r\n//点击一级评论的评论按钮，展开对应的二级评论\r\nconst handleSubComment =(recordId) =>{\r\n  const record = records.value.find(r => r.id === recordId);\r\n  if (record) {\r\n    record.showComments = !record.showComments;\r\n  }\r\n  if (record.showComments) {\r\n    // 初始化分页状态，如果尚未初始化\r\n    initPaginationState(recordId);\r\n    // 使用该一级评论的分页状态来获取二级评论\r\n    fetchReplies(recordId, paginationStates[recordId].currentPage, paginationStates[recordId].pageSize);\r\n  }\r\n}\r\n  \r\n//最顶部的评论框提交的相关接口\r\nconst levelOneCommentContent = ref(\"\");\r\nconst handlerlevelOneComment = async () => {\r\n  if (!levelOneCommentContent.value) {\r\n    ElMessage.error(\"评论内容不能为空!\");\r\n    return;\r\n  }\r\n  try {\r\n    const response = await axios.post(\"/comment/send\", {\r\n      authorId:props.shareAuthorId,\r\n      authorName:props.shareAuthorName,\r\n      worksId: props.shareId,\r\n      worksTitle:props.shareTitle,\r\n      userId: userId,\r\n      username: userName,\r\n      content: levelOneCommentContent.value,\r\n      type:1,\r\n    });\r\n    if (response.data.code === 1) {\r\n      const newReplyId = response.data.map.id;\r\n      ElMessage.success(\"评论成功!\");\r\n      const time = new Date();\r\n      // 假设并构造新的评论\r\n      const newComment = {\r\n        id: newReplyId, \r\n        username: userName, \r\n        newAvatar: newUserAvater.value,\r\n        content: levelOneCommentContent.value,\r\n        createTime: formatDateTime(time), // 使用当前时间作为评论时间\r\n        state:0, // 初始状态下，该评论未被点赞\r\n        likeCount: 0,\r\n        replyCount: 0,\r\n        shareId: props.shareId, \r\n      };\r\n      // 将新评论添加到records数组的开头\r\n      records.value.unshift(newComment);\r\n      // 清除评论输入框的内容\r\n      levelOneCommentContent.value = \"\";\r\n    } else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      ElMessage.error(\"评论失败: \" + (response.data.msg || \"未知错误\"));\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error(\"提交评论时出现错误: \" + error.message);\r\n  }\r\n};\r\n\r\n//一级评论框的内容获取\r\nconst replyCommentContent = ref(\"\");\r\nconst handleReplyToFirstLevelComment = async (comment) => {\r\n  if (!replyCommentContent.value) {\r\n    ElMessage.error(\"回复内容不能为空!\");\r\n    return;\r\n  }\r\n  try {\r\n    const response = await axios.post(\"/comment/reply/send\", {\r\n      userId: userId, // 假设用户ID\r\n      username: userName,\r\n      worksId: props.shareId,\r\n      worksTitle:props.shareTitle,\r\n      commentId: comment.id,\r\n      content: replyCommentContent.value,\r\n      type:1,\r\n    });\r\n    if (response.data.code === 1) {\r\n      ElMessage.success(\"回复成功!\");\r\n      // 折叠回复框\r\n      activeReplyBoxId.value = null;\r\n      replyCommentContent.value = \"\"; // 重置回复内容\r\n      comment.showComments = false;\r\n    } else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      ElMessage.error(\"回复失败: \" + (response.data.msg || \"未知错误\"));\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error(\"提交回复时出现错误: \" + error.message);\r\n  }\r\n};\r\n\r\n//一级评论的点赞接口，接受一个 record 作为参数\r\nasync function increaseCount(record) {\r\n  try {\r\n      const config = record.state === 0\r\n        ? {\r\n          method: 'put',\r\n          url: `/comment/like`,\r\n          params: { id: record.id , userId : record.userId}\r\n        }\r\n        : {\r\n          method: 'delete',\r\n          url: `/comment/unlike`,\r\n          params: { id: record.id , userId : record.userId}\r\n        };\r\n      const response = await axios(config);\r\n      if (response.data && response.data.code === 1) {\r\n        record.state  = record.state === 0 ? 1 : 0;\r\n        record.likeCount = response.data.data;\r\n        console.log('点赞/取消赞 成功');\r\n      } else if(response.data.code === 0 && response.data.msg){\r\n          ElMessage.error(response.data.msg.toString());\r\n      }else {\r\n          console.error(response.data.msg || 'Unknown error');\r\n      }\r\n  } catch (error) {\r\n      console.error('获取点赞状态失败', error.message);\r\n  }\r\n}\r\n\r\n  //二级评论的点赞接口，接受一个 reply 作为参数\r\n  async function increaseCount2(reply) {\r\n  try {\r\n      const config = reply.state === 0\r\n        ? {\r\n            method: 'put',\r\n            url: `comment/reply/like`,\r\n            params: { id: reply.id , userId : reply.userId}\r\n        }\r\n        : {\r\n            method: 'delete',\r\n            url: `/comment/reply/unlike`,\r\n            params: { id: reply.id , userId : reply.userId}\r\n        };\r\n      const response = await axios(config);\r\n      if (response.data && response.data.code === 1) {\r\n        reply.state  = reply.state === 0 ? 1 : 0;\r\n        reply.likeCount = response.data.data;\r\n        console.log('点赞/取消赞 成功');\r\n      } else if(response.data.code === 0 && response.data.msg){\r\n          ElMessage.error(response.data.msg.toString());\r\n      }else {\r\n          console.error(response.data.msg || 'Unknown error');\r\n      }\r\n  } catch (error) {\r\n      console.error('获取点赞状态失败', error.message);\r\n  }\r\n}\r\n\r\n//一级回复框的折叠（点击回复后出现）\r\nconst activeReplyBoxId = ref(null);\r\nconst toggleReplyBox = (id) => {\r\n  activeReplyBoxId.value = activeReplyBoxId.value === id ? null : id;\r\n};\r\n\r\n// 获取用户信息\r\nconst fetchUserInformation = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`/users/${userId}`);\r\n    if(response.data.code === 1){\r\n      return (response.data.data.verified);\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n      ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n      ElMessage.error('获取用户信息失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取用户信息失败\", error);\r\n    ElMessage.error('获取用户信息失败');\r\n  }\r\n};\r\n\r\n\r\nonMounted(async () => {\r\n  newUserAvater.value = await getUsersAvatarFromCOS(userId);\r\n  fetchComments(props.shareId,currentPage.value);\r\n})\r\n    \r\n</script>\r\n\r\n<style scoped>\r\n.bottom{\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 20px 0 20px 2rem;\r\n}\r\n::v-deep .el-pagination__rightwrapper .el-pagination__total{\r\n  display: none !important;;\r\n}\r\n.cnav {\r\n  display: flex;\r\n  width: 85%;\r\n  padding: 11px 12px 11px 12px;\r\n  align-items: flex-start;\r\n  gap: 32px;\r\n  flex-shrink: 0;\r\n  margin: 10px auto 20px;\r\n}\r\n.ctext1 {\r\n  font-size: 18px;\r\n}\r\n.ml-4 span {\r\n  display: inline-block;\r\n  text-align: center;\r\n  width: 50px;\r\n  height: 20px;\r\n  font-size: 14px;\r\n}\r\n.ml-4 .button_gap {\r\n  width: 10px;\r\n  height: 20px;\r\n  font-size: 14px;\r\n}\r\n\r\n.commont_body {\r\n  width: 85%;\r\n  height: auto;\r\n  margin: 0 auto;\r\n}\r\n\r\n.commentListCont {\r\n  margin: 10px auto;\r\n  width: 100%;\r\n  min-width: 650px;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n/* 头像 */\r\n.userPhoto_1,\r\n.userPhoto_2 {\r\n  border-radius: 100%;\r\n  overflow: hidden;\r\n  margin-right: 15px;\r\n}\r\n.userPhoto_1 {\r\n  width: 2.5rem;\r\n  height: 2.5rem;\r\n}\r\n.userPhoto_2 {\r\n  width: 2rem;\r\n  height: 2rem;\r\n}\r\n.navbar-avatar {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n/*一级,二级,评论输入*/\r\n.commentInput {\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.commentInput .input {\r\n  border-radius: 16px;\r\n  flex: 1;\r\n  position: relative;\r\n}\r\n.commentInput .input > button {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 4px;\r\n  border-radius: 20px;\r\n  height: 30px;\r\n  padding: 0 15px;\r\n  border: none;\r\n  box-sizing: border-box;\r\n  background-color: #9fa9ca;\r\n  cursor: pointer;\r\n}\r\n.commentInput .input > button:active {\r\n  box-shadow: 1px 1px 5px 5px #999 inset;\r\n}\r\n\r\n/* 评论列表 */\r\n.commentList {\r\n  flex: 1;\r\n  width: 100%;\r\n  padding: 0 5px;\r\n  margin-top: 15px;\r\n}\r\n.levelOneComment {\r\n  display: flex; \r\n  align-items: flex-start;\r\n  padding: 10px;\r\n  margin-bottom: 2rem;\r\n}\r\n.userComment {\r\n  flex: 1; \r\n}\r\n.userName {\r\n  color: #393939;\r\n    font-family: Microsoft YaHei;\r\n    font-size: 14px;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    line-height: normal;\r\n}\r\n.content {\r\n  margin: 1rem 0 1.5rem;\r\n  color: #000;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 16px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  max-width: 100%;\r\n  line-height: 1.6;\r\n}\r\n.operationBar {\r\n  margin-bottom: 3px;\r\n  width: 90%;\r\n  display: flex; \r\n  align-items: center; \r\n  position: relative;\r\n}\r\n::v-deep .el-icon{\r\n  position: absolute;\r\n  right: 0px;\r\n}\r\n.more{\r\n  cursor: pointer;\r\n  position: absolute;\r\n  right: 0px;\r\n}\r\n.hover-box{\r\n  position: absolute;\r\n  top: 20px ;\r\n  right: -20px;\r\n  width: 50px;\r\n  height: 26px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 5px; \r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n.report-hover{\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  color: #5d5d5d;\r\n}\r\n.commentDate {\r\n  color: #9b9b9b;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  margin-right: 70px;\r\n}\r\n.like-pic {\r\n  height: 16px;\r\n  width: 16px;\r\n  margin-right: 0.2rem;\r\n  cursor: pointer;\r\n}\r\n.like-count {\r\n  display: inline-block;\r\n  width: 45px;\r\n  height: 14px;\r\n  color: #2d2d2d;;\r\n  font-size: 14px;\r\n  line-height: 14px;\r\n  margin-right: 45px;\r\n}\r\n.commentBtn {\r\n  color: #005b82;\r\n  height: 21px;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  cursor: pointer; \r\n}\r\n.userinput2 {\r\n  width: 89%;\r\n  padding: 14px;\r\n  display: flex;\r\n  margin: 25px 0px 25px 63px;\r\n  align-items: center;\r\n}\r\n.userinput2 .input {\r\n  flex: 1;\r\n  position: relative;\r\n}\r\n.userinput2 .input > button {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  border-radius: 20px;\r\n  height: 30px;\r\n  padding: 0 15px;\r\n  border: none;\r\n  box-sizing: border-box;\r\n  background-color: #9fa9ca;\r\n}\r\n.userinput2 .input > button:active {\r\n  box-shadow: 1px 1px 5px 5px #999 inset;\r\n}\r\n.leveltwoComment {\r\n  display: flex;  \r\n  align-items: flex-start;  \r\n  margin-bottom: 10px;\r\n  margin-left: 65px;\r\n}\r\n.userComment2 {\r\n  flex: 1; \r\n}\r\n\r\n.userName2 {\r\n  color: #393939;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 12px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n}\r\n.content2 {\r\n  color: #000;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  margin: 1rem 0 1.5rem;\r\n  line-height: normal;\r\n}\r\n\r\n.operationBar2 {\r\n  margin-bottom: 3px;\r\n  width: 75%;\r\n  display: flex; \r\n  align-items: center; \r\n  position: relative;\r\n}\r\n.commentDate2 {\r\n  color: #9b9b9b;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 12px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  margin-right: 70px;\r\n}\r\n.like-count2 {\r\n  display: inline-block;\r\n  width: 45px;\r\n  height: 12px;\r\n  color: #2d2d2d;;\r\n  font-size: 12px;\r\n  line-height: 12px;\r\n  margin-right: 90px;\r\n}\r\n.like-pic2 {\r\n  width: 16px;\r\n  height: 16px;\r\n  cursor: pointer;\r\n  margin-right: 0.2rem;\r\n}\r\n.commentBtn2 {\r\n  color: #005B82;;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  cursor: pointer;  \r\n}\r\n.cursor-pointer {\r\n    cursor: pointer;\r\n}\r\n.cursor-pointer:hover {\r\n    color: #9fa9ca;  \r\n}\r\n  \r\n  </style>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}