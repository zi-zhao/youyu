{"ast":null,"code":"import axios from \"axios\";\n// import { ElMessage } from \"element-plus\";\n// axios公共配置\n// 创建一个 axios 实例\nconst instance = axios.create({\n  //  baseURL: \"https://mock.apifox.cn/m1/3107728-0-default\", // 设置基本的请求URL\n  baseURL: \"http://154.8.172.164:8081\",\n  // 设置基本的请求URL\n  // baseURL: \"http://localhost:8081\", // 设置基本的请求URL\n  //baseURL: \"http://127.0.0.1:4523/m1/3107728-0-default\"\n  timeout: 10000 // 设置请求超时时间\n});\n\n// 请求拦截器\ninstance.interceptors.request.use(config => {\n  // 获取token数据\n  const token = localStorage.getItem('token');\n  // 拼接token数据\n  if (token) {\n    config.headers.Authorization = ` ${token} `;\n  }\n  return config;\n}, e => Promise.reject(e));\n\n//响应拦截器\ninstance.interceptors.response.use(res => {\n  return res;\n}, e => {\n  // 统一错误提示\n  // ElMessage({\n  //   type: \"warning\",\n  //   message: e.response.data.message,\n  // });\n  return Promise.reject(e);\n});\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","e","Promise","reject","response","res"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\r\n// import { ElMessage } from \"element-plus\";\r\n// axios公共配置\r\n// 创建一个 axios 实例\r\nconst instance = axios.create({\r\n  //  baseURL: \"https://mock.apifox.cn/m1/3107728-0-default\", // 设置基本的请求URL\r\n     baseURL: \"http://154.8.172.164:8081\", // 设置基本的请求URL\r\n  // baseURL: \"http://localhost:8081\", // 设置基本的请求URL\r\n  //baseURL: \"http://127.0.0.1:4523/m1/3107728-0-default\"\r\n  timeout: 10000, // 设置请求超时时间\r\n});\r\n\r\n  // 请求拦截器\r\n  instance.interceptors.request.use(config => {\r\n    // 获取token数据\r\n    const token = localStorage.getItem('token');\r\n    // 拼接token数据\r\n    if(token){\r\n      config.headers.Authorization = ` ${token} `;\r\n    }\r\n    return config\r\n  },e => Promise.reject(e))\r\n\r\n  \r\n  //响应拦截器\r\n  instance.interceptors.response.use(\r\n    (res) => {return res},\r\n    (e) => {\r\n      // 统一错误提示\r\n      // ElMessage({\r\n      //   type: \"warning\",\r\n      //   message: e.response.data.message,\r\n      // });\r\n      return Promise.reject(e);\r\n    }\r\n  );\r\n\r\n  export default instance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5B;EACGC,OAAO,EAAE,2BAA2B;EAAE;EACzC;EACA;EACAC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEA;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC1C;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C;EACA,IAAGF,KAAK,EAAC;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,IAAGJ,KAAM,GAAE;EAC7C;EACA,OAAOD,MAAM;AACf,CAAC,EAACM,CAAC,IAAIC,OAAO,CAACC,MAAM,CAACF,CAAC,CAAC,CAAC;;AAGzB;AACAb,QAAQ,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC/BW,GAAG,IAAK;EAAC,OAAOA,GAAG;AAAA,CAAC,EACpBJ,CAAC,IAAK;EACL;EACA;EACA;EACA;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,CAAC,CAAC;AAC1B,CACF,CAAC;AAED,eAAeb,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}