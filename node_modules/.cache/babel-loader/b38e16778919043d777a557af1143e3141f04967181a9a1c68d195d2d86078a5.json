{"ast":null,"code":"import axios from '@/utils/request';\nimport { reactive, ref, onMounted, computed, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'TheInput',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const inputRef = ref(null); //可以通过 inputRef 访问到这个输入框的 DOM 元素(labelbox里的Input),然后通过 inputRef.value 来访问这个元素。\n    const store = useStore();\n    let showMessage = ref(false);\n    let label = reactive([]); //存放标签\n    let inputLabel = reactive([]); //存放文本框中已选择的标签\n    let inputText = ref(); //存放文本框中用户输入的内容\n    let tempInputText = reactive(''); //临时存放inputText.value的值\n\n    /**\r\n     * 初次从数据库获取标签label\r\n     * 页面加载时触发\r\n     */\n    onMounted(() => {\n      axios.get('/articlelabel').then(response => {\n        for (let i = 0; i < 16 && i < response.data.data.length; i++) {\n          label.push(response.data.data[i].name);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n\n    /**\r\n     * 用户点击任意二级板块后更新标签\r\n     */\n    const id = computed(() => {\n      return store.state.subBoardId;\n    });\n    watch(id, newValue => {\n      if (newValue !== null) {\n        label.splice(0, label.length);\n        inputLabel.splice(0, inputLabel.length);\n        store.commit('SELECT', inputLabel);\n        axios.get(`/articlelabel/${id.value}`).then(response => {\n          for (let i = 0; i < 20 && i < response.data.data.length; i++) {\n            label.push(response.data.data[i].name);\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n    });\n\n    /**\r\n     * 这个方法首先判断文本框中的已选标签是否超过三个，若超过则弹出1秒的警示信息\r\n     * 若未超过则将用户选择的标签放入文本框，同时将数据存入Vuex store\r\n     */\n    const change = context => {\n      if (inputLabel.includes(context)) {\n        ElMessage.error(\"标签已被选择！\");\n        return;\n      }\n      if (inputLabel.length >= 3) {\n        ElMessage.error(\"不能选择超过3个标签！\");\n        return;\n      }\n      inputLabel.push(context);\n      store.commit('SELECT', inputLabel);\n    };\n    /**\r\n     * 删除inputvalue数组里从索引为index参数开始的1个数据\r\n     * 当用户点击文本框中已选标签旁边的“x”时触发\r\n     */\n    const deValue = index => {\n      inputLabel.splice(index, 1);\n      store.commit('SELECT', inputLabel);\n    };\n\n    /**\r\n     * 将文本框中的内容存入Vuex store中\r\n     * 这个方法在用户按下回车键时触发\r\n     */\n    function addInputText() {\n      tempInputText = inputText.value;\n      store.commit('CUSTOM', tempInputText);\n      store.commit('SELECTSTATE', 1);\n    }\n    const __returned__ = {\n      inputRef,\n      store,\n      get showMessage() {\n        return showMessage;\n      },\n      set showMessage(v) {\n        showMessage = v;\n      },\n      get label() {\n        return label;\n      },\n      set label(v) {\n        label = v;\n      },\n      get inputLabel() {\n        return inputLabel;\n      },\n      set inputLabel(v) {\n        inputLabel = v;\n      },\n      get inputText() {\n        return inputText;\n      },\n      set inputText(v) {\n        inputText = v;\n      },\n      get tempInputText() {\n        return tempInputText;\n      },\n      set tempInputText(v) {\n        tempInputText = v;\n      },\n      id,\n      change,\n      deValue,\n      addInputText,\n      get axios() {\n        return axios;\n      },\n      reactive,\n      ref,\n      onMounted,\n      computed,\n      watch,\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["axios","reactive","ref","onMounted","computed","watch","useStore","ElMessage","inputRef","store","showMessage","label","inputLabel","inputText","tempInputText","get","then","response","i","data","length","push","name","catch","error","console","log","id","state","subBoardId","newValue","splice","commit","value","change","context","includes","deValue","index","addInputText"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/TheMain/components/TheInput.vue"],"sourcesContent":["<template>\r\n    <div class=\"large\">\r\n        <div class=\"input-container\">\r\n            <div v-if=\"showMessage\" class=\"custom-message-box\">\r\n                <div class=\"custom-message-content\">最多可选三个标签</div>\r\n            </div>\r\n            <div id=\"labelBox\">\r\n                <span v-for=\"(word, index) in inputLabel\" :key=\"index\" class=\"wordStyle\">\r\n                    {{ word }}\r\n                    <i @click=\"deValue(index)\">×</i>\r\n                </span>\r\n                <input\r\n                    ref=\"inputRef\"\r\n                    type=\"text\"\r\n                    v-model=\"inputText\"\r\n                    @keyup.enter=\"addInputText\"\r\n                    placeholder=\"自定义标签内容在此输入,回车搜索\"\r\n                />\r\n            </div>      \r\n        </div>\r\n        <!-- 放置标签 -->\r\n        <div class=\"l-container\">\r\n            <span \r\n                v-for=\"(context,index) in label\" :key=\"index\"\r\n                @click=\"change(context)\"\r\n            >\r\n            {{ context }}\r\n            </span>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\n    import axios from '@/utils/request';\r\n    import { reactive,ref,onMounted,computed,watch} from 'vue';\r\n    import { useStore } from 'vuex';\r\n    import { ElMessage } from 'element-plus';\r\n\r\n    const inputRef = ref(null);//可以通过 inputRef 访问到这个输入框的 DOM 元素(labelbox里的Input),然后通过 inputRef.value 来访问这个元素。\r\n    const store = useStore()\r\n    let showMessage = ref(false);\r\n    let label = reactive([])//存放标签\r\n    let inputLabel = reactive([])//存放文本框中已选择的标签\r\n    let inputText = ref()//存放文本框中用户输入的内容\r\n    let tempInputText = reactive('')//临时存放inputText.value的值\r\n\r\n    /**\r\n     * 初次从数据库获取标签label\r\n     * 页面加载时触发\r\n     */ \r\n    onMounted(() => {\r\n        axios.get('/articlelabel')\r\n        .then((response)=>{\r\n            for(let i = 0;i<16 && i<response.data.data.length;i++){\r\n                label.push(response.data.data[i].name)\r\n            }\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error);\r\n        })\r\n    })\r\n\r\n   /**\r\n    * 用户点击任意二级板块后更新标签\r\n    */\r\n    const id = computed(()=>{ return store.state.subBoardId })\r\n    watch(id,(newValue)=>{\r\n        if(newValue !== null){\r\n            label.splice(0,label.length)\r\n            inputLabel.splice(0,inputLabel.length)\r\n            store.commit('SELECT',inputLabel)\r\n            axios.get(`/articlelabel/${id.value}`)\r\n            .then((response)=>{\r\n                for(let i = 0;i<20&&i<response.data.data.length;i++){\r\n                    label.push(response.data.data[i].name)\r\n                }\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n            })\r\n        }\r\n    })\r\n\r\n\r\n\r\n    /**\r\n     * 这个方法首先判断文本框中的已选标签是否超过三个，若超过则弹出1秒的警示信息\r\n     * 若未超过则将用户选择的标签放入文本框，同时将数据存入Vuex store\r\n     */\r\n    const change = (context) => {\r\n        if (inputLabel.includes(context)) {\r\n            ElMessage.error( \"标签已被选择！\"); \r\n            return;\r\n        }\r\n        if (inputLabel.length >= 3) {\r\n            ElMessage.error( \"不能选择超过3个标签！\"); \r\n            return;\r\n        }\r\n        inputLabel.push(context); \r\n        store.commit('SELECT', inputLabel); \r\n    };\r\n    /**\r\n     * 删除inputvalue数组里从索引为index参数开始的1个数据\r\n     * 当用户点击文本框中已选标签旁边的“x”时触发\r\n     */\r\n     const deValue = (index) => {\r\n        inputLabel.splice(index, 1);\r\n        store.commit('SELECT',inputLabel);\r\n    }\r\n\r\n\r\n    /**\r\n     * 将文本框中的内容存入Vuex store中\r\n     * 这个方法在用户按下回车键时触发\r\n     */\r\n    function addInputText(){\r\n        tempInputText = inputText.value;\r\n        store.commit('CUSTOM',tempInputText);\r\n        store.commit('SELECTSTATE',1);\r\n    }\r\n\r\n  \r\n</script>\r\n\r\n\r\n<style scoped>\r\n.large{\r\n    text-align: center;\r\n    margin-top: 20px;\r\n}\r\n\r\n.custom-message-box {\r\n    position: absolute;\r\n    width: 165px;\r\n    height: 40px;\r\n    top: -55px; \r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    z-index: 1000; \r\n}\r\n\r\n.custom-message-content {\r\n    padding: 10px;\r\n    background-color: #d7d7da;\r\n    color: black;\r\n    border-radius: 10px;\r\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.input-container{\r\n    width: 620px;\r\n    height: 40px;\r\n    border-radius: 30px;\r\n    background-color: white;\r\n    margin: 0px auto 15px;\r\n    position: relative;\r\n}\r\n#labelBox{\r\n    height: 40px;\r\n    border-radius: 30px;\r\n    background-color: white;\r\n    display: flex;  /* 添加此行使得标签和输入框在线性布局中 */\r\n    align-items: center;  /* 垂直居中 */\r\n    padding: 0 10px;  /* 为容器添加一些内边距 */\r\n}\r\n/* 设置输入框下方标签样式 */\r\nspan{\r\n    display: inline-block;\r\n    margin: 5px;\r\n    padding: 2px 13px;\r\n    color: #000;\r\n    background-color: rgb(255 255 255 / 53%);\r\n    border-radius: 15px;\r\n    font-size: 14px;\r\n    line-height: 25px;\r\n    cursor: pointer;\r\n    user-select: none;\r\n}\r\n.wordStyle{\r\n    display: flex;\r\n    align-items: center;  /* 垂直居中 */\r\n    height: 25px;\r\n    background-color: #8187A5;\r\n    color: white;\r\n}\r\ninput{\r\n    flex-grow: 1;  /* 使输入框能够填充容器的剩余空间 */\r\n    margin-left: 5px;  /* 和前一个标签之间的间距 */\r\n    display: inline-block;\r\n    height: 40px;\r\n    padding: 0px 3px;\r\n    font-size: 17px;\r\n    border-radius: 30px;\r\n    border: black;\r\n}\r\ninput:focus{\r\n    outline: none;\r\n}\r\n.l-container{\r\n    width: 600px;\r\n    margin: auto;\r\n    overflow-wrap: break-word;\r\n}\r\n/* 对手机屏幕和小尺寸屏幕的样式调整 */\r\n@media (max-width: 768px) {\r\n    .large {\r\n        margin-top: 50px;\r\n    }\r\n\r\n    .input-container {\r\n        width: 90%; /* 在小屏幕上使用更大的比例 */\r\n    }\r\n\r\n    #labelBox {\r\n        padding: 0 5px; /* 减小内边距 */\r\n    }\r\n\r\n    .l-container {\r\n        width: 90%; /* 在小屏幕上使用更大的比例 */\r\n    }\r\n\r\n    .custom-message-box {\r\n        width: auto; /* 自动宽度 */\r\n        top: -45px; /* 调整位置 */\r\n        font-size: 14px; /* 调整字体大小 */\r\n    }\r\n\r\n    input {\r\n        font-size: 15px; /* 在小屏幕上减小字体大小 */\r\n    }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}