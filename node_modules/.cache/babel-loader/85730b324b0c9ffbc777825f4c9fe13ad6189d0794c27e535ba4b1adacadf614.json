{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport axios from '@/utils/request';\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\nimport { useStore } from 'vuex';\nimport { useRouter } from \"vue-router\";\nimport { convertDateFormat } from '@/utils/timeFormat';\nimport { openUrl } from '@/utils/routeJudge';\nexport default {\n  __name: 'ConsultEvaluation',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const store = useStore();\n    const answererEvaluate = ref();\n    const answererInfo = ref({});\n    const answererId = store.state.pathUserId;\n\n    //判断评价展示的星星数量\n    const getStarCount = grade => {\n      const result = Math.floor(grade);\n      return result;\n    };\n\n    //获取答主评价信息\n    async function getAnswererEvaluate() {\n      try {\n        const response = await axios.get(`/answer/comment`, {\n          params: {\n            answererId: answererId,\n            page: 1,\n            pageSize: 5\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          // 使用 map() 并行处理每个记录以获取头像和转换创建时间\n          const updatesAsync = response.data.data.records.map(async record => {\n            const newAvatar = await getUsersAvatarFromCOS(record.askerId);\n            const createTime = convertDateFormat(record.createTime);\n            const verified = await fetchUserInformation(record.askerId);\n            return {\n              ...record,\n              newAvatar,\n              createTime,\n              verified\n            };\n          });\n          const updatedRecords = await Promise.all(updatesAsync);\n          answererEvaluate.value = updatedRecords;\n          // ElMessage.success('获取答主评价信息成功');\n        } else if (response.data.code === 1 && response.data.data.records.length == 0) {\n          // ElMessage.success('获取答主评价信息成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('获取答主评价信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取答主评价信息失败\", error);\n        ElMessage.error('获取答主评价信息失败');\n      }\n    }\n\n    //获取答主具体信息\n    async function getAnswererInfo() {\n      try {\n        const response = await axios.get(`/answer/${answererId}`);\n        if (response.data.code === 1) {\n          answererInfo.value = response.data.data;\n          // ElMessage.success('获取答主具体信息成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取答主具体信息失败\");\n          ElMessage.error('获取答主具体信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取答主具体信息失败\", error);\n        ElMessage.error('获取答主具体信息失败');\n      }\n    }\n\n    //跳转到提问界面\n    const goToQuestion = () => {\n      // const routeLocation = router.resolve({ path: `/GoQuestion/${answererId}`});\n      // window.open(routeLocation.href, '_blank');\n      openUrl(`/GoQuestion/${answererId}`);\n    };\n\n    // 获取用户信息\n    const fetchUserInformation = async userId => {\n      try {\n        const response = await axios.get(`/users/${userId}`);\n        if (response.data.code === 1) {\n          return response.data.data.verified;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('获取用户信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户信息失败\", error);\n        ElMessage.error('获取用户信息失败');\n      }\n    };\n    onMounted(() => {\n      getAnswererEvaluate();\n      getAnswererInfo();\n    });\n    const __returned__ = {\n      router,\n      store,\n      answererEvaluate,\n      answererInfo,\n      answererId,\n      getStarCount,\n      getAnswererEvaluate,\n      getAnswererInfo,\n      goToQuestion,\n      fetchUserInformation,\n      ref,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get axios() {\n        return axios;\n      },\n      get getUsersAvatarFromCOS() {\n        return getUsersAvatarFromCOS;\n      },\n      get useStore() {\n        return useStore;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get convertDateFormat() {\n        return convertDateFormat;\n      },\n      get openUrl() {\n        return openUrl;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","ElMessage","axios","getUsersAvatarFromCOS","useStore","useRouter","convertDateFormat","openUrl","router","store","answererEvaluate","answererInfo","answererId","state","pathUserId","getStarCount","grade","result","Math","floor","getAnswererEvaluate","response","get","params","page","pageSize","data","code","records","length","updatesAsync","map","record","newAvatar","askerId","createTime","verified","fetchUserInformation","updatedRecords","Promise","all","value","msg","error","toString","console","getAnswererInfo","goToQuestion","userId"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/QACenter/AnswererBrief/ConsultEvaluation.vue"],"sourcesContent":["<template>\r\n    <div style=\"height: 20px; background-color: #F8F8F8;\"></div>\r\n    <div class=\"bgc_box\">\r\n        <div class=\"large_box\">\r\n            <!-- 咨询服务 -->\r\n            <div class=\"consult_service\">\r\n                <div class=\"title\">\r\n                    <span>咨询服务</span>\r\n                    <img src=\"@/assets/QACenter/BriefRight.svg\" alt=\"\">\r\n                </div>\r\n                <div class=\"main\">\r\n                    <div class=\"left\">\r\n                        <span style=\"font-weight: 700;\" class=\"phone-text\">图文咨询</span>\r\n                        <span style=\"color: #7E7E7E;\" class=\"phone-text\">每次咨询可提问{{answererInfo.number}}条</span>\r\n                        <!-- <span style=\"color: #4A99F6;\" class=\"phone-text\">推荐：{{answererInfo.priceLow}}-{{answererInfo.priceHigh}}鱼饵</span> -->\r\n                    </div>\r\n                    <div class=\"right\" @click=\"goToQuestion\">\r\n                        立即咨询\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- 置顶评价 -->\r\n            <div class=\"evaluation\">\r\n                <div class=\"title\">\r\n                    <span>置顶评价</span>\r\n                    <img src=\"@/assets/QACenter/BriefRight.svg\" alt=\"\">\r\n                </div>\r\n                <div class=\"bottom \">\r\n                    <div v-for=\"(source,index) in answererEvaluate\" :key=\"index\" class=\"item\">\r\n                        <!-- 左边两项 -->\r\n                        <div class=\"left2\">\r\n                            <!-- 用户头像 -->\r\n                            <div class=\"authorpic\">\r\n                                <img :src=\"source.newAvatar\" alt=\"\">\r\n                            </div>\r\n                            <!-- 用户评价 -->\r\n                            <div class=\"eva\">\r\n                                <div style=\"margin-bottom: 10px;\">\r\n                                    <div style=\"display: flex;align-items: center;gap: 3px;\">\r\n                                        <span style=\"margin-right: 5px;\">{{ source.askerUsername }}</span>\r\n                                        <img v-if=\"source.verified === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;\" alt=\"\">\r\n                                    </div>\r\n                                    <span style=\"color: #BCBCBC;\">的评价:</span>\r\n                                </div>\r\n                                <div class=\"gray_box\">\r\n                                    {{ source.content }}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <!-- 右边两项 -->\r\n                        <div class=\"right2\">\r\n                            <!-- <span style=\"color: #3F87E1;\">查看问题</span> -->\r\n                            <div style=\"display: flex; flex-direction: column; align-items: flex-end;gap: 5px;\">\r\n                                <div style=\"display: flex;align-items: center;\">\r\n                                    <span style=\"font-size: 12px;\">{{ source.score }}</span>\r\n                                    <img v-for= \"n in getStarCount(source.grade) \" :key=\"n\" src=\"@/assets/QACenter/ScoreStar.svg\" alt=\"\">\r\n                                </div>\r\n                                <span style=\"color: #7E7E7E;\">{{ source.createTime }}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <el-empty \r\n                        v-if=\"!answererEvaluate || answererEvaluate.length === 0\" \r\n                        :image-size=\"200\" \r\n                        description=\"暂时还没有置顶评价呢！\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref,onMounted } from 'vue'\r\nimport { ElMessage } from 'element-plus';\r\nimport axios from '@/utils/request';\r\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from \"vue-router\";\r\nimport { convertDateFormat } from '@/utils/timeFormat'; \r\nimport { openUrl } from '@/utils/routeJudge'\r\n\r\nconst router = useRouter();\r\nconst store = useStore();\r\nconst answererEvaluate = ref();\r\nconst answererInfo = ref({});\r\nconst answererId = store.state.pathUserId;\r\n\r\n//判断评价展示的星星数量\r\nconst getStarCount = (grade) =>{\r\n    const result = Math.floor(grade);\r\n    return result\r\n}\r\n\r\n//获取答主评价信息\r\nasync function getAnswererEvaluate() {\r\n  try{\r\n    const response = await axios.get(`/answer/comment`, {\r\n        params: {\r\n            answererId:answererId,\r\n            page:1,\r\n            pageSize:5\r\n        }\r\n    });\r\n    if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n        // 使用 map() 并行处理每个记录以获取头像和转换创建时间\r\n        const updatesAsync = response.data.data.records.map(async (record) => {\r\n            const newAvatar = await getUsersAvatarFromCOS(record.askerId);\r\n            const createTime = convertDateFormat(record.createTime);\r\n            const verified = await fetchUserInformation(record.askerId);\r\n            return {\r\n                ...record,\r\n                newAvatar,\r\n                createTime,\r\n                verified,\r\n            };\r\n        });\r\n        const updatedRecords = await Promise.all(updatesAsync);\r\n        answererEvaluate.value = updatedRecords;\r\n        // ElMessage.success('获取答主评价信息成功');\r\n    }else if(response.data.code === 1 && response.data.data.records.length == 0){\r\n        // ElMessage.success('获取答主评价信息成功');\r\n    } else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n        ElMessage.error('获取答主评价信息失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取答主评价信息失败\", error); \r\n    ElMessage.error('获取答主评价信息失败');\r\n  }\r\n}\r\n\r\n//获取答主具体信息\r\nasync function getAnswererInfo() {\r\n  try{\r\n    const response = await axios.get(`/answer/${answererId}`)\r\n    if(response.data.code === 1){\r\n        answererInfo.value = response.data.data;\r\n        // ElMessage.success('获取答主具体信息成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取答主具体信息失败\");\r\n        ElMessage.error('获取答主具体信息失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取答主具体信息失败\", error); \r\n    ElMessage.error('获取答主具体信息失败');\r\n  }\r\n}\r\n\r\n //跳转到提问界面\r\n const goToQuestion = () =>{\r\n    // const routeLocation = router.resolve({ path: `/GoQuestion/${answererId}`});\r\n    // window.open(routeLocation.href, '_blank');\r\n    openUrl(`/GoQuestion/${answererId}`)\r\n  }\r\n\r\n  // 获取用户信息\r\nconst fetchUserInformation = async (userId) => {\r\n    try {\r\n        const response = await axios.get(`/users/${userId}`);\r\n        if(response.data.code === 1){\r\n            return (response.data.data.verified);\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            ElMessage.error('获取用户信息失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取用户信息失败\", error);\r\n        ElMessage.error('获取用户信息失败');\r\n    }\r\n};\r\n\r\n\r\nonMounted(() => {\r\n    getAnswererEvaluate();\r\n    getAnswererInfo();\r\n});\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.bgc_box{\r\n    background: #F8F8F8;\r\n}\r\n.large_box{\r\n    width: 1100px;\r\n    margin: 0px auto;\r\n}\r\n\r\n.consult_service{\r\n    width: 1000px;\r\n    height: 175px;\r\n    padding: 5px 50px;\r\n    border-radius: 16px;\r\n    background: #FFF;\r\n    margin-bottom: 20px;\r\n}\r\n.title{\r\n    padding: 12px 0px;\r\n    border-bottom: 1px solid  #EEE;;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 20px;\r\n}\r\n.title span{\r\n    font-size: 20px;\r\n}\r\n.main{\r\n    width: 900px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin: 25px auto;\r\n}\r\n.left{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n}\r\n.right{\r\n    width: 65px;\r\n    height: 20px;\r\n    padding: 8px 12px;\r\n    border-radius: 16px;\r\n    background: #9FA9CA;\r\n    color: #FFF;\r\n    cursor: pointer;\r\n}\r\n.evaluation{\r\n    width: 1000px;\r\n    height: 580px;\r\n    padding: 5px 50px;\r\n    background: #FFF;\r\n    border-radius: 16px;\r\n}\r\n.bottom{\r\n    height: 500px;\r\n    padding: 20px 0px;\r\n    overflow: auto;\r\n    width: 105%;\r\n}\r\n.item{\r\n    width: 1000px;\r\n    padding: 20px 0px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.left2{\r\n    display: flex;\r\n    align-items: flex-start;\r\n    gap: 15px;\r\n}\r\n.authorpic img {\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 50%;\r\n    margin-bottom: 35px;\r\n    cursor: pointer;\r\n}\r\n\r\n.gray_box{\r\n    width: 580px;\r\n    /* height: 76px; */\r\n    padding: 12px;\r\n    background-color: #f6f6f6;\r\n    line-height: 1.6;\r\n    border-radius: 8px;\r\n}\r\n.right2{\r\n    display: flex;\r\n    align-items: flex-end;\r\n    height: 131px;\r\n    gap: 80px;\r\n    margin-right: 20px;\r\n}\r\n/* 调整滚动条宽度和颜色 */\r\n::-webkit-scrollbar {\r\n    width: 6px; /* 增加纵向滚动条的宽度 */\r\n    height: 3px; /* 增加横向滚动条的高度 */\r\n    background: transparent;\r\n}\r\n\r\n/* 定义滚动条轨道，设置为透明 */\r\n::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 8px rgba(0, 0, 0, 0); /* 内阴影 */\r\n    background: transparent; /* 将轨道背景设置为透明 */\r\n}\r\n\r\n/* 定义滑块，设置为浅灰色并增加内阴影 */\r\n::-webkit-scrollbar-thumb {\r\n    box-shadow: inset 0 0 8px rgba(145, 145, 145, 0.3); /* 添加淡灰色内阴影 */\r\n    background-color: #e2e2e2; /* 滑块的颜色改为浅灰色 */\r\n    border-radius: 10px; /* 保持圆角不变 */\r\n}\r\n/* 当鼠标悬停在滚动条滑块上时改变滑块的颜色 */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #c8c8c8;\r\n}\r\n@media (max-width: 768px) {\r\n    .large_box{\r\n        width: 100%;\r\n    }\r\n    .consult_service{\r\n        width: 90%;\r\n        padding: 5px 5%;\r\n    }\r\n    .main{\r\n        width: 100%;\r\n    }\r\n    .title span{\r\n        font-size: 1rem;\r\n    }\r\n    .left{\r\n        width: 75%;\r\n    }\r\n    .phone-text{\r\n        font-size: 0.8rem;\r\n    }\r\n    .right{\r\n        width: 68px;\r\n        text-align: center;\r\n        padding: 4px 8px;\r\n        font-size: 0.8rem;\r\n    }\r\n    .evaluation{\r\n        width: 90%;\r\n        height: auto;\r\n        padding: 5px 5%;\r\n    }\r\n    .bottom{\r\n        height: auto;\r\n        width: 100%;\r\n    }\r\n    .item{\r\n        width: 100%;\r\n        flex-direction: column;\r\n    }\r\n    .left2{\r\n        width: 100%;\r\n    }\r\n    .authorpic img{\r\n        width: 2rem;\r\n        height: 2rem;\r\n    }\r\n    .eva{\r\n        width: 100%;\r\n    }\r\n    .gray_box{\r\n        width: 90%;\r\n    }\r\n    .right2{\r\n        width: 100%;\r\n        justify-content: flex-end;\r\n        height: auto;\r\n        margin-right: 0px;\r\n        margin-top: 0.6rem;\r\n    }\r\n    .right2 span:last-child{\r\n        font-size: 0.8rem;\r\n    }\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}