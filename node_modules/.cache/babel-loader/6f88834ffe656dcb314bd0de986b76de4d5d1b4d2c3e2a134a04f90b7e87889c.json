{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { ElMessageBox, ElMessage } from 'element-plus';\nimport { convertDateFormat } from '@/utils/timeFormat';\nimport axios from '@/utils/request';\nimport { fetchShareCoverage } from '@/utils/fileService';\nimport TheHeader from '../components/TheHeader.vue';\nimport { useRouter } from 'vue-router';\nimport ShareDialog from '../ShareShow/components/ShareDialog.vue';\nimport { getUsersAvatarFromCOS, getArticleCoverageFromCOS } from '@/utils/cosService';\nimport { openUrl } from '@/utils/routeJudge';\nexport default {\n  __name: 'HistoryRecord',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n\n    // import { Search } from '@element-plus/icons-vue'\n    const dialogShowVisible = ref(false); //控制分享展示弹框是否展示\n    const router = useRouter();\n    const currentPage = ref(1);\n    const viewhistoryData = ref([]);\n    const id = ref(null);\n    const deleteRecordAll = async () => {\n      try {\n        await ElMessageBox.confirm('确定要删除全部记录吗？', 'Warning', {\n          confirmButtonText: '确认删除',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        deletedAllHistoryData();\n      } catch {\n        console.log('关闭弹框');\n      }\n    };\n    const deleteRecord = async item => {\n      try {\n        await ElMessageBox.confirm('确定要删除记录吗？', 'Warning', {\n          confirmButtonText: '确认删除',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        if (item.type === 0) {\n          deletedHistoryData(item.id);\n        } else if (item.type === 1) {\n          deletedHistoryData(item.id);\n        }\n      } catch {\n        console.log('关闭弹框');\n      }\n    };\n    async function deletedHistoryData(id) {\n      try {\n        const response = await axios.delete(`/viewhistory/${id}`);\n        if (response.data.code === 1) {\n          ElMessage.success('删除成功');\n          viewhistoryData.value = [];\n          currentPage.value = 1;\n          getViewhistory(currentPage.value);\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"删除该条历史记录失败\");\n          ElMessage.error('删除该条历史记录失败');\n        }\n      } catch (error) {\n        console.error(\"删除该条历史记录失败\", error);\n        ElMessage.error('删除该条历史记录失败');\n      }\n    }\n    async function deletedAllHistoryData() {\n      try {\n        const response = await axios.delete('/viewhistory');\n        if (response.data.code === 1) {\n          ElMessage.success('删除成功');\n          viewhistoryData.value = [];\n          currentPage.value = 1;\n          getViewhistory(currentPage.value);\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"删除历史记录失败\");\n          ElMessage.error('删除历史记录失败');\n        }\n      } catch (error) {\n        console.error(\"删除历史记录失败\", error);\n        ElMessage.error('删除历史记录失败');\n      }\n    }\n\n    // 添加一个锁状态\n    let isLoading = false;\n    async function load() {\n      if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\n      isLoading = true; // 开始加载数据，设置锁状态为true\n      try {\n        if (currentPage.value === 1) {\n          currentPage.value++;\n        }\n        await getViewhistory(currentPage.value);\n        currentPage.value++; // 只有在请求成功完成后才递增页码\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('滚动时的未知错误');\n      } finally {\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\n      }\n    }\n\n    //获取用户的历史记录\n    async function getViewhistory(currentPage) {\n      try {\n        const response = await axios.get('/viewhistory', {\n          params: {\n            page: currentPage,\n            pazeSize: 10\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          const updates = response.data.data.records.map(async record => {\n            let newCoverPicture;\n            if (record.type === 0) {\n              newCoverPicture = await getArticleCoverageFromCOS(record.articleId);\n            } else if (record.type === 1) {\n              newCoverPicture = await fetchShareCoverage(record.shareId);\n            }\n            const newAvater = await getUsersAvatarFromCOS(record.authorId);\n            const createTime = convertDateFormat(record.createTime);\n            return {\n              ...record,\n              newCoverPicture,\n              newAvater,\n              createTime\n            };\n          });\n          const updatedRecords = await Promise.all(updates);\n          viewhistoryData.value = [...viewhistoryData.value, ...updatedRecords];\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取用户的历史记录失败\");\n        }\n      } catch (error) {\n        console.error(\"请求用户的历史记录失败\", error);\n      }\n    }\n    onMounted(() => {\n      getViewhistory(currentPage.value);\n    });\n    const goToDetail = item => {\n      if (item.type === 0) {\n        //   const routeLocation = router.resolve({ path: `/TheArticle/${item.articleId}`});\n        //   window.open(routeLocation.href, '_blank');\n        openUrl(`/TheArticle/${item.articleId}`);\n      } else if (item.type === 1) {\n        //点击打开分享展示弹框\n        id.value = item.ShareId;\n        dialogShowVisible.value = true;\n      }\n    };\n    const __returned__ = {\n      dialogShowVisible,\n      router,\n      currentPage,\n      viewhistoryData,\n      id,\n      deleteRecordAll,\n      deleteRecord,\n      deletedHistoryData,\n      deletedAllHistoryData,\n      get isLoading() {\n        return isLoading;\n      },\n      set isLoading(v) {\n        isLoading = v;\n      },\n      load,\n      getViewhistory,\n      goToDetail,\n      ref,\n      onMounted,\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get convertDateFormat() {\n        return convertDateFormat;\n      },\n      get axios() {\n        return axios;\n      },\n      get fetchShareCoverage() {\n        return fetchShareCoverage;\n      },\n      TheHeader,\n      get useRouter() {\n        return useRouter;\n      },\n      ShareDialog,\n      get getUsersAvatarFromCOS() {\n        return getUsersAvatarFromCOS;\n      },\n      get getArticleCoverageFromCOS() {\n        return getArticleCoverageFromCOS;\n      },\n      get openUrl() {\n        return openUrl;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","ElMessageBox","ElMessage","convertDateFormat","axios","fetchShareCoverage","TheHeader","useRouter","ShareDialog","getUsersAvatarFromCOS","getArticleCoverageFromCOS","openUrl","dialogShowVisible","router","currentPage","viewhistoryData","id","deleteRecordAll","confirm","confirmButtonText","cancelButtonText","type","deletedAllHistoryData","console","log","deleteRecord","item","deletedHistoryData","response","delete","data","code","success","value","getViewhistory","msg","error","toString","isLoading","load","get","params","page","pazeSize","records","length","updates","map","record","newCoverPicture","articleId","shareId","newAvater","authorId","createTime","updatedRecords","Promise","all","goToDetail","ShareId"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/HistoryRecord/HistoryRecord.vue"],"sourcesContent":["<template>\r\n  <TheHeader></TheHeader>\r\n  <div class=\"top-box\">\r\n      <div class=\"top1\">\r\n          <div class=\"left\">\r\n              <img src=\"@/assets/HistoryRecord/RecordCircle.svg\" alt=\"\">\r\n              <span>历史记录</span>\r\n          </div>\r\n          <div class=\"right\">\r\n              <!-- <el-input\r\n                  v-model=\"input1\"\r\n                  class=\"w-50 m-2\"\r\n                  placeholder=\"输入关键词…\"\r\n                  :prefix-icon=\"Search\"\r\n                  style=\"width: 200px;\"\r\n              />\r\n              <div style=\"display: flex;flex-wrap: wrap;\">\r\n                  <el-date-picker\r\n                      v-model=\"value1\"\r\n                      type=\"date\"\r\n                      placeholder=\"选择您想查找的日期\"\r\n                      :size=\"size\"\r\n                      style=\"width: 200px;\"\r\n                  />\r\n              </div> -->\r\n              <div @click=\"deleteRecordAll\" class=\"empty-btn\"><span>清空历史记录</span></div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n  <div class=\"content-box\" v-infinite-scroll=\"load\" infinite-scroll-distance=\"100\" infinite-scroll-immediate=\"false\">\r\n      <el-timeline>\r\n          <el-timeline-item v-for=\"(item , index) in viewhistoryData\" :key=\"index\" :timestamp=\"item.createTime\" placement=\"top\">\r\n              <el-card  class=\"item-box\" >\r\n                  <div v-if=\"item.type === 0 \" class=\"pic\" @click=\"goToDetail(item)\">\r\n                      <img :src='item.newCoverPicture'  alt=\" \" >\r\n                  </div>\r\n                  <div  v-if=\"item.type === 1 \" class=\"pic\" @click=\"goToDetail(item)\">\r\n                      <img :src='image' v-for= \"(image, imgIndex) in item.newCoverPicture.slice(0, 1)\"  :key=\"imgIndex\" alt=\"Share Image\" >\r\n                  </div>\r\n                  <div class=\"right-content\" @click=\"goToDetail(item)\">\r\n                      <div class=\"content-title\">\r\n                          <span style=\"font-size: 16px;font-weight: 700;\">{{ item.title }}</span>\r\n                          <div v-if=\"item.type === 0\" class=\"tag tag1\" >文章</div>\r\n                          <div v-if=\"item.type === 1\" class=\"tag tag2 \">分享</div>\r\n                      </div>\r\n                      <div style=\"height: 60px;\">\r\n                          <span v-if=\"item.type === 0\">{{ item.summary }}</span>\r\n                          <span v-if=\"item.type === 1\">{{ item.content }}</span>\r\n                      </div>\r\n                      <div class=\"user-info\">\r\n                          <img :src=\"item.newAvater\" alt=\"\">\r\n                          <span>{{ item.authorUsername }}</span>\r\n                      </div>\r\n                  </div>\r\n                  <div @click=\"deleteRecord(item)\" class=\"btn-delete\">\r\n                      <img src=\"@/assets/HistoryRecord/DeleteBtn.svg\" alt=\"\" style=\"width: 20px ; height: 20px;cursor: pointer;\">\r\n                  </div>\r\n              </el-card>\r\n          </el-timeline-item>\r\n      </el-timeline>\r\n      <el-empty \r\n        v-if=\"!viewhistoryData || viewhistoryData.length === 0\" \r\n        description=\"您还没有历史记录呢，快去逛逛吧！\" \r\n        :image-size=\"200\" \r\n      />\r\n      <div v-if=\"dialogShowVisible\">\r\n          <ShareDialog v-model=\"dialogShowVisible\" :Id = id ></ShareDialog>\r\n      </div>\r\n  </div>\r\n</template>\r\n  \r\n<script setup>\r\n// import { Search } from '@element-plus/icons-vue'\r\nimport { ref,onMounted } from 'vue'\r\nimport { ElMessageBox, ElMessage } from 'element-plus';\r\nimport { convertDateFormat} from '@/utils/timeFormat'; \r\nimport axios from '@/utils/request';\r\nimport { fetchShareCoverage} from '@/utils/fileService'; \r\nimport TheHeader from '../components/TheHeader.vue';\r\nimport { useRouter } from 'vue-router';\r\nimport ShareDialog from '../ShareShow/components/ShareDialog.vue';\r\nimport { getUsersAvatarFromCOS,getArticleCoverageFromCOS } from '@/utils/cosService';\r\nimport { openUrl } from '@/utils/routeJudge'\r\n\r\nconst dialogShowVisible = ref(false);//控制分享展示弹框是否展示\r\nconst router = useRouter();\r\nconst currentPage = ref(1);\r\nconst viewhistoryData = ref([]);\r\nconst id = ref(null);\r\n\r\nconst deleteRecordAll = async () => {\r\n  try {\r\n    await ElMessageBox.confirm(\r\n      '确定要删除全部记录吗？',\r\n      'Warning',\r\n      {\r\n        confirmButtonText: '确认删除',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }\r\n    );\r\n    deletedAllHistoryData();\r\n  } catch {\r\n    console.log('关闭弹框')\r\n  }\r\n}\r\n\r\nconst deleteRecord = async (item) => {\r\n  try {\r\n    await ElMessageBox.confirm(\r\n      '确定要删除记录吗？',\r\n      'Warning',\r\n      {\r\n        confirmButtonText: '确认删除',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }\r\n    );\r\n    if(item.type === 0){\r\n        deletedHistoryData(item.id);\r\n    }else if(item.type === 1){\r\n        deletedHistoryData(item.id);\r\n    }\r\n  } catch {\r\n    console.log('关闭弹框')\r\n  }\r\n}\r\n\r\nasync function deletedHistoryData(id){\r\n    try {\r\n        const response = await axios.delete(`/viewhistory/${id}`);\r\n        if(response.data.code === 1){\r\n            ElMessage.success('删除成功');\r\n            viewhistoryData.value =[];\r\n            currentPage.value = 1;\r\n            getViewhistory(currentPage.value);\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            console.error(\"删除该条历史记录失败\");\r\n            ElMessage.error('删除该条历史记录失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"删除该条历史记录失败\", error); \r\n        ElMessage.error('删除该条历史记录失败');\r\n    }\r\n}\r\n\r\n\r\nasync function deletedAllHistoryData(){\r\n    try {\r\n        const response = await axios.delete('/viewhistory');\r\n        if(response.data.code === 1){\r\n            ElMessage.success('删除成功');\r\n            viewhistoryData.value =[];\r\n            currentPage.value = 1;\r\n            getViewhistory(currentPage.value);\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            console.error(\"删除历史记录失败\");\r\n            ElMessage.error('删除历史记录失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"删除历史记录失败\", error); \r\n        ElMessage.error('删除历史记录失败');\r\n    }\r\n}\r\n\r\n// 添加一个锁状态\r\nlet isLoading = false;\r\nasync function load() {\r\n    if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\r\n    isLoading = true; // 开始加载数据，设置锁状态为true\r\n    try {\r\n        if(currentPage.value === 1){\r\n            currentPage.value++;\r\n        }\r\n        await getViewhistory(currentPage.value);\r\n        currentPage.value++; // 只有在请求成功完成后才递增页码\r\n    } catch (error) {\r\n        console.error(error);\r\n        ElMessage.error('滚动时的未知错误');\r\n    } finally {\r\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\r\n    }\r\n}\r\n\r\n//获取用户的历史记录\r\nasync function getViewhistory(currentPage) {\r\n  try {\r\n    const response = await axios.get('/viewhistory', {\r\n        params: {\r\n            page:currentPage,\r\n            pazeSize:10,\r\n        }\r\n    });\r\n    if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n        const updates = response.data.data.records.map(async (record) => {\r\n            let newCoverPicture;\r\n            if (record.type === 0) {\r\n                newCoverPicture = await getArticleCoverageFromCOS(record.articleId);\r\n            } else if (record.type === 1) {\r\n                newCoverPicture = await fetchShareCoverage(record.shareId);\r\n            }\r\n            const newAvater = await getUsersAvatarFromCOS(record.authorId);\r\n            const createTime = convertDateFormat(record.createTime);\r\n            return {\r\n                ...record,\r\n                newCoverPicture,\r\n                newAvater,\r\n                createTime\r\n            };\r\n        });\r\n        const updatedRecords = await Promise.all(updates);\r\n        viewhistoryData.value = [...viewhistoryData.value, ...updatedRecords];\r\n    }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n        // ElMessage.info('已加载所有数据');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取用户的历史记录失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求用户的历史记录失败\", error); \r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n    getViewhistory(currentPage.value);\r\n})\r\n\r\nconst goToDetail = (item) =>{\r\n  if(item.type === 0){\r\n    //   const routeLocation = router.resolve({ path: `/TheArticle/${item.articleId}`});\r\n    //   window.open(routeLocation.href, '_blank');\r\n      openUrl(`/TheArticle/${item.articleId}`)\r\n  }\r\n  else if(item.type === 1){\r\n      //点击打开分享展示弹框\r\n      id.value = item.ShareId;\r\n      dialogShowVisible.value = true\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.top-box{\r\n    width: 1100px;\r\n    height: 85px;\r\n    margin: 50px auto 0px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n.top1{\r\n    width: 1100px;\r\n    height: 35px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    gap: 400px;\r\n}\r\n.left{\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n}\r\n.left img{\r\n    width: 20px;\r\n    height: 20px;\r\n}\r\n.left span{\r\n    font-size: 20px;\r\n    line-height: 1.6;\r\n}\r\n.right{\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 24px;\r\n}\r\n.empty-btn{\r\n    width: 84px;\r\n    height: 18px;\r\n    color: #FFF;\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 14px;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    line-height: 1.6;\r\n    background: #8290C0;\r\n    cursor: pointer;\r\n}\r\n.content-box{\r\n    width: 1040px;\r\n    margin: 30px auto 0px;\r\n}\r\n.item-box{\r\n    display: flex;\r\n}\r\n.right-content{\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 130px;\r\n    justify-content: space-between;\r\n    width: 635px;\r\n    cursor: pointer;\r\n}\r\n.content-title{\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 20px;\r\n}\r\n.tag{\r\n    display: flex;\r\n    padding: 2px 6px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 2px;\r\n    height: 18px;\r\n}\r\n.tag1{  \r\n    color: #6B738D;\r\n    background: #E3E7FF;\r\n}\r\n.tag2{\r\n    color: #EEF1FF;\r\n    background: #9FA9CA;\r\n}\r\n.user-info{\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n.pic{\r\n    min-width: 200px;\r\n    min-height: 140px;\r\n    cursor: pointer;\r\n}\r\n.pic img{\r\n    width: 200px;\r\n    height: 140px;\r\n    border-radius: 8px;\r\n}\r\n.user-info img{\r\n    width: 24px;\r\n    height: 24px;\r\n    border-radius: 50%;\r\n}\r\n.user-info span{\r\n    color: #686868;\r\n    font-size: 14px;\r\n}\r\n.btn-delete{\r\n    position: absolute;\r\n    right: 30px;\r\n    top: 50%;\r\n}\r\n:deep .el-card__body{\r\n    width: 100%;\r\n    display: flex;\r\n    gap: 30px;\r\n    align-items: center;\r\n    position: relative;\r\n}\r\n</style>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}