{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $setup.dataUrl ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $setup.dataUrl\n  }, null, 8 /* PROPS */, _hoisted_1)) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["$setup","dataUrl","_createElementBlock","src"],"sources":["D:\\有渔\\前端源码\\YouyuBBS-Q - 副本\\youyu-lyn-qtnew-vision-new-2024.1.14\\node_modules\\vue3-qrcode\\lib\\qrCode.vue"],"sourcesContent":["<template>\n    <img v-if=\"dataUrl\" :src=\"dataUrl\">\n</template>\n<script>\nimport { ref, watchEffect } from 'vue'\nimport QRCode from 'qrcode'\n\nconst MASK_PATTERNS = [0, 1, 2, 3, 4, 5, 6, 7]\nconst MAX_QR_VERSION = 40\nconst TYPES = ['image/png', 'image/jpeg', 'image/webp']\nconst LEVELS = [\n    'low',\n    'medium',\n    'quartile',\n    'high',\n    'L',\n    'M',\n    'Q',\n    'H',\n];\n\nexport default {\n    props: {\n        toSJISFunc: Function,\n        margin: Number,\n        scale: Number,\n        width: Number,\n        height: Number,\n        version: {\n            type: Number,\n            validator: (version) => version === parseInt(String(version), 10) &&\n                version > 1 &&\n                version <= MAX_QR_VERSION,\n        },\n        errorCorrectionLevel: {\n            type: String,\n            validator: (level) => LEVELS.includes(level),\n        },\n        maskPattern: {\n            type: Number,\n            validator: (maskPattern) => MASK_PATTERNS.includes(maskPattern),\n        },\n        quality: {\n            type: Number,\n            validator: (quality) => quality === parseFloat(String(quality)) && quality >= 0 && quality <= 1,\n        },\n        type: {\n            type: String,\n            validator: (type) => TYPES.includes(type),\n        },\n        color: {\n            type: Object,\n            default: () => ({ \n                dark: '#000000',\n                light: '#FFFFFF' \n            }),\n            validator(color){\n                return ['dark', 'light'].every(c => ['string', 'undefined'].includes(typeof color[c]))\n            }\n        },\n        value: {\n            type: String,\n            required: true,\n            validator(value) {\n                if (typeof value === 'string') {\n                    return true\n                }\n            }\n        }\n    },\n    setup(props) {\n        const dataUrl = ref('');\n        watchEffect(() => {\n            const options = Object.assign(\n                    props, \n                    props.quality == null || { \n                        renderOptions: { \n                            quality: props.quality \n                        }\n                    }\n                )\n                QRCode.toDataURL(\n                    props.value,\n                    options\n                ).then((newUrl) => {\n                    dataUrl.value = newUrl\n                }).catch((error) => {\n                    console.log('error', error)\n                })\n        })\n        return {\n            dataUrl\n        }\n    }\n}\n</script>"],"mappings":";;;SACeA,MAAA,CAAAC,OAAO,I,cAAlBC,mBAAA,CAAmC;;IAAdC,GAAG,EAAEH,MAAA,CAAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}