{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7d85d56f\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"barContainer\",\n  class: \"barbox\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\有渔\\前端源码\\YouyuBBS-Q - 副本\\youyu-lyn-qtnew-vision-new-2024.1.14\\src\\page\\CreateCenter\\components\\TheData\\ArticleDataRatio\\LikeData.vue"],"sourcesContent":["<template>\r\n    <div ref=\"barContainer\" class=\"barbox\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ElMessage } from 'element-plus';\r\nimport { ref, onMounted,computed} from 'vue';\r\nimport axios from '@/utils/request';\r\nimport * as echarts from 'echarts';\r\n\r\nlet barChart;\r\nconst userCreateData = ref([]);\r\nconst userCreateDataRatio = ref([]);\r\nconst barContainer = ref(null)\r\nconst num = ref(0)//记录稿件占比数据userCreateDataRatio中数组的个数\r\n\r\nconst manuData = computed(() => [\r\n    { id: 0, name: '阅读量', data: userCreateData.value.articleRead },\r\n    { id: 1, name: '投币数', data: userCreateData.value.articleReward},\r\n    { id: 2, name: '转发数', data: userCreateData.value.articleTransmit},\r\n    { id: 3, name: '收藏数', data: userCreateData.value.articleFavorite},\r\n    { id: 4, name: '评论数', data: userCreateData.value.articleComment},\r\n    { id: 5, name: '点赞数', data: userCreateData.value.articleLike},\r\n]);\r\n\r\n//判断返回的占比数据到底有没有4条，如果有4条，判断是否用户所有稿件刚好等于4，没有“其他”\r\nconst checkUserCreateDataRatio = (userCreateDataRatio,type) => {\r\n    if (userCreateDataRatio.length === 4) {\r\n        let sum = 0;\r\n        for (let i = 0; i < 4; i++) {\r\n            sum +=  Number(userCreateDataRatio[i].count);\r\n        }\r\n        if(sum === manuData.value[type].data) return 4;//这里不取0或1是因为有可能和底下的返回值重复,并且返回5刚好可以做到无论什么情况返回的都是userCreateDataRatio中数组的个数\r\n        else return 5;\r\n    } else {\r\n        return userCreateDataRatio.length;\r\n    }\r\n}\r\n\r\n\r\n//获取用户稿件数据\r\nasync function getCreatedata() {\r\n  try {\r\n    const response = await axios.get('/articledata')\r\n    if(response.data.code === 1){\r\n        userCreateData.value = response.data.data;\r\n        // ElMessage.success('获取用户稿件数据成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取用户稿件数据失败\");\r\n        ElMessage.error(\"获取用户稿件数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取用户稿件数据失败\", error); \r\n    ElMessage.error(\"获取用户稿件数据失败\");\r\n  }\r\n}\r\n\r\n//获取用户稿件占比数据\r\nasync function getCreatedataRatio(type) {\r\n  try {\r\n    const response = await axios.get(`/articledata/${type}`);\r\n    if(response.data.code === 1){\r\n        userCreateDataRatio.value = response.data.data;\r\n        num.value = checkUserCreateDataRatio(userCreateDataRatio.value,type);\r\n        const numData = ref(0);\r\n        if(num.value === 5){\r\n            for(let record of userCreateDataRatio.value ){\r\n                numData.value +=  Number(record.count); \r\n                record.count = (Number(record.count) / Number(manuData.value[type].data)) * 100;\r\n            }\r\n            const tempData =(1-(numData.value / Number(manuData.value[type].data)))* 100;\r\n            const newRecord = {\r\n                title:\"其他\",\r\n                count:tempData,\r\n            }\r\n            userCreateDataRatio.value.push(newRecord);\r\n            numData.value = 0;\r\n        }else{\r\n            for(let record of userCreateDataRatio.value ){\r\n                record.count =  (Number(record.count) /  Number(manuData.value[type].data))* 100;\r\n            }\r\n        }\r\n        if (Array.isArray(userCreateDataRatio.value)) {\r\n            userCreateDataRatio.value = userCreateDataRatio.value.map(item => {\r\n                return {\r\n                    ...item,\r\n                    count: parseFloat(item.count.toFixed(2))\r\n                };\r\n            });\r\n        }\r\n        // ElMessage.success('获取用户稿件占比数据成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取用户稿件占比数据失败\");\r\n        ElMessage.error(\"获取用户稿件占比数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取用户稿件占比数据失败\", error); \r\n    ElMessage.error(\"获取用户稿件占比数据失败\");\r\n  }\r\n}\r\n\r\n\r\n\r\nonMounted(async () => {\r\n    getCreatedata();\r\n    await getCreatedataRatio(5);\r\n\r\n    //将柱状图最大值设为深色\r\n    let dataValues = [];\r\n    let dataLabels = [];\r\n\r\n    if (userCreateDataRatio.value) {\r\n        for (let i = 0; i < num.value && i < userCreateDataRatio.value.length; i++) {\r\n            dataValues.push(userCreateDataRatio.value[i].count);\r\n            dataLabels.push(userCreateDataRatio.value[i].title);\r\n        }\r\n    } else {\r\n        console.log(\"未知的错误,num的值不是数量\");\r\n        ElMessage.error('未知的错误,num的值不是数量');\r\n    }\r\n\r\n    let maxVal = Math.max(...dataValues);\r\n    let seriesData = dataValues.map((value, index) => {\r\n        let color = value === maxVal ? '#606fa0' : '#bdc2e3';\r\n        return {\r\n            value: value,\r\n            itemStyle: {\r\n                color: color,\r\n                borderRadius: [10, 10, 10, 10]\r\n            },\r\n            name: dataLabels[index]\r\n        };\r\n    }).sort((a, b) => b.value - a.value); \r\n\r\n    //柱状图配置\r\n    const barOption = {\r\n        title: {\r\n            text: '数据来源稿件占比',\r\n            left: 'left',\r\n            textStyle: {\r\n                fontSize: 18,\r\n                fontWeight: 'bold'\r\n            }\r\n        },\r\n        grid: {\r\n            containLabel: true,\r\n            bottom: \"10%\"\r\n        },\r\n        xAxis: {\r\n            max: 100,\r\n            splitNumber: 1,\r\n            axisLine: {\r\n                show: false\r\n            },\r\n            axisTick: {\r\n                show: false\r\n            },\r\n            axisLabel: {\r\n                show: false\r\n            },\r\n            splitLine: {\r\n                show: false\r\n            }\r\n        },\r\n        yAxis: {\r\n            type: 'category',\r\n            data: seriesData.map(item => item.name).reverse(),\r\n            axisTick: {\r\n                show: false\r\n            },\r\n            axisLine: {\r\n                show: false\r\n            }\r\n        },\r\n        series: [{\r\n            name: '数据来源占比',\r\n            type: 'bar',\r\n            data: seriesData.reverse(),\r\n            label: {\r\n                show: true,\r\n                position: 'right',\r\n                formatter: '{c}%'\r\n            },\r\n            barWidth: 10\r\n        }]\r\n    };\r\n\r\n    // 初始化图表\r\n    barChart = echarts.init(barContainer.value);\r\n    barChart.setOption(barOption);\r\n});\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.barbox{\r\n    width: 370px;\r\n    height: 260px;\r\n}\r\n</style>\r\n"],"mappings":";;;EACSA,GAAG,EAAC,cAAc;EAACC,KAAK,EAAC;;;uBAA9BC,mBAAA,CAA6C,OAA7CC,UAA6C"},"metadata":{},"sourceType":"module","externalDependencies":[]}