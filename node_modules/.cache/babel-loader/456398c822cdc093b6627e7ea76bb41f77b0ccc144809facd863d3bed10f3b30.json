{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport axios from '@/utils/request';\nimport { useRoute } from 'vue-router';\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\nexport default {\n  __name: 'LMyQuestioned',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const questionId = parseInt(route.params.questionId, 10); //路径中的问答ID\n    const otherUserId = parseInt(route.params.userId, 10); //路径中的用户ID\n    const userId = localStorage.getItem(\"userId\"); // 获取用户ID\n    const userName = localStorage.getItem(\"userName\"); // 获取用户昵称 \n    const userAvater = ref(''); //用户自己的头像\n    const answererInfo = ref({});\n    const sendMessagesList = ref([]); //存放历史对话记录\n\n    //获取用户历史消息列表\n    async function getMessageLog() {\n      try {\n        const response = await axios.get(`/answer/message/history`, {\n          params: {\n            questionId: questionId\n          }\n        });\n        if (response.data.code === 1) {\n          const user = ref(0);\n          sendMessagesList.value = response.data.data.map(item => {\n            if (item.fromUserId == userId) {\n              user.value = 0;\n            } else if (item.fromUserId == otherUserId) {\n              user.value = 1;\n            } else {\n              ElMessage.error('未知的参数错误');\n            }\n            return {\n              uuid: '',\n              status: 1,\n              messageType: item.type,\n              user: user.value,\n              toUserId: item.toUserId,\n              fromUserId: item.fromUserId,\n              time: item.createTime,\n              content: item.content,\n              imageurl: item.type == 0 ? item.cosSecretDto.url : null,\n              number: null\n            };\n          });\n          // ElMessage.success('获取用户消息记录成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取用户消息记录失败\");\n          ElMessage.error('获取用户消息记录失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户消息记录失败\", error);\n        ElMessage.error('获取用户消息记录失败');\n      }\n    }\n\n    //获取对话用户具体信息\n    async function getAnswererInfo() {\n      try {\n        const response = await axios.get(`/answer/${otherUserId}`);\n        if (response.data.code === 1) {\n          answererInfo.value = response.data.data;\n          answererInfo.value.verified = await fetchUserInformation(otherUserId);\n          answererInfo.value.newAvater = await getUsersAvatarFromCOS(answererInfo.value.userId);\n          userAvater.value = await getUsersAvatarFromCOS(userId);\n          // ElMessage.success('获取答主具体信息成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取答主具体信息失败\");\n          ElMessage.error('获取答主具体信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取答主具体信息失败\", error);\n        ElMessage.error('获取答主具体信息失败');\n      }\n    }\n\n    // 获取用户信息\n    const fetchUserInformation = async userId => {\n      try {\n        const response = await axios.get(`/users/${userId}`);\n        if (response.data.code === 1) {\n          return response.data.data.verified;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('获取用户信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户信息失败\", error);\n        ElMessage.error('获取用户信息失败');\n      }\n    };\n    onMounted(() => {\n      getAnswererInfo();\n      getMessageLog();\n    });\n    const __returned__ = {\n      route,\n      questionId,\n      otherUserId,\n      userId,\n      userName,\n      userAvater,\n      answererInfo,\n      sendMessagesList,\n      getMessageLog,\n      getAnswererInfo,\n      fetchUserInformation,\n      ref,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get axios() {\n        return axios;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get getUsersAvatarFromCOS() {\n        return getUsersAvatarFromCOS;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","ElMessage","axios","useRoute","getUsersAvatarFromCOS","route","questionId","parseInt","params","otherUserId","userId","localStorage","getItem","userName","userAvater","answererInfo","sendMessagesList","getMessageLog","response","get","data","code","user","value","map","item","fromUserId","error","uuid","status","messageType","type","toUserId","time","createTime","content","imageurl","cosSecretDto","url","number","msg","toString","console","getAnswererInfo","verified","fetchUserInformation","newAvater"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/QACenter/components/CompletedList/LMyQuestioned.vue"],"sourcesContent":["<!-- 用户自己是提问者 -->\r\n<template>\r\n    <div class=\"bgc_box\">\r\n        <!-- 向**的提问+价值 -->\r\n        <div class=\"top\">\r\n            <div class=\"one_btn\">\r\n                <span>向</span>\r\n                <div style=\"display: flex;align-items: center;\">\r\n                    <span class=\"text1\">{{ answererInfo.username }}</span>\r\n                    <img v-if=\"answererInfo.verified === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;margin: 0 10px 0 -9px;\" alt=\"\">\r\n                </div>\r\n                <span>提问</span>\r\n            </div>\r\n            <!-- <div class=\"two_btn\">\r\n                <span>价值</span>\r\n                <span class=\"text1\">10</span>\r\n                <span>鱼饵</span>\r\n            </div> -->\r\n        </div>\r\n        <!-- 对话列表  -->\r\n        <div class=\"main_box\">\r\n            <div class=\"content-box\" v-for=\"(message, index) in sendMessagesList\" :key=\"index\">\r\n                <div class=\"item\">\r\n                    <div class=\"user\" v-if=\"message.user === 0\">\r\n                        <img :src=\"userAvater\" alt=\"\">\r\n                        <span>{{userName}}的提问</span>\r\n                    </div>\r\n                    <div class=\"user\" v-if=\"message.user === 1\">\r\n                        <img :src=\"answererInfo.newAvater\" alt=\"\">\r\n                        <span>{{answererInfo.username}}的回答</span>\r\n                    </div>\r\n                    <div class=\"content\" v-if=\"message.messageType === 1\">\r\n                        {{ message.content }}\r\n                    </div>\r\n                    <div class=\"content\" v-if=\"message.messageType === 0\">\r\n                        <img :src=\"message.imageurl\" alt=\"\">\r\n                    </div>\r\n                    <div class=\"time\">\r\n                        {{ message.createTime }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted} from 'vue';\r\nimport { ElMessage } from 'element-plus';\r\nimport axios from '@/utils/request';\r\nimport { useRoute } from 'vue-router';\r\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\r\n\r\nconst route = useRoute ();\r\nconst questionId = parseInt(route.params.questionId,10);//路径中的问答ID\r\nconst otherUserId = parseInt(route.params.userId,10);//路径中的用户ID\r\nconst userId = localStorage.getItem(\"userId\"); // 获取用户ID\r\nconst userName = localStorage.getItem(\"userName\"); // 获取用户昵称 \r\nconst userAvater = ref('');//用户自己的头像\r\nconst answererInfo = ref({});\r\nconst sendMessagesList = ref([]);//存放历史对话记录\r\n\r\n//获取用户历史消息列表\r\nasync function getMessageLog() {\r\n  try{\r\n    const response = await axios.get(`/answer/message/history`,{\r\n        params: {\r\n            questionId:questionId,\r\n        }\r\n    });\r\n    if(response.data.code === 1){\r\n        const user = ref(0);\r\n        sendMessagesList.value = response.data.data.map(item => {\r\n            if(item.fromUserId == userId) {\r\n                user.value = 0;\r\n            }else if(item.fromUserId == otherUserId){\r\n                user.value = 1;\r\n            }else{\r\n                ElMessage.error('未知的参数错误');\r\n            }\r\n            return {\r\n                uuid: '', \r\n                status: 1, \r\n                messageType: item.type, \r\n                user: user.value, \r\n                toUserId: item.toUserId, \r\n                fromUserId: item.fromUserId, \r\n                time: item.createTime, \r\n                content: item.content,\r\n                imageurl:   \r\n                    (item.type == 0) ? item.cosSecretDto.url :\r\n                    null,\r\n                number:null,\r\n            };\r\n        });\r\n        // ElMessage.success('获取用户消息记录成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取用户消息记录失败\");\r\n        ElMessage.error('获取用户消息记录失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取用户消息记录失败\", error); \r\n    ElMessage.error('获取用户消息记录失败');\r\n  }\r\n}\r\n\r\n//获取对话用户具体信息\r\nasync function getAnswererInfo() {\r\n  try{\r\n    const response = await axios.get(`/answer/${otherUserId}`)\r\n    if(response.data.code === 1){\r\n        answererInfo.value = response.data.data;\r\n        answererInfo.value.verified = await fetchUserInformation(otherUserId);\r\n        answererInfo.value.newAvater = await getUsersAvatarFromCOS(answererInfo.value.userId);\r\n        userAvater.value = await getUsersAvatarFromCOS(userId);\r\n        // ElMessage.success('获取答主具体信息成功');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取答主具体信息失败\");\r\n        ElMessage.error('获取答主具体信息失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取答主具体信息失败\", error); \r\n    ElMessage.error('获取答主具体信息失败');\r\n  }\r\n}\r\n\r\n// 获取用户信息\r\nconst fetchUserInformation = async (userId) => {\r\n    try {\r\n        const response = await axios.get(`/users/${userId}`);\r\n        if(response.data.code === 1){\r\n            return (response.data.data.verified);\r\n        }else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else{\r\n            ElMessage.error('获取用户信息失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取用户信息失败\", error);\r\n        ElMessage.error('获取用户信息失败');\r\n    }\r\n};\r\n\r\n\r\nonMounted(() => {\r\n    getAnswererInfo();\r\n    getMessageLog();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.bgc_box{\r\n    width: 100%;\r\n    background-color: #F8F8F8;\r\n}\r\n.top{\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 80px;\r\n    padding: 15px 0px;\r\n}\r\n.text1{\r\n    color: #3F87E1;\r\n    margin: 0px 10px;\r\n}\r\n.top span{\r\n    font-size: 20px;\r\n}\r\n.one_btn{\r\n    display: flex;\r\n}\r\n.main_box{\r\n    height: 88vh;\r\n    overflow: auto;\r\n}\r\n.item{\r\n    width: 960px;\r\n    padding: 12px 20px;\r\n    background-color: #fff;\r\n    margin: 0px auto 20px;\r\n    border-radius: 12px;;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 10px;\r\n}\r\n.user{\r\n    width: 100%;\r\n    border-bottom: 1px solid #EEE;\r\n    display: flex;\r\n    align-items: center;\r\n    padding-bottom: 12px;\r\n}\r\n.user img{\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-right: 15px;\r\n    border-radius: 50%;\r\n}\r\n.content{\r\n    line-height: 1.6;\r\n    padding: 1rem 2rem;\r\n}\r\n.content img {\r\n    width: 500px;\r\n    border-radius: 10px;\r\n}\r\n.time{\r\n    font-size: 14px;\r\n    line-height: 1.6;\r\n    color: #7E7E7E;\r\n}\r\n@media (max-width: 768px) {\r\n    .main_box{\r\n        height: 90vh;\r\n    }\r\n    .top{\r\n        justify-content: space-around;\r\n        gap: 0px;\r\n    }\r\n    .item{\r\n        width: 90%;\r\n        padding: 12px 5%;\r\n    }\r\n    .user img{\r\n        width: 2rem;\r\n        height: 2rem;\r\n        margin-right: 1rem;\r\n    }\r\n    .top span{\r\n        font-size: 1.2rem;\r\n    }\r\n    .content{\r\n        font-size: 0.9rem;\r\n        padding: 1rem 0;\r\n    }\r\n    .content img{\r\n        width: 18rem;\r\n    }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}