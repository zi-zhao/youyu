{"ast":null,"code":"import { ElMessage, ElPagination } from 'element-plus';\nimport axios from \"@/utils/request\";\nimport { ref, onMounted, reactive } from \"vue\";\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\nimport unlikedImage from '@/assets/LikeBefore.svg'; //点赞前图片\nimport likedImage from '@/assets/LikeAfter.svg'; //点赞后图片\nimport CreportedDialog from '@/page/components/CreportedDialog.vue';\nimport { useRouter, useRoute } from 'vue-router';\nimport { formatDateTime } from '@/utils/timeFormat';\nimport { openUrl } from '@/utils/routeJudge';\nexport default {\n  __name: 'UserComment',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const dialogVisible2 = ref(false); //控制评论举报弹框是否显示\n    const type = ref(null);\n    const commentType = ref(0);\n    const workId = ref(null);\n    const currentPage = ref(1);\n    const router = useRouter();\n    const route = useRoute();\n    const userId = localStorage.getItem(\"userId\");\n    const userName = localStorage.getItem(\"userName\");\n    const newUserAvater = ref(); //存放用户自己的头像\n    const replyCommentContent = ref(\"\");\n    const articleData = ref({}); //存储文章数据\n    const records = ref([]); //储存一级评论列表\n    const repliesMap = ref({}); // 存储每个一级评论ID对应的二级评论列表\n    const paginationStates = reactive({}); //存储每个分页器\n    const articleId = parseInt(route.params.id, 10); //路径中的文章ID\n    const activeTab = ref('newest'); //记录点击最新或最热\n\n    const initPaginationState = recordId => {\n      if (!paginationStates[recordId]) {\n        paginationStates[recordId] = {\n          currentPage: 1,\n          //分页器中的当前页数\n          pageSize: 5,\n          //分页器中的每页呈现数据条数\n          pageCount: 0,\n          //分页器中总页数\n          pagerCount: 5 //分页器最多显示几个页码\n        };\n      }\n    };\n    const handleCurrentChange = (commentId, currentChange) => {\n      if (paginationStates[commentId]) {\n        paginationStates[commentId].currentPage = currentChange;\n        fetchReplies(commentId, paginationStates[commentId].currentPage, paginationStates[commentId].pageSize);\n      }\n    };\n\n    //点击“最新”或“最热”评论\n    async function handlecommentChange(type) {\n      activeTab.value = type === 0 ? 'newest' : 'hottest';\n      currentPage.value = 1;\n      if (type == 0) {\n        commentType.value = 0;\n        await fetchCommentsNew(articleId, currentPage.value);\n      } else {\n        commentType.value = 1;\n        await fetchCommentsHot(articleId, currentPage.value);\n      }\n    }\n\n    //向举报弹窗赋值的函数\n    const commentReport = (id, typeNum) => {\n      workId.value = id;\n      type.value = typeNum;\n      dialogVisible2.value = true;\n    };\n\n    //点击用户头像进行跳转\n    const navigateToUserProfile = user_id => {\n      console.log('点击用户头像跳转');\n      if (user_id == userId) {\n        // const routeLocation = router.resolve({ path: '/PersonalPage' });\n        // window.open(routeLocation.href, '_blank');\n        openUrl('/PersonalPage');\n      } else {\n        // const routeLocation = router.resolve({ path: `/OtherUserPersonalPage/${user_id}`});\n        // window.open(routeLocation.href, '_blank');\n        openUrl(`/OtherUserPersonalPage/${user_id}`);\n      }\n    };\n\n    //获取文章内容\n    async function fetchArticleContent(id) {\n      try {\n        const response = await axios.get(`/article/${id}`);\n        if (response.data && response.data.code === 1) {\n          articleData.value = response.data.data;\n          newUserAvater.value = await getUsersAvatarFromCOS(userId);\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error('获取文章数据失败', response.data.msg || 'Unknown error');\n          ElMessage.error('获取文章数据失败');\n        }\n      } catch (error) {\n        console.error('网络错误:', error.message);\n        ElMessage.error('获取文章数据失败');\n      }\n    }\n\n    // 添加一个锁状态\n    let isLoading = false;\n    async function load() {\n      if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\n      isLoading = true; // 开始加载数据，设置锁状态为true\n      try {\n        if (currentPage.value === 1) {\n          currentPage.value++;\n        }\n        if (commentType.value === 0) {\n          await fetchCommentsNew(articleId, currentPage.value);\n        } else if (commentType.value === 1) {\n          await fetchCommentsHot(articleId, currentPage.value);\n        }\n        currentPage.value++; // 只有在请求成功完成后才递增页码\n      } catch (error) {\n        console.error(error);\n        ElMessage.error('滚动时的未知错误');\n      } finally {\n        isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\n      }\n    }\n\n    //获取一级评论(最新)\n    const fetchCommentsNew = async (articleId, currentPage) => {\n      if (currentPage === 1) {\n        records.value = [];\n      }\n      try {\n        const response = await axios.get(\"/comment/list\", {\n          params: {\n            pageSize: 10,\n            currentPage: currentPage,\n            articleId: articleId,\n            type: 0,\n            category: 1\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          response.data.data.records.forEach(record => initPaginationState(record.id));\n          const updates = response.data.data.records.map(async record => {\n            const newAvatar = await getUsersAvatarFromCOS(record.userId);\n            return {\n              ...record,\n              showComments: false,\n              showReported: false,\n              showMore: false,\n              newAvatar // 新获取的头像\n            };\n          });\n          const updatedRecords = await Promise.all(updates);\n          records.value = [...records.value, ...updatedRecords];\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取文章评论失败:\", response.data.msg || \"Unknown error\");\n          ElMessage.error('获取文章评论失败');\n        }\n      } catch (error) {\n        console.error(\"获取文章评论失败\", error.message);\n        ElMessage.error('获取文章评论失败');\n      }\n    };\n\n    //获取一级评论(最热)\n    const fetchCommentsHot = async (articleId, currentPage) => {\n      if (currentPage === 1) {\n        records.value = [];\n      }\n      try {\n        const response = await axios.get(\"/comment/list\", {\n          params: {\n            pageSize: 10,\n            currentPage: currentPage,\n            articleId: articleId,\n            type: 0,\n            category: 0\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          response.data.data.records.forEach(record => initPaginationState(record.id));\n          const updates = response.data.data.records.map(async record => {\n            const newAvatar = await getUsersAvatarFromCOS(record.userId);\n            const verified = await fetchUserInformation(record.userId);\n            return {\n              ...record,\n              verified,\n              showComments: false,\n              showReported: false,\n              showMore: false,\n              newAvatar // 新获取的头像\n            };\n          });\n          const updatedRecords = await Promise.all(updates);\n          records.value = [...records.value, ...updatedRecords];\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取文章评论失败:\", response.data.msg || \"Unknown error\");\n          ElMessage.error('获取文章评论失败');\n        }\n      } catch (error) {\n        console.error(\"获取文章评论失败\", error.message);\n        ElMessage.error('获取文章评论失败');\n      }\n    };\n\n    //根据一级评论id获取对应二级评论\n    const fetchReplies = async (commentId, currentPage, pageSize) => {\n      try {\n        const response = await axios.get(\"/comment/reply/list\", {\n          params: {\n            pageSize: pageSize,\n            currentPage: currentPage,\n            commentId: commentId\n          }\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          repliesMap.value[commentId] = response.data.data.records;\n          if (paginationStates[commentId]) {\n            paginationStates[commentId].pageCount = Math.ceil(response.data.data.total / pageSize);\n          }\n          const updates = repliesMap.value[commentId].map(async record => {\n            const newAvatar = await getUsersAvatarFromCOS(record.userId);\n            const verified = await fetchUserInformation(record.userId);\n            return {\n              ...record,\n              verified,\n              showReported: false,\n              // 控制评论的举报按钮是否显示\n              showMore: false,\n              // 控制评论“more”图标是否显示\n              newAvatar\n            };\n          });\n          repliesMap.value[commentId] = await Promise.all(updates);\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取二级评论接口失败:\", response.data.msg || \"Unknown error\");\n          ElMessage.error('获取二级评论接口失败');\n        }\n      } catch (error) {\n        console.error(\" 获取二级评论接口失败\", error.message);\n        ElMessage.error('获取二级评论接口失败');\n      }\n    };\n\n    //点击一级评论的评论按钮，展开对应的二级评论\n    const handleSubComment = recordId => {\n      const record = records.value.find(r => r.id === recordId);\n      if (record) {\n        record.showComments = !record.showComments;\n      }\n      if (record.showComments) {\n        // 初始化分页状态，如果尚未初始化\n        initPaginationState(recordId);\n        // 使用该一级评论的分页状态来获取二级评论\n        fetchReplies(recordId, paginationStates[recordId].currentPage, paginationStates[recordId].pageSize);\n      }\n    };\n\n    //最顶部的评论框提交的相关接口\n    const levelOneCommentContent = ref(\"\");\n    const handlerlevelOneComment = async () => {\n      if (!levelOneCommentContent.value) {\n        ElMessage.error(\"评论内容不能为空!\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"/comment/send\", {\n          authorId: articleData.value.userId,\n          authorName: articleData.value.username,\n          worksId: articleId,\n          worksTitle: articleData.value.title,\n          userId: userId,\n          username: userName,\n          content: levelOneCommentContent.value,\n          type: 0\n        });\n        if (response.data.code === 1) {\n          const newReplyId = response.data.map.id;\n          ElMessage.success(\"评论成功!\");\n          const time = new Date();\n          // 假设并构造新的评论\n          const newComment = {\n            id: newReplyId,\n            // 临时ID，实际应用中这应该是由后台返回的\n            newAvatar: newUserAvater.value,\n            username: userName,\n            // 假设的用户名，实际上可以从用户会话或其他地方获取\n            content: levelOneCommentContent.value,\n            createTime: formatDateTime(time),\n            // 使用当前时间作为评论时间\n            state: 0,\n            // 初始状态下，该评论未被点赞\n            likeCount: 0,\n            replyCount: 0,\n            articleId: articleId // 假设的文章ID\n          };\n          // 将新评论添加到records数组的开头\n          records.value.unshift(newComment);\n          // 清除评论输入框的内容\n          levelOneCommentContent.value = \"\";\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error(\"评论失败: \" + (response.data.msg || \"未知错误\"));\n        }\n      } catch (error) {\n        ElMessage.error(\"提交评论时出现错误: \" + error.message);\n      }\n    };\n\n    //一级评论框的内容获取\n    const handleReplyToFirstLevelComment = async comment => {\n      if (!replyCommentContent.value) {\n        ElMessage.error(\"回复内容不能为空!\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"/comment/reply/send\", {\n          userId: userId,\n          username: userName,\n          worksId: articleId,\n          worksTitle: articleData.value.title,\n          commentId: comment.id,\n          content: replyCommentContent.value,\n          type: 0\n        });\n        if (response.data.code === 1) {\n          ElMessage.success(\"回复成功!\");\n          // 折叠回复框\n          activeReplyBoxId.value = null;\n          comment.replyCount = response.data.map.replyCount;\n          comment.showComments = false;\n          replyCommentContent.value = \"\";\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error(\"回复失败: \" + (response.data.msg || \"未知错误\"));\n        }\n      } catch (error) {\n        ElMessage.error(\"提交回复时出现错误: \" + error.message);\n      }\n    };\n\n    //一级评论的点赞接口，接受一个 record 作为参数\n    async function increaseCount(record) {\n      try {\n        const config = record.state === 0 ? {\n          method: 'put',\n          url: `/comment/like`,\n          params: {\n            id: record.id,\n            userId: record.userId\n          }\n        } : {\n          method: 'delete',\n          url: `/comment/unlike`,\n          params: {\n            id: record.id,\n            userId: record.userId\n          }\n        };\n        const response = await axios(config);\n        if (response.data && response.data.code === 1) {\n          record.state = record.state === 0 ? 1 : 0;\n          record.likeCount = response.data.data;\n          console.log('点赞/取消赞 成功');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(response.data.msg || 'Unknown error');\n          ElMessage.error('点赞失败');\n        }\n      } catch (error) {\n        console.error('获取点赞状态失败', error.message);\n        ElMessage.error('点赞动态失败');\n      }\n    }\n\n    //二级评论的点赞接口，接受一个 reply 作为参数\n    async function increaseCount2(reply) {\n      try {\n        const config = reply.state === 0 ? {\n          method: 'put',\n          url: `comment/reply/like`,\n          params: {\n            id: reply.id,\n            userId: reply.userId\n          }\n        } : {\n          method: 'delete',\n          url: `/comment/reply/unlike`,\n          params: {\n            id: reply.id,\n            userId: reply.userId\n          }\n        };\n        const response = await axios(config);\n        if (response.data && response.data.code === 1) {\n          reply.state = reply.state === 0 ? 1 : 0;\n          reply.likeCount = response.data.data;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('点赞操作失败');\n          console.error(response.data.msg || 'Unknown error');\n        }\n      } catch (error) {\n        console.error('获取点赞状态失败', error.message);\n      }\n    }\n\n    //一级回复框的折叠\n    const activeReplyBoxId = ref(null);\n    const toggleReplyBox = id => {\n      activeReplyBoxId.value = activeReplyBoxId.value === id ? null : id;\n    };\n\n    // 获取用户信息\n    const fetchUserInformation = async userId => {\n      try {\n        const response = await axios.get(`/users/${userId}`);\n        if (response.data.code === 1) {\n          return response.data.data.verified;\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          ElMessage.error('获取用户信息失败');\n        }\n      } catch (error) {\n        console.error(\"获取用户信息失败\", error);\n        ElMessage.error('获取用户信息失败');\n      }\n    };\n    onMounted(() => {\n      fetchArticleContent(articleId);\n      fetchCommentsNew(articleId, currentPage.value);\n    });\n    const __returned__ = {\n      dialogVisible2,\n      type,\n      commentType,\n      workId,\n      currentPage,\n      router,\n      route,\n      userId,\n      userName,\n      newUserAvater,\n      replyCommentContent,\n      articleData,\n      records,\n      repliesMap,\n      paginationStates,\n      articleId,\n      activeTab,\n      initPaginationState,\n      handleCurrentChange,\n      handlecommentChange,\n      commentReport,\n      navigateToUserProfile,\n      fetchArticleContent,\n      get isLoading() {\n        return isLoading;\n      },\n      set isLoading(v) {\n        isLoading = v;\n      },\n      load,\n      fetchCommentsNew,\n      fetchCommentsHot,\n      fetchReplies,\n      handleSubComment,\n      levelOneCommentContent,\n      handlerlevelOneComment,\n      handleReplyToFirstLevelComment,\n      increaseCount,\n      increaseCount2,\n      activeReplyBoxId,\n      toggleReplyBox,\n      fetchUserInformation,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElPagination() {\n        return ElPagination;\n      },\n      get axios() {\n        return axios;\n      },\n      ref,\n      onMounted,\n      reactive,\n      get getUsersAvatarFromCOS() {\n        return getUsersAvatarFromCOS;\n      },\n      get unlikedImage() {\n        return unlikedImage;\n      },\n      get likedImage() {\n        return likedImage;\n      },\n      CreportedDialog,\n      get useRouter() {\n        return useRouter;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get formatDateTime() {\n        return formatDateTime;\n      },\n      get openUrl() {\n        return openUrl;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ElMessage","ElPagination","axios","ref","onMounted","reactive","getUsersAvatarFromCOS","unlikedImage","likedImage","CreportedDialog","useRouter","useRoute","formatDateTime","openUrl","dialogVisible2","type","commentType","workId","currentPage","router","route","userId","localStorage","getItem","userName","newUserAvater","replyCommentContent","articleData","records","repliesMap","paginationStates","articleId","parseInt","params","id","activeTab","initPaginationState","recordId","pageSize","pageCount","pagerCount","handleCurrentChange","commentId","currentChange","fetchReplies","handlecommentChange","value","fetchCommentsNew","fetchCommentsHot","commentReport","typeNum","navigateToUserProfile","user_id","console","log","fetchArticleContent","response","get","data","code","msg","error","toString","message","isLoading","load","category","length","forEach","record","updates","map","newAvatar","showComments","showReported","showMore","updatedRecords","Promise","all","verified","fetchUserInformation","Math","ceil","total","handleSubComment","find","r","levelOneCommentContent","handlerlevelOneComment","post","authorId","authorName","username","worksId","worksTitle","title","content","newReplyId","success","time","Date","newComment","createTime","state","likeCount","replyCount","unshift","handleReplyToFirstLevelComment","comment","activeReplyBoxId","increaseCount","config","method","url","increaseCount2","reply","toggleReplyBox"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/TheArticle/components/UserComment.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"cnav\">\r\n      <div class=\"ctext1\">评论</div>\r\n      <div>\r\n        <div class=\"ml-4\">\r\n          <span class=\"cursor-pointer\" :class=\"{ active: activeTab === 'newest' }\" @click=\"handlecommentChange(0)\">最新</span>\r\n          <span class=\"button_gap\">|</span>\r\n          <span class=\"cursor-pointer\" :class=\"{ active: activeTab === 'hottest' }\" @click=\"handlecommentChange(1)\">最热</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"commont_body\">\r\n      <div class=\"commentListCont\">\r\n        <!-- 一级评论 输入 -->\r\n        <div class=\"levelOneCommentInput commentInput\">\r\n          <div class=\"input\">\r\n            <el-input\r\n                v-model.lazy.trim=\"levelOneCommentContent\"\r\n                :autosize=\"{ minRows: 1, maxRows: 5 }\"\r\n                type=\"textarea\"\r\n                maxlength=\"200\"\r\n                show-word-limit=\"true\"\r\n                resize=\"none\"\r\n                placeholder=\"发表你的评论吧\"\r\n                class=\"comment-input\"\r\n                style=\"width: 92%;\"\r\n            />\r\n            <button @click=\"handlerlevelOneComment\">评论</button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 评论渲染 -->\r\n        <!-- 评论渲染 -->\r\n        <div class=\"commentList\"  v-infinite-scroll=\"load\" infinite-scroll-distance=\"100\" infinite-scroll-immediate=\"false\">\r\n          <!-- 评论item -->\r\n          <div v-for=\"record in records\" :key=\"record.id\" >\r\n            <div class=\"levelOneComment commentItem\" @mouseenter=\"record.showMore = true\" @mouseleave=\"record.showMore = false\">\r\n              <div class=\"userPhoto_1\">\r\n                <img \r\n                  v-if=\"record.newAvatar\"\r\n                  :src=\"record.newAvatar\"\r\n                  alt=\"\"\r\n                  class=\"navbar-avatar\"\r\n                  @click=\"navigateToUserProfile(record.userId)\"\r\n                  :style=\"{ cursor: 'pointer' }\"\r\n              >\r\n              </div>\r\n              <!-- 一级评论内容 -->\r\n              <div class=\"userComment\">\r\n                <div style=\"display: flex;align-items: center;gap: 3px;\">\r\n                    <p class=\"userName\">{{ record.username }}</p>\r\n                    <img v-if=\"record.verified === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;\" alt=\"\">\r\n                </div>\r\n                <p class=\"content\">{{ record.content }}</p>\r\n                <div class=\"operationBar\">\r\n                  <span class=\"commentDate\">{{ record.createTime }}</span>\r\n                  <div class=\"operationBar-right\">\r\n                    <img\r\n                      class=\"like-pic\"\r\n                      :src=\" record.state === 0 ? unlikedImage : likedImage\"\r\n                      @click=\"increaseCount(record)\"\r\n                    />\r\n                    <span class=\"like-count\">{{ record.likeCount }}</span>\r\n                    <img class=\"like-pic\" src=\"@/assets/Comment.svg\"  @click=\"handleSubComment(record.id)\"/>\r\n                    <span class=\"like-count\">{{ record.replyCount }}</span>\r\n                    <span class=\"commentBtn\" @click=\"toggleReplyBox(record.id,record.userId,record.username)\"\r\n                      >回复</span\r\n                    >\r\n                    <img src=\"@/assets/More.svg\" class=\"more\" v-if=\"record.showMore\" @click=\"record.showReported = true\" alt=\"\">\r\n                    <div class=\"hover-box\" v-if=\"record.showReported\" @mouseleave=\"record.showReported = false\">\r\n                        <div class=\"report-hover\" @click=\"commentReport(reply.id,0)\">\r\n                          举报\r\n                        </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- 一级回复输入框 - 显示在每个一级评论的底下 -->\r\n            <div v-if=\"activeReplyBoxId === record.id\" class=\"userinput2\">\r\n              <div class=\"input\">\r\n                <el-input\r\n                    v-model.lazy.trim=\"replyCommentContent\"\r\n                    :autosize=\"{ minRows: 1, maxRows: 5 }\"\r\n                    type=\"textarea\"\r\n                    maxlength=\"200\"\r\n                    show-word-limit=\"true\"\r\n                    resize=\"none\"\r\n                    placeholder=\"文本中的评论将被发送\"\r\n                    class=\"comment-input\"\r\n                    style=\"width: 89%;\"\r\n                />\r\n                <button @click=\"handleReplyToFirstLevelComment(record)\">\r\n                  评论\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- 二级评论 -->\r\n            <div v-if=\"record.showComments\" >\r\n              <div\r\n                v-for=\"reply in repliesMap[record.id] || []\"\r\n                :key=\"reply.id\"\r\n                class=\"userComment\"\r\n              >\r\n                <div class=\"leveltwoComment commentItem\" @mouseenter=\"reply.showMore = true\" @mouseleave=\"reply.showMore = false\">\r\n                  <div class=\"userPhoto_2\">\r\n                    <img \r\n                        v-if=\"reply.newAvatar\"\r\n                        :src=\"reply.newAvatar\"\r\n                        alt=\"\"\r\n                        class=\"navbar-avatar\"\r\n                        @click=\"navigateToUserProfile(reply.userId)\"\r\n                        :style=\"{ cursor: 'pointer' }\"\r\n                    >\r\n                  </div>\r\n                  <div class=\"userComment2\">\r\n                    <div style=\"display: flex;align-items: center;gap: 3px;\">\r\n                        <p class=\"userName2\">{{ reply.username }}</p>\r\n                        <img v-if=\"reply.verified === 1\" src=\"@/assets/VerifiedUser.svg\" style=\"width: 16px;height: 16px;\" alt=\"\">\r\n                    </div>\r\n                    <p class=\"content2\">{{ reply.content }}</p>\r\n                    <div class=\"operationBar2\">\r\n                      <span class=\"commentDate2\">{{ reply.createTime }}</span>\r\n                      <!-- 点赞图片 -->\r\n                      <div style=\"display: flex;align-items: center;\">\r\n                        <img\r\n                          class=\"like-pic2\"\r\n                          :src=\"reply.state === 0 ? unlikedImage : likedImage\"\r\n                          @click=\"increaseCount2(reply)\"\r\n                        />\r\n                        <span class=\"like-count2\">{{ reply.likeCount }}</span>\r\n                      </div>\r\n                      <!-- 评论举报 -->\r\n                      <img src=\"@/assets/More.svg\" class=\"more\" v-if=\" reply.showMore\" @click=\" reply.showReported = true\" alt=\"\">\r\n                      <div class=\"hover-box\" v-if=\" reply.showReported\" @mouseleave=\" reply.showReported = false\">\r\n                        <div class=\"report-hover\" @click=\"commentReport(reply.id,1)\">\r\n                          举报\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"bottom\" v-if=\"record.replyCount>0\">\r\n                  <el-pagination\r\n                    v-model:current-page=\"paginationStates[record.id].currentPage\"\r\n                    v-model:page-size=\"paginationStates[record.id].pageSize\"\r\n                    :small=\"small\"\r\n                    layout=\"prev, pager, next\"\r\n                    :pager-count=\"paginationStates[record.id].pageCount\"\r\n                    :page-count=\"paginationStates[record.id].pageCount\"\r\n                    @current-change=\"newPage => handleCurrentChange(record.id, newPage)\"/>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"dialogVisible2\">\r\n      <CreportedDialog v-model=\"dialogVisible2\" :id=\"workId\" :type=\"type\"></CreportedDialog>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ElMessage,ElPagination } from 'element-plus';\r\nimport axios from \"@/utils/request\";\r\nimport { ref,onMounted,reactive } from \"vue\";\r\nimport { getUsersAvatarFromCOS } from '@/utils/cosService';\r\nimport unlikedImage from '@/assets/LikeBefore.svg';//点赞前图片\r\nimport likedImage from '@/assets/LikeAfter.svg';//点赞后图片\r\nimport CreportedDialog from '@/page/components/CreportedDialog.vue';\r\nimport { useRouter,useRoute} from 'vue-router';\r\nimport { formatDateTime} from '@/utils/timeFormat'; \r\nimport { openUrl } from '@/utils/routeJudge'\r\n\r\nconst dialogVisible2 = ref(false);//控制评论举报弹框是否显示\r\nconst type = ref(null);\r\nconst commentType = ref(0);\r\nconst workId = ref(null);\r\nconst currentPage = ref(1);\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst userId = localStorage.getItem(\"userId\");\r\nconst userName = localStorage.getItem(\"userName\");\r\nconst newUserAvater = ref();//存放用户自己的头像\r\nconst replyCommentContent = ref(\"\");\r\nconst articleData = ref({})//存储文章数据\r\nconst records = ref([]); //储存一级评论列表\r\nconst repliesMap = ref({}); // 存储每个一级评论ID对应的二级评论列表\r\nconst paginationStates = reactive({});//存储每个分页器\r\nconst articleId = parseInt(route.params.id,10);//路径中的文章ID\r\nconst activeTab = ref('newest');//记录点击最新或最热\r\n\r\nconst initPaginationState = (recordId) => {\r\n  if (!paginationStates[recordId]) {\r\n    paginationStates[recordId] = {\r\n      currentPage: 1, //分页器中的当前页数\r\n      pageSize: 5, //分页器中的每页呈现数据条数\r\n      pageCount: 0,//分页器中总页数\r\n      pagerCount: 5,//分页器最多显示几个页码\r\n    };\r\n  }\r\n};\r\n\r\nconst handleCurrentChange = (commentId, currentChange) => {\r\n  if (paginationStates[commentId]) {\r\n    paginationStates[commentId].currentPage= currentChange;\r\n    fetchReplies(commentId, paginationStates[commentId].currentPage, paginationStates[commentId].pageSize);\r\n  }\r\n};\r\n\r\n//点击“最新”或“最热”评论\r\nasync function handlecommentChange(type) {\r\n  activeTab.value = type === 0 ? 'newest' : 'hottest';\r\n  currentPage.value =1;\r\n  if(type == 0){\r\n    commentType.value = 0;\r\n    await fetchCommentsNew(articleId,currentPage.value);\r\n  }else{\r\n    commentType.value = 1;\r\n    await fetchCommentsHot(articleId,currentPage.value);\r\n  }\r\n}\r\n\r\n\r\n//向举报弹窗赋值的函数\r\nconst commentReport = (id,typeNum) =>{\r\n  workId.value = id;\r\n  type.value = typeNum;\r\n  dialogVisible2.value = true;\r\n}\r\n\r\n//点击用户头像进行跳转\r\nconst navigateToUserProfile = (user_id) => {\r\n  console.log('点击用户头像跳转');\r\n  if(user_id == userId){\r\n    // const routeLocation = router.resolve({ path: '/PersonalPage' });\r\n    // window.open(routeLocation.href, '_blank');\r\n    openUrl('/PersonalPage')\r\n  }else{\r\n    // const routeLocation = router.resolve({ path: `/OtherUserPersonalPage/${user_id}`});\r\n    // window.open(routeLocation.href, '_blank');\r\n    openUrl(`/OtherUserPersonalPage/${user_id}`)\r\n  }\r\n};\r\n\r\n\r\n//获取文章内容\r\nasync function fetchArticleContent(id) {\r\n  try {\r\n    const response = await axios.get(`/article/${id}`);\r\n    if (response.data && response.data.code === 1) {\r\n      articleData.value =  response.data.data;\r\n      newUserAvater.value = await getUsersAvatarFromCOS(userId);\r\n    } else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      console.error('获取文章数据失败', response.data.msg || 'Unknown error');\r\n      ElMessage.error('获取文章数据失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('网络错误:', error.message);\r\n    ElMessage.error('获取文章数据失败');\r\n  }\r\n}\r\n\r\n\r\n// 添加一个锁状态\r\nlet isLoading = false;\r\nasync function load() {\r\n  if (isLoading) return; // 如果已经在加载中，则直接返回不执行新的加载\r\n  isLoading = true; // 开始加载数据，设置锁状态为true\r\n  try {\r\n      if(currentPage.value === 1){\r\n        currentPage.value++;\r\n      }\r\n      if(commentType.value === 0){\r\n        await fetchCommentsNew(articleId,currentPage.value);\r\n      }else if(commentType.value === 1){\r\n        await fetchCommentsHot(articleId,currentPage.value);\r\n      }\r\n      currentPage.value++; // 只有在请求成功完成后才递增页码\r\n  } catch (error) {\r\n      console.error(error);\r\n      ElMessage.error('滚动时的未知错误');\r\n  } finally {\r\n      isLoading = false; // 请求完成，无论成功或失败，都释放锁状态\r\n  }\r\n}\r\n\r\n//获取一级评论(最新)\r\nconst fetchCommentsNew = async (articleId,currentPage) => {\r\n  if(currentPage === 1){\r\n    records.value = [];\r\n  }\r\n  try {\r\n    const response = await axios.get(\"/comment/list\", {\r\n      params: {\r\n        pageSize: 10,\r\n        currentPage: currentPage,\r\n        articleId: articleId,\r\n        type:0,\r\n        category:1,\r\n      },\r\n    });\r\n    if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n      response.data.data.records.forEach(record => initPaginationState(record.id));\r\n      const updates = response.data.data.records.map(async (record) => {\r\n        const newAvatar = await getUsersAvatarFromCOS(record.userId);\r\n        return {\r\n          ...record,\r\n          showComments: false,\r\n          showReported: false,\r\n          showMore: false,\r\n          newAvatar // 新获取的头像\r\n        };\r\n      });\r\n      const updatedRecords = await Promise.all(updates);\r\n      records.value = [...records.value, ...updatedRecords];\r\n    }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n      // ElMessage.info('已加载所有数据');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      console.error(\"获取文章评论失败:\",response.data.msg || \"Unknown error\");\r\n      ElMessage.error('获取文章评论失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取文章评论失败\", error.message);\r\n    ElMessage.error('获取文章评论失败');\r\n  }\r\n};\r\n\r\n//获取一级评论(最热)\r\nconst fetchCommentsHot = async (articleId,currentPage) => {\r\n  if(currentPage === 1){\r\n    records.value = [];\r\n  }\r\n  try {\r\n    const response = await axios.get(\"/comment/list\", {\r\n      params: {\r\n        pageSize: 10,\r\n        currentPage: currentPage,\r\n        articleId: articleId,\r\n        type:0,\r\n        category:0,\r\n      },\r\n    });\r\n    if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n      response.data.data.records.forEach(record => initPaginationState(record.id));\r\n      const updates = response.data.data.records.map(async (record) => {\r\n        const newAvatar = await getUsersAvatarFromCOS(record.userId);\r\n        const verified = await fetchUserInformation(record.userId);\r\n        return {\r\n          ...record,\r\n          verified,\r\n          showComments: false,\r\n          showReported: false,\r\n          showMore: false,\r\n          newAvatar // 新获取的头像\r\n        };\r\n      });\r\n      const updatedRecords = await Promise.all(updates);\r\n      records.value = [...records.value, ...updatedRecords];\r\n    }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n      // ElMessage.info('已加载所有数据');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      console.error(\"获取文章评论失败:\",response.data.msg || \"Unknown error\");\r\n      ElMessage.error('获取文章评论失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取文章评论失败\", error.message);\r\n    ElMessage.error('获取文章评论失败');\r\n  }\r\n};\r\n\r\n//根据一级评论id获取对应二级评论\r\nconst fetchReplies = async (commentId, currentPage, pageSize) => {\r\n  try {\r\n    const response = await axios.get(\"/comment/reply/list\", {\r\n      params: {\r\n        pageSize: pageSize,\r\n        currentPage: currentPage,\r\n        commentId: commentId,\r\n      },\r\n    });\r\n    if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n      repliesMap.value[commentId] = response.data.data.records;\r\n      if (paginationStates[commentId]) {\r\n        paginationStates[commentId].pageCount = Math.ceil(response.data.data.total / pageSize);\r\n      }\r\n      const updates = repliesMap.value[commentId].map(async (record) => {\r\n        const newAvatar = await getUsersAvatarFromCOS(record.userId);\r\n        const verified = await fetchUserInformation(record.userId);\r\n        return {\r\n          ...record,\r\n          verified,\r\n          showReported: false, // 控制评论的举报按钮是否显示\r\n          showMore: false, // 控制评论“more”图标是否显示\r\n          newAvatar,\r\n        };\r\n      });\r\n      repliesMap.value[commentId] = await Promise.all(updates);\r\n    }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n      // ElMessage.info('已加载所有数据');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      console.error( \"获取二级评论接口失败:\", response.data.msg || \"Unknown error\" );\r\n      ElMessage.error('获取二级评论接口失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\" 获取二级评论接口失败\", error.message);\r\n    ElMessage.error('获取二级评论接口失败');\r\n  }\r\n};\r\n\r\n//点击一级评论的评论按钮，展开对应的二级评论\r\nconst handleSubComment =(recordId) =>{\r\n  const record = records.value.find(r => r.id === recordId);\r\n  if (record) {\r\n    record.showComments = !record.showComments;\r\n  }\r\n  if (record.showComments) {\r\n    // 初始化分页状态，如果尚未初始化\r\n    initPaginationState(recordId);\r\n    // 使用该一级评论的分页状态来获取二级评论\r\n    fetchReplies(recordId, paginationStates[recordId].currentPage, paginationStates[recordId].pageSize);\r\n  }\r\n}\r\n\r\n//最顶部的评论框提交的相关接口\r\nconst levelOneCommentContent = ref(\"\");\r\nconst handlerlevelOneComment = async () => {\r\n  if (!levelOneCommentContent.value) {\r\n    ElMessage.error(\"评论内容不能为空!\");\r\n    return;\r\n  }\r\n  try {\r\n    const response = await axios.post(\"/comment/send\", {\r\n      authorId:articleData.value.userId,\r\n      authorName:articleData.value.username,\r\n      worksId: articleId,\r\n      worksTitle:articleData.value.title,\r\n      userId: userId,\r\n      username: userName,\r\n      content: levelOneCommentContent.value,\r\n      type:0,\r\n    });\r\n    if (response.data.code === 1) {\r\n      const newReplyId = response.data.map.id;\r\n      ElMessage.success(\"评论成功!\");\r\n      const time = new Date()\r\n      // 假设并构造新的评论\r\n      const newComment = {\r\n        id: newReplyId, // 临时ID，实际应用中这应该是由后台返回的\r\n        newAvatar: newUserAvater.value,\r\n        username: userName, // 假设的用户名，实际上可以从用户会话或其他地方获取\r\n        content: levelOneCommentContent.value,\r\n        createTime: formatDateTime(time), // 使用当前时间作为评论时间\r\n        state:0, // 初始状态下，该评论未被点赞\r\n        likeCount: 0,\r\n        replyCount: 0,\r\n        articleId: articleId, // 假设的文章ID\r\n      };\r\n      // 将新评论添加到records数组的开头\r\n      records.value.unshift(newComment);\r\n      // 清除评论输入框的内容\r\n      levelOneCommentContent.value = \"\";\r\n    } else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      ElMessage.error(\"评论失败: \" + (response.data.msg || \"未知错误\"));\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error(\"提交评论时出现错误: \" + error.message);\r\n  }\r\n};\r\n\r\n//一级评论框的内容获取\r\nconst handleReplyToFirstLevelComment = async (comment) => {\r\n  if (!replyCommentContent.value) {\r\n    ElMessage.error(\"回复内容不能为空!\");\r\n    return;\r\n  }\r\n  try {\r\n    const response = await axios.post(\"/comment/reply/send\", {\r\n      userId: userId, \r\n      username: userName,\r\n      worksId: articleId,\r\n      worksTitle:articleData.value.title,\r\n      commentId: comment.id,\r\n      content: replyCommentContent.value,\r\n      type:0,\r\n    });\r\n    if (response.data.code === 1) {\r\n      ElMessage.success(\"回复成功!\");\r\n      // 折叠回复框\r\n      activeReplyBoxId.value = null;\r\n      comment.replyCount = response.data.map.replyCount;\r\n      comment.showComments = false;\r\n      replyCommentContent.value = \"\";\r\n    } else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else {\r\n      ElMessage.error(\"回复失败: \" + (response.data.msg || \"未知错误\"));\r\n    }\r\n  } catch (error) {\r\n    ElMessage.error(\"提交回复时出现错误: \" + error.message);\r\n  }\r\n};\r\n\r\n\r\n//一级评论的点赞接口，接受一个 record 作为参数\r\nasync function increaseCount(record) {\r\n  try {\r\n      const config = record.state === 0\r\n          ? {\r\n              method: 'put',\r\n              url: `/comment/like`,\r\n              params: { id: record.id , userId : record.userId}\r\n          }\r\n          : {\r\n              method: 'delete',\r\n              url: `/comment/unlike`,\r\n              params: { id: record.id , userId : record.userId}\r\n          };\r\n      const response = await axios(config);\r\n      if (response.data && response.data.code === 1) {\r\n        record.state  = record.state === 0 ? 1 : 0;\r\n        record.likeCount = response .data.data;\r\n        console.log('点赞/取消赞 成功');\r\n      } else if(response.data.code === 0 && response.data.msg){\r\n          ElMessage.error(response.data.msg.toString());\r\n      }else {\r\n        console.error(response.data.msg || 'Unknown error');\r\n        ElMessage.error('点赞失败');\r\n      }\r\n  } catch (error) {\r\n      console.error('获取点赞状态失败', error.message);\r\n      ElMessage.error('点赞动态失败');\r\n  }\r\n}\r\n\r\n  //二级评论的点赞接口，接受一个 reply 作为参数\r\n  async function increaseCount2(reply) {\r\n  try {\r\n      const config = reply.state === 0\r\n        ? {\r\n            method: 'put',\r\n            url: `comment/reply/like`,\r\n            params: { id: reply.id , userId : reply.userId}\r\n        }\r\n        : {\r\n            method: 'delete',\r\n            url: `/comment/reply/unlike`,\r\n            params: { id: reply.id , userId : reply.userId}\r\n        };\r\n      const response = await axios(config);\r\n      if (response.data && response.data.code === 1) {\r\n        reply.state  = reply.state === 0 ? 1 : 0;\r\n        reply.likeCount = response.data.data;\r\n      } else if(response.data.code === 0 && response.data.msg){\r\n          ElMessage.error(response.data.msg.toString());\r\n      }else {\r\n        ElMessage.error('点赞操作失败');\r\n        console.error(response.data.msg || 'Unknown error');\r\n      }\r\n  } catch (error) {\r\n      console.error('获取点赞状态失败', error.message);\r\n  }\r\n}\r\n\r\n//一级回复框的折叠\r\nconst activeReplyBoxId = ref(null);\r\nconst toggleReplyBox = (id) => {\r\n  activeReplyBoxId.value = activeReplyBoxId.value === id ? null : id;\r\n};\r\n\r\n  // 获取用户信息\r\nconst fetchUserInformation = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`/users/${userId}`);\r\n    if(response.data.code === 1){\r\n        return (response.data.data.verified);\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        ElMessage.error('获取用户信息失败');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"获取用户信息失败\", error);\r\n    ElMessage.error('获取用户信息失败');\r\n  }\r\n};\r\n\r\n\r\nonMounted(() => {\r\n  fetchArticleContent(articleId);\r\n  fetchCommentsNew(articleId,currentPage.value);\r\n})\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.bottom{\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 20px 0 20px 2rem;\r\n}\r\n::v-deep .el-pagination__rightwrapper .el-pagination__total{\r\n  display: none !important;;\r\n}\r\n.cnav {\r\n  display: flex;\r\n  width: 85%;\r\n  padding: 11px 12px 11px 12px;\r\n  align-items: flex-start;\r\n  gap: 32px;\r\n  flex-shrink: 0;\r\n  margin: 10px auto 20px;\r\n}\r\n.ctext1 {\r\n  font-size: 18px;\r\n}\r\n.ml-4 span {\r\n  display: inline-block;\r\n  text-align: center;\r\n  width: 50px;\r\n  height: 20px;\r\n  font-size: 14px;\r\n}\r\n.ml-4 .button_gap {\r\n  width: 10px;\r\n  height: 20px;\r\n  font-size: 14px;\r\n}\r\n\r\n.commont_body {\r\n  width: 85%;\r\n  height: auto;\r\n  margin: 0px auto;\r\n}\r\n\r\n.commentListCont {\r\n  margin: 10px auto;\r\n  width: 80%;\r\n  min-width: 650px;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n/* 头像 */\r\n.userPhoto_1,\r\n.userPhoto_2 {\r\n  margin-right: 15px;\r\n}\r\n.userPhoto_1 {\r\n  width: 2.5rem;\r\n  height: 2.5rem;\r\n}\r\n.userPhoto_2 {\r\n  width: 2rem;\r\n  height: 2rem;\r\n}\r\n.navbar-avatar {\r\n  border-radius: 50%;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n/*一级,二级,评论输入*/\r\n.commentInput {\r\n  width: 106%;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.commentInput .input {\r\n  border-radius: 16px;\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n} \r\n.commentInput .input > button {\r\n  border-radius: 20px;\r\n  height: 30px;\r\n  padding: 0 15px;\r\n  border: none;\r\n  box-sizing: border-box;\r\n  background-color: #9fa9ca;\r\n  cursor: pointer;\r\n}\r\n.commentInput .input > button:active {\r\n  box-shadow: 1px 1px 5px 5px #999 inset;\r\n}\r\n\r\n/* 评论列表 */\r\n.commentList {\r\n  flex: 1;\r\n  width: 100%;\r\n  padding: 0 5px;\r\n  margin-top: 15px;\r\n}\r\n.levelOneComment {\r\n  display: flex; \r\n  align-items: flex-start;\r\n  padding: 10px;\r\n  margin-bottom: 2rem;\r\n}\r\n.userComment {\r\n  flex: 1; \r\n}\r\n.userName {\r\n  color: #393939;\r\n  font-family: Microsoft YaHei;\r\n  margin-top: 2px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n}\r\n.content {\r\n  margin-top: 5px;\r\n  color: #000;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 16px;\r\n  margin: 1rem 0 1.5rem;\r\n  max-width: 100%;\r\n  line-height: 1.6;\r\n}\r\n.operationBar {\r\n  margin-bottom: 3px;\r\n  width: 90%;\r\n  display: flex; \r\n  justify-content: space-between;\r\n  align-items: center; \r\n  position: relative;\r\n}\r\n.operationBar-right{\r\n  display: flex;\r\n  width: auto;\r\n  align-items: center;\r\n}\r\n.more{\r\n  cursor: pointer;\r\n  position: absolute;\r\n  right: -100px;\r\n}\r\n.hover-box{\r\n  position: absolute;\r\n  top: 20px ;\r\n  right: -120px;\r\n  width: 50px;\r\n  height: 26px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 5px; \r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n.report-hover{\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  color: #5d5d5d;\r\n}\r\n.commentDate {\r\n  color: #9b9b9b;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  margin-right: 70px;\r\n}\r\n.like-pic {\r\n  height: 16px;\r\n  width: 16px;\r\n  margin-right: 0.2rem;\r\n  cursor: pointer;\r\n}\r\n.like-count {\r\n  display: inline-block;\r\n  width: 45px;\r\n  height: 14px;\r\n  color: #2d2d2d;;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  line-height: 14px;\r\n  margin-right: 45px;\r\n}\r\n.commentBtn {\r\n  color: #005b82;\r\n  height: 21px;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  cursor: pointer; \r\n}\r\n.userinput2 {\r\n  width: 89%;\r\n  padding: 14px;\r\n  display: flex;\r\n  margin: 25px 0px 25px 63px;\r\n  align-items: center;\r\n}\r\n.userinput2 .input {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n}\r\n.userinput2 .input > button {\r\n  border-radius: 20px;\r\n  height: 30px;\r\n  padding: 0 15px;\r\n  border: none;\r\n  box-sizing: border-box;\r\n  background-color: #9fa9ca;\r\n  cursor: pointer;\r\n}\r\n.userinput2 .input > button:active {\r\n  box-shadow: 1px 1px 5px 5px #999 inset;\r\n}\r\n.leveltwoComment {\r\n  display: flex;  \r\n  align-items: flex-start;  \r\n  margin-bottom: 10px;\r\n  margin-left: 65px;\r\n}\r\n.userComment2 {\r\n  flex: 1; \r\n}\r\n\r\n.userName2 {\r\n  color: #393939;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n}\r\n.content2 {\r\n  color: #000;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  margin: 1rem 0 1.5rem;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n}\r\n\r\n.operationBar2 {\r\n  margin-bottom: 3px;\r\n  width: 75%;\r\n  display: flex; \r\n  justify-content: space-between;\r\n  align-items: center; \r\n  position: relative;\r\n}\r\n.commentDate2 {\r\n  color: #9b9b9b;\r\n  font-family: Microsoft YaHei;\r\n  font-size: 12px;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  margin-right: 70px;\r\n}\r\n.like-count2 {\r\n  display: inline-block;\r\n  width: 45px;\r\n  height: 12px;\r\n  color: #2d2d2d;;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  line-height: 12px;\r\n  margin-right: 90px;\r\n}\r\n.like-pic2 {\r\n  width: 16px;\r\n  height: 16px;\r\n  margin-right: 0.2rem;\r\n  cursor: pointer;\r\n}\r\n.commentBtn2 {\r\n  color: #005B82;;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  cursor: pointer;  \r\n}\r\n.cursor-pointer {\r\n    cursor: pointer;\r\n}\r\n.cursor-pointer:hover,\r\n.active {\r\n    color: #667bc0;  \r\n}\r\n@media (max-width:768px){\r\n  .cnav{\r\n    width: auto;\r\n  }\r\n  .commont_body{\r\n    width: auto;\r\n    margin-left: 0px;\r\n  }\r\n  .commentListCont{\r\n    width: 95%;\r\n    min-width: auto;\r\n  }\r\n  .commentInput{\r\n    width: 100%;\r\n  }\r\n  .commentInput .input{\r\n    width: auto;\r\n  }\r\n  .commentInput .input>input{\r\n    width: 83%;\r\n    padding: 0 0.5rem;\r\n  }\r\n  .commentInput .input>button,\r\n  .userinput2 .input>button{\r\n    width: 15%;\r\n    padding: 0 3%;\r\n    font-size: 0.8rem;\r\n  }\r\n  .levelOneComment {\r\n    margin-left: 0px;\r\n  }\r\n  .userPhoto_1 ,\r\n  .userPhoto_2 {\r\n    width: 2rem;\r\n    height: 2rem;\r\n    margin-right: 0.5rem;\r\n  }\r\n  .operationBar {\r\n    width: auto;\r\n  }\r\n  .commentDate{\r\n    width: auto;\r\n    margin-right: 0px;\r\n  }\r\n  .like-count,\r\n  .like-count2{\r\n    width: auto;\r\n    margin-right: 8px;\r\n  }\r\n  .leveltwoComment {\r\n    margin-left: 2rem;\r\n  }\r\n  .userinput2{\r\n    width: 93%;\r\n    padding: 0px;\r\n    height: auto;\r\n  }\r\n  .userinput2 .input>input{\r\n    width: 83%;\r\n    padding: 10px 15px;\r\n  }\r\n  .operationBar2 {\r\n    width: 90%;\r\n  }\r\n  .commentDate2,\r\n  .like-count2 {\r\n    width: auto;\r\n    margin-right: 0px;\r\n    margin-left: 0.3rem;\r\n  }\r\n  .commentDate,\r\n  .commentDate2{\r\n    font-size: 0.8rem;\r\n  }\r\n  .content2, \r\n  .userName2{\r\n    font-size: 1rem;\r\n  }\r\n  .userinput2 .input>button{\r\n    height: 27px;\r\n  }  \r\n  .bottom{\r\n    width: auto;\r\n  }\r\n  .bottom .el-pagination{\r\n    justify-content: center;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}