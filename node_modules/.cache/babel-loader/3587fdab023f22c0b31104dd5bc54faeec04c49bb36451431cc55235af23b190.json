{"ast":null,"code":"import { ElMessageBox, ElMessage } from 'element-plus';\nimport { ref, onMounted, watch } from 'vue';\nimport { getArticleCoverageFromCOS } from '@/utils/cosService';\nimport axios from '@/utils/request';\nimport { convertDateFormat } from '@/utils/timeFormat';\nimport { useRouter } from 'vue-router';\nimport defaultCoverage from '@/assets/CreateCenter/DraftCov.png';\nimport { openUrl } from '@/utils/routeJudge';\nexport default {\n  __name: 'ArticleManagement',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const currentPageArticle = ref(1);\n    // const userId = localStorage.getItem(\"userId\"); // 获取用户ID\n    const filter = ref('all');\n    const selectedColumnCategory = ref();\n    const keyword = ref();\n    // const columnGroup = ref([]);\n    const articleGroup = ref([]);\n    // const newColumnArray = ref([]);//存放用户的文章专栏数据\n    const type = ref(0);\n    const showDeletebtn = ref(false); //控制删除按钮是否显示\n\n    //点击编辑按钮，跳转至编辑器数据回显页面\n    const goToReWangEditorEditor = articleId => {\n      // const routeLocation = router.resolve({ path: `/WangEditor/${articleId}` });\n      // window.open(routeLocation.href, '_blank');\n      openUrl(`/WangEditor/${articleId}`);\n    };\n\n    //点击编辑按钮，跳转至编辑器数据回显页面\n    const goToReMarkDownEditor = articleId => {\n      // const routeLocation = router.resolve({ path: `/MarkDown/${articleId}` });\n      // window.open(routeLocation.href, '_blank');\n      openUrl(`/MarkDown/${articleId}`);\n    };\n\n    //点击查看进入文章展示页面\n    const goToTheArticle = articleId => {\n      // const routeLocation = router.resolve({ path: `/TheArticle/${articleId}`});\n      // window.open(routeLocation.href, '_blank');\n      openUrl(`/TheArticle/${articleId}`);\n    };\n\n    //点击删除的弹框\n    const deleteArticle = async article => {\n      try {\n        await ElMessageBox.confirm('确定要删除该文章吗？', {\n          confirmButtonText: '确认删除',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        handleDelete(article);\n      } catch {\n        console.log('关闭弹框');\n      }\n    };\n\n    //点击范围分类\n    function handleTapageClick(tabName) {\n      if (tabName === 'all') {\n        type.value = 0;\n      } else if (tabName === 'mesee') {\n        type.value = 1;\n      } else if (tabName === 'audit') {\n        type.value = 3;\n      } else if (tabName === 'draft') {\n        type.value = 2;\n      } else if (tabName === 'recycleBin') {\n        type.value = 4;\n      }\n      console.log(tabName);\n    }\n\n    // 使用watch来监听type的变化\n    watch(type, (newValue, oldValue) => {\n      currentPageArticle.value = 1;\n      keyword.value = '';\n      getArticleList(keyword.value, currentPageArticle.value, newValue);\n    });\n\n    // // 点击专栏分类\n    // function handleColumnCategoryChange() {\n    //     selectedColumnCategory.value = getIdFromColumnName( selectedColumnCategory.value);\n    //     currentPageArticle.value = 1;\n    //     keyword.value ='';\n    //     getArticleList(selectedColumnCategory.value, keyword.value, currentPageArticle.value,type.value);\n    // }\n\n    //点击搜索框\n    function handleSearch() {\n      currentPageArticle.value = 1;\n      getArticleList(keyword.value, currentPageArticle.value, type.value);\n    }\n\n    // //根据专栏名获取专栏ID\n    // function getIdFromColumnName(columnName) {\n    //     const matchedItem = newColumnArray.value.find(item => item.name == columnName);\n    //     return matchedItem ? matchedItem.id : null;  \n    // }\n\n    // //根据专栏id获取专栏名\n    // function getNameFromColumnId(columnId) {\n    //     const matchedItem = newColumnArray.value.find(item => item.id == columnId);\n    //     return matchedItem ? matchedItem.name : null;  \n    // }\n\n    //根据文章分页数据判断文章类型\n    function juageArticleType(type) {\n      if (type === 0) return '原创';\n      if (type === 1) return '转载';\n      if (type === 2) return '翻译';\n    }\n    //根据文章分页数据判断文章状态\n    function juageArticleStatus(status) {\n      if (status === 0) return '草稿';\n      if (status === 1) return '审核中';\n      if (status === 2) return '已发表';\n      if (status === 4) return '被举报';\n      if (status === -1) return '审核未通过';\n    }\n    //根据文章分页数据判断文章付费类型\n    function juageArticlePayType(coin, point) {\n      if (coin === 0 && point === 0) return '免费';else return '付费';\n    }\n\n    //根据文章分页数据判断文章可见范围\n    function juageArticleAccess(access) {\n      if (access === 0) return '全部可见';\n      if (access === 1) return '仅我可见';\n    }\n\n    // 添加一个锁状态\n    let isLoading = false;\n    async function load() {\n      if (isLoading) return; // 如果已经在加载，则直接返回\n      isLoading = true; // 设置加载状态为true\n      try {\n        if (currentPageArticle.value === 1) {\n          currentPageArticle.value++;\n        }\n        // 加载类型2的数据\n        await getArticleList(keyword.value, currentPageArticle.value, type.value);\n        currentPageArticle.value++;\n      } catch (error) {\n        console.error(error);\n      } finally {\n        isLoading = false; // 无论加载成功或失败，都重置加载状态\n      }\n    }\n\n    //删除文章接口\n    async function handleDelete(article) {\n      try {\n        const response = await axios.delete(`/article/${article.id}`);\n        if (response.data.code === 1) {\n          article.showDeletebtn = false;\n          ElMessage.success('删除文章成功！');\n          getArticleList(keyword.value, currentPageArticle.value, type.value);\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error('删除文章失败', response.data.msg);\n          ElMessage.error('删除文章失败');\n        }\n      } catch (error) {\n        console.error(\"删除文章失败\", error);\n        ElMessage.error('删除文章失败');\n      }\n    }\n\n    //因为要获取多种文章数据列表，所以封装一下获取到文章分类数据后的处理函数\n    async function processArticleGroup(articleArray) {\n      const updates = articleArray.map(async record => {\n        const showDeletebtn = false;\n        const newCoverPicture = await getArticleCoverageFromCOS(record.id);\n        const postTime = convertDateFormat(record.postTime);\n        let tags = {};\n        tags.type = juageArticleType(record.type);\n        tags.articleStatus = juageArticleStatus(record.status);\n        // tags.column = getNameFromColumnId(record.columnId);\n        tags.payType = juageArticlePayType(record.requiredCoin, record.requiredPoint);\n        tags.access = juageArticleAccess(record.access);\n        return {\n          ...record,\n          showDeletebtn,\n          newCoverPicture,\n          postTime,\n          tags\n        };\n      });\n      // 等待所有的并行操作完成\n      return Promise.all(updates);\n    }\n\n    //获取文章分页数据\n    async function getArticleList(textValue, currentPage, type) {\n      try {\n        if (currentPage === 1) {\n          articleGroup.value = [];\n        }\n        let params = {\n          currentPage: currentPage,\n          type: type\n        };\n        // if (selectedColumnId) params.columnId = selectedColumnId;\n        if (textValue) params.title = textValue;\n        const response = await axios.get('/users/article/list', {\n          params: params\n        });\n        if (response.data.code === 1 && response.data.data.records.length > 0) {\n          const articleGroupNew = response.data.data.records;\n          const processedArticleGroup = await processArticleGroup(articleGroupNew);\n          articleGroup.value = [...articleGroup.value, ...processedArticleGroup];\n        } else if (response.data.code === 1 && response.data.data.records.length === 0) {\n          // ElMessage.info('已加载所有数据');\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取文章数据失败\");\n        }\n      } catch (error) {\n        console.error(\"请求文章接口失败\", error);\n      }\n    }\n\n    // // 获取文章专栏列表\n    // async function getColumnArticleList() {\n    //   try {\n    //     const response = await axios.get('/column',{\n    //       params: {\n    //           type:0,\n    //           page:1,\n    //           pageSize:1000,\n    //           userId:userId,\n    //         }\n    //     });\n    //     if (response.data.code === 1 ){\n    //         columnGroup.value = response.data.data.records;\n    //         console.log(columnGroup.value);\n    //     }else if(response.data.code === 0 && response.data.msg){\n    //         ElMessage.error(response.data.msg.toString());\n    //     }else{\n    //         console.error(\"获取文章专栏数据失败\");\n    //         ElMessage.error(\"获取文章专栏数据失败\");\n    //     }\n    //   } catch (error) {\n    //     console.error(\"请求文章专栏接口失败\", error); \n    //     ElMessage.error(\"请求文章专栏接口失败\");\n    //   }\n    // }\n\n    //一定要先等待获取专栏的接口完成，不然在获取文章分页数据时无法确定每篇文章的专栏名称\n    onMounted(async () => {\n      // await getColumnArticleList();  \n      await getArticleList(keyword.value, currentPageArticle.value, type.value);\n    });\n    const __returned__ = {\n      router,\n      currentPageArticle,\n      filter,\n      selectedColumnCategory,\n      keyword,\n      articleGroup,\n      type,\n      showDeletebtn,\n      goToReWangEditorEditor,\n      goToReMarkDownEditor,\n      goToTheArticle,\n      deleteArticle,\n      handleTapageClick,\n      handleSearch,\n      juageArticleType,\n      juageArticleStatus,\n      juageArticlePayType,\n      juageArticleAccess,\n      get isLoading() {\n        return isLoading;\n      },\n      set isLoading(v) {\n        isLoading = v;\n      },\n      load,\n      handleDelete,\n      processArticleGroup,\n      getArticleList,\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      ref,\n      onMounted,\n      watch,\n      get getArticleCoverageFromCOS() {\n        return getArticleCoverageFromCOS;\n      },\n      get axios() {\n        return axios;\n      },\n      get convertDateFormat() {\n        return convertDateFormat;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get defaultCoverage() {\n        return defaultCoverage;\n      },\n      get openUrl() {\n        return openUrl;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ElMessageBox","ElMessage","ref","onMounted","watch","getArticleCoverageFromCOS","axios","convertDateFormat","useRouter","defaultCoverage","openUrl","router","currentPageArticle","filter","selectedColumnCategory","keyword","articleGroup","type","showDeletebtn","goToReWangEditorEditor","articleId","goToReMarkDownEditor","goToTheArticle","deleteArticle","article","confirm","confirmButtonText","cancelButtonText","handleDelete","console","log","handleTapageClick","tabName","value","newValue","oldValue","getArticleList","handleSearch","juageArticleType","juageArticleStatus","status","juageArticlePayType","coin","point","juageArticleAccess","access","isLoading","load","error","response","delete","id","data","code","success","msg","toString","processArticleGroup","articleArray","updates","map","record","newCoverPicture","postTime","tags","articleStatus","payType","requiredCoin","requiredPoint","Promise","all","textValue","currentPage","params","title","get","records","length","articleGroupNew","processedArticleGroup"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/CreateCenter/components/WorkManagement/ArticleManagement.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-tabs v-model=\"filter\"  @tab-change=\"handleTapageClick\">\r\n            <el-tab-pane label=\"全部\" name=\"all\"></el-tab-pane>\r\n            <el-tab-pane label=\"仅我可见\" name=\"mesee\"></el-tab-pane>\r\n            <el-tab-pane label=\"审核中\" name=\"audit\"></el-tab-pane>\r\n            <el-tab-pane label=\"草稿箱\" name=\"draft\"></el-tab-pane>\r\n            <el-tab-pane label=\"回收站\" name=\"recycleBin\"></el-tab-pane>\r\n        </el-tabs>\r\n        <div class=\"search\">\r\n            <!-- <el-select v-model=\"selectedColumnCategory\" placeholder=\"专栏分类\" @change=\"handleColumnCategoryChange\">\r\n                    <el-option-group>\r\n                        <el-option :value=\"option.name\" v-for=\"option in columnGroup\" :key=\"option.id\"></el-option>\r\n                    </el-option-group>\r\n            </el-select>  -->\r\n            <div style=\"display: flex; align-items: center; width: 300px; height: 35px; border: 1px solid #ccc; border-radius: 4px;\">\r\n                <input type=\"text\" style=\"flex: 1; padding: 6px 10px; border: none; outline: none; font-size: 14px;\"\r\n                    placeholder=\"请输入关键字\" v-model=\"keyword\">\r\n                <div style=\"padding: 0 10px;\" class=\"search-box\" @click=\"handleSearch\">\r\n                    <el-icon>\r\n                        <Search />\r\n                    </el-icon>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n        <div class=\"content-container\" v-infinite-scroll=\"load\" infinite-scroll-distance=\"100\" infinite-scroll-immediate=\"false\">\r\n            <!-- 文章管理内容 -->\r\n            <div class=\"content-box\" v-for=\"compositionOption in articleGroup\" :key=\"compositionOption.id\">\r\n                <!-- 若封面图片为空，则设置为默认文章封面 -->\r\n                <img :src=\"compositionOption.tags.articleStatus === '草稿' ? defaultCoverage : compositionOption.newCoverPicture\" alt=\"Composition Image\" class=\"image\">\r\n                <div class=\"title\">\r\n                    <div class=\"head\">{{ compositionOption.title }}</div>\r\n                    <div class=\"tags\" style=\"display: flex; gap: 8px;\">\r\n                        <el-tag v-for=\"tag in compositionOption.tags\" :key=\"tag\" size=\"mini\">{{ tag }}</el-tag>\r\n                    </div>\r\n                    <div class=\"foot\">\r\n                        <div class=\"icon\">\r\n                             <div class=\"icon-box\">\r\n                                <img src=\"@/assets/LikeBefore.svg\" alt=\"\">\r\n                                <span class=\"icon-text\">{{ compositionOption.likeCount }}</span>\r\n                            </div>\r\n                            <div class=\"icon-box\">\r\n                                <img src=\"@/assets/Comment.svg\" alt=\"\">\r\n                                <span class=\"icon-text\">{{ compositionOption.commentCount}}</span>\r\n                            </div>\r\n                            <div class=\"icon-box\">\r\n                                <img src=\"@/assets/InsertCoins.svg\" alt=\"\">\r\n                                <span class=\"icon-text\">{{ compositionOption.rewardCount}}</span>\r\n                            </div>\r\n                            <div class=\"icon-box\">\r\n                                <img src=\"@/assets/FavoriteBefore.svg\" alt=\"\">\r\n                                <span class=\"icon-text\">{{ compositionOption.favoriteCount }}</span>\r\n                             </div>\r\n                             <div class=\"icon-box\">\r\n                                <img src=\"@/assets/Transpond.svg\" alt=\"\">\r\n                                <span class=\"icon-text\">{{ compositionOption.transmitCount }}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"time\">\r\n                    <div class=\"detailed-time\">{{ compositionOption.postTime }}</div>\r\n                    <div class=\"btn\">\r\n                        <el-button v-if=\"compositionOption.tags.articleStatus == '已发表'\" @click=\"goToTheArticle(compositionOption.id)\">\r\n                            <el-icon><Plus /></el-icon>查看\r\n                        </el-button>\r\n                        <el-button v-if=\"compositionOption.editorType === 0 && compositionOption.tags.articleStatus == '草稿'\" @click=\"goToReWangEditorEditor(compositionOption.id)\">\r\n                            <el-icon><Plus /></el-icon>编辑\r\n                        </el-button>\r\n                        <el-button v-if=\"compositionOption.editorType === 1 && compositionOption.tags.articleStatus == '草稿'\" @click=\"goToReMarkDownEditor(compositionOption.id)\">\r\n                            <el-icon><Plus /></el-icon>编辑\r\n                        </el-button>\r\n                        <!-- <el-button>\r\n                            <el-icon><Tickets /></el-icon>数据\r\n                        </el-button> -->\r\n                        <el-button @click=\"compositionOption.showDeletebtn=true\">\r\n                            <el-icon><MoreFilled /></el-icon>\r\n                        </el-button>\r\n                        <div v-show=\"compositionOption.showDeletebtn\" @click=\"deleteArticle(compositionOption)\" @mouseleave=\"showDeletebtn=false\" class=\"delete-btn\">删除</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <el-empty \r\n                v-if=\"articleGroup.length === 0 || !articleGroup\" \r\n                :image-size=\"200\" \r\n                description=\"您还没有文章呢，快去创作吧！\"\r\n            />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ElMessageBox , ElMessage } from 'element-plus';\r\nimport { ref,onMounted,watch} from 'vue';\r\nimport { getArticleCoverageFromCOS } from '@/utils/cosService';\r\nimport axios from '@/utils/request';\r\nimport { convertDateFormat } from '@/utils/timeFormat'; \r\nimport { useRouter } from 'vue-router';\r\nimport defaultCoverage from '@/assets/CreateCenter/DraftCov.png'\r\nimport { openUrl } from '@/utils/routeJudge'\r\n\r\nconst router = useRouter()\r\nconst currentPageArticle = ref(1);\r\n// const userId = localStorage.getItem(\"userId\"); // 获取用户ID\r\nconst filter = ref('all');\r\nconst selectedColumnCategory = ref();\r\nconst keyword = ref();\r\n// const columnGroup = ref([]);\r\nconst articleGroup = ref([]);\r\n// const newColumnArray = ref([]);//存放用户的文章专栏数据\r\nconst type = ref(0);\r\nconst showDeletebtn = ref(false)//控制删除按钮是否显示\r\n\r\n//点击编辑按钮，跳转至编辑器数据回显页面\r\nconst goToReWangEditorEditor = (articleId) =>{\r\n    // const routeLocation = router.resolve({ path: `/WangEditor/${articleId}` });\r\n    // window.open(routeLocation.href, '_blank');\r\n    openUrl(`/WangEditor/${articleId}`)\r\n    \r\n}\r\n\r\n//点击编辑按钮，跳转至编辑器数据回显页面\r\nconst goToReMarkDownEditor = (articleId) =>{\r\n    // const routeLocation = router.resolve({ path: `/MarkDown/${articleId}` });\r\n    // window.open(routeLocation.href, '_blank');\r\n    openUrl(`/MarkDown/${articleId}`)\r\n}\r\n\r\n\r\n//点击查看进入文章展示页面\r\nconst goToTheArticle = (articleId) =>{\r\n    // const routeLocation = router.resolve({ path: `/TheArticle/${articleId}`});\r\n    // window.open(routeLocation.href, '_blank');\r\n    openUrl(`/TheArticle/${articleId}`)\r\n}\r\n\r\n//点击删除的弹框\r\nconst deleteArticle = async (article) => {\r\n  try {\r\n    await ElMessageBox.confirm(\r\n      '确定要删除该文章吗？',\r\n      {\r\n        confirmButtonText: '确认删除',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }\r\n    );\r\n    handleDelete(article);\r\n  } catch {\r\n    console.log('关闭弹框')\r\n  }\r\n}\r\n\r\n//点击范围分类\r\nfunction handleTapageClick(tabName){\r\n    if(tabName === 'all' ){\r\n        type.value = 0;\r\n    }else if (tabName === 'mesee'){\r\n        type.value = 1;\r\n    }\r\n    else if (tabName === 'audit'){\r\n        type.value = 3;\r\n    }\r\n    else if (tabName === 'draft'){\r\n        type.value = 2;\r\n    }\r\n    else if (tabName === 'recycleBin'){\r\n        type.value = 4;\r\n    }\r\n    console.log(tabName);\r\n}\r\n\r\n// 使用watch来监听type的变化\r\nwatch(type, (newValue, oldValue) => {\r\n    currentPageArticle.value = 1;\r\n    keyword.value ='';\r\n    getArticleList(keyword.value, currentPageArticle.value,newValue);\r\n});\r\n\r\n\r\n// // 点击专栏分类\r\n// function handleColumnCategoryChange() {\r\n//     selectedColumnCategory.value = getIdFromColumnName( selectedColumnCategory.value);\r\n//     currentPageArticle.value = 1;\r\n//     keyword.value ='';\r\n//     getArticleList(selectedColumnCategory.value, keyword.value, currentPageArticle.value,type.value);\r\n// }\r\n\r\n//点击搜索框\r\nfunction handleSearch() {\r\n    currentPageArticle.value = 1;\r\n    getArticleList(keyword.value, currentPageArticle.value,type.value);\r\n}\r\n\r\n\r\n// //根据专栏名获取专栏ID\r\n// function getIdFromColumnName(columnName) {\r\n//     const matchedItem = newColumnArray.value.find(item => item.name == columnName);\r\n//     return matchedItem ? matchedItem.id : null;  \r\n// }\r\n\r\n// //根据专栏id获取专栏名\r\n// function getNameFromColumnId(columnId) {\r\n//     const matchedItem = newColumnArray.value.find(item => item.id == columnId);\r\n//     return matchedItem ? matchedItem.name : null;  \r\n// }\r\n\r\n//根据文章分页数据判断文章类型\r\nfunction juageArticleType(type) {\r\n    if(type === 0) return '原创'\r\n    if(type === 1) return '转载'\r\n    if(type === 2) return '翻译'\r\n}\r\n//根据文章分页数据判断文章状态\r\nfunction juageArticleStatus(status) {\r\n    if(status === 0) return '草稿'\r\n    if(status === 1) return '审核中'\r\n    if(status === 2) return '已发表'\r\n    if(status === 4) return '被举报'\r\n    if(status === -1) return '审核未通过'\r\n}\r\n//根据文章分页数据判断文章付费类型\r\nfunction juageArticlePayType(coin,point) {\r\n    if(coin === 0 && point === 0 ) return '免费'\r\n    else return '付费'\r\n}\r\n\r\n\r\n//根据文章分页数据判断文章可见范围\r\nfunction juageArticleAccess(access) {\r\n    if(access === 0) return '全部可见'\r\n    if(access === 1) return '仅我可见'\r\n}\r\n\r\n// 添加一个锁状态\r\nlet isLoading = false;\r\nasync function load() {\r\n    if (isLoading) return; // 如果已经在加载，则直接返回\r\n    isLoading = true; // 设置加载状态为true\r\n    try {\r\n        if(currentPageArticle.value === 1){\r\n            currentPageArticle.value++;\r\n        }\r\n        // 加载类型2的数据\r\n        await getArticleList(keyword.value, currentPageArticle.value,type.value);\r\n        currentPageArticle.value++;\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      isLoading = false; // 无论加载成功或失败，都重置加载状态\r\n    }\r\n}\r\n\r\n//删除文章接口\r\nasync function handleDelete(article) {\r\n    try {\r\n        const response = await axios.delete(`/article/${article.id}`);\r\n        if (response.data.code === 1) {\r\n            article.showDeletebtn = false;\r\n            ElMessage.success('删除文章成功！');\r\n            getArticleList(keyword.value, currentPageArticle.value,type.value);\r\n        } else if(response.data.code === 0 && response.data.msg){\r\n            ElMessage.error(response.data.msg.toString());\r\n        }else {\r\n            console.error('删除文章失败', response.data.msg);\r\n            ElMessage.error('删除文章失败');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"删除文章失败\", error); \r\n        ElMessage.error('删除文章失败');\r\n    }\r\n}\r\n\r\n\r\n//因为要获取多种文章数据列表，所以封装一下获取到文章分类数据后的处理函数\r\nasync function processArticleGroup(articleArray) {\r\n    const updates = articleArray.map(async (record) => {\r\n        const showDeletebtn = false;\r\n        const newCoverPicture = await getArticleCoverageFromCOS(record.id);\r\n        const postTime = convertDateFormat(record.postTime);\r\n        let tags = {}; \r\n        tags.type = juageArticleType(record.type);\r\n        tags.articleStatus = juageArticleStatus(record.status);\r\n        // tags.column = getNameFromColumnId(record.columnId);\r\n        tags.payType = juageArticlePayType(record.requiredCoin,record.requiredPoint);\r\n        tags.access = juageArticleAccess(record.access);\r\n        return {\r\n            ...record, \r\n            showDeletebtn,\r\n            newCoverPicture, \r\n            postTime, \r\n            tags\r\n        };\r\n    });\r\n    // 等待所有的并行操作完成\r\n    return Promise.all(updates);\r\n}\r\n\r\n//获取文章分页数据\r\nasync function getArticleList(textValue,currentPage,type) {\r\n  try {\r\n    if(currentPage === 1){\r\n        articleGroup.value =[];\r\n    }\r\n    let params = {\r\n        currentPage:currentPage,\r\n        type:type,\r\n    };\r\n    // if (selectedColumnId) params.columnId = selectedColumnId;\r\n    if (textValue) params.title = textValue;\r\n    const response = await axios.get('/users/article/list',{ params: params });\r\n    if (response.data.code === 1 && response.data.data.records.length > 0) {\r\n        const articleGroupNew = response.data.data.records;\r\n        const processedArticleGroup = await processArticleGroup(articleGroupNew);\r\n        articleGroup.value = [...articleGroup.value, ...processedArticleGroup];\r\n    }else if (response.data.code === 1 && response.data.data.records.length === 0) {\r\n        // ElMessage.info('已加载所有数据');\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取文章数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求文章接口失败\", error); \r\n  }\r\n}\r\n\r\n// // 获取文章专栏列表\r\n// async function getColumnArticleList() {\r\n//   try {\r\n//     const response = await axios.get('/column',{\r\n//       params: {\r\n//           type:0,\r\n//           page:1,\r\n//           pageSize:1000,\r\n//           userId:userId,\r\n//         }\r\n//     });\r\n//     if (response.data.code === 1 ){\r\n//         columnGroup.value = response.data.data.records;\r\n//         console.log(columnGroup.value);\r\n//     }else if(response.data.code === 0 && response.data.msg){\r\n//         ElMessage.error(response.data.msg.toString());\r\n//     }else{\r\n//         console.error(\"获取文章专栏数据失败\");\r\n//         ElMessage.error(\"获取文章专栏数据失败\");\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"请求文章专栏接口失败\", error); \r\n//     ElMessage.error(\"请求文章专栏接口失败\");\r\n//   }\r\n// }\r\n\r\n//一定要先等待获取专栏的接口完成，不然在获取文章分页数据时无法确定每篇文章的专栏名称\r\nonMounted(async () => {\r\n    // await getColumnArticleList();  \r\n    await getArticleList(keyword.value, currentPageArticle.value,type.value);\r\n})\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.icon-text{\r\n    color:#2d2d2d;\r\n}\r\n.search {\r\n    display: flex;\r\n    gap: 2rem;\r\n}\r\n\r\n.search-box {\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n.content-box {\r\n    display: flex;\r\n    width: 100%;\r\n    border-radius: 4px;\r\n    padding: 1rem 1rem;\r\n    border-bottom: 1px solid #ccc;\r\n}\r\n.image {\r\n    width: 142px;\r\n    height: 100px;\r\n    border-radius: 8px;\r\n}\r\n.title {\r\n    padding-left: 1rem;\r\n    flex: 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n}\r\n.icon {\r\n    width: 50%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    color: #888;\r\n    gap: 8px;\r\n}\r\n.icon-box {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 3px;\r\n}\r\n.icon-box span{\r\n    font-size: 14px;\r\n}\r\n.detailed-time {\r\n    font-size: 14px;\r\n}\r\n\r\n.time {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    padding-right: 1rem;\r\n    color: #888;\r\n    gap: 1rem;\r\n}\r\n\r\n.btn {\r\n    color: black;\r\n    position: relative;\r\n}\r\n.delete-btn{\r\n    position: absolute;\r\n    top: 35px ;\r\n    right: 0px;\r\n    width: 50px;\r\n    height: 26px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 5px; \r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n    cursor: pointer;\r\n    font-size: 14px;\r\n    color: #5d5d5d;\r\n}\r\n.underline {\r\n  border: none;\r\n  border-top: 1px solid #ccc;\r\n}\r\n\r\n/* 去除el-tabs底部灰色横线 */\r\n::v-deep .el-tabs__nav-wrap::after {\r\n    height: 0px;\r\n}\r\n.el-select-dropdown{\r\n    overflow-y: auto;\r\n    height: 180px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}