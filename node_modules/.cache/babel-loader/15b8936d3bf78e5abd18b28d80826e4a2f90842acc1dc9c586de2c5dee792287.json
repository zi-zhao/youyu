{"ast":null,"code":"import TheHeader from \"@/page/components/TheHeader.vue\";\nimport axios from '@/utils/request';\nimport { ref, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'WebDesc',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const detailTitle = ref(''); //选中的问题类型名称\n    const detailTitleId = ref(null); //选中的问题类型ID\n    const menuItems = ref(); //问题类型列表\n    const detailItems = ref(); //某问题类型下对应的问题列表\n\n    const handleItemClick = (itemId, itemName) => {\n      detailTitleId.value = itemId;\n      detailTitle.value = itemName;\n      getQuestions(detailTitleId.value);\n    };\n\n    //获取网站说明类型\n    async function getMenuItems() {\n      try {\n        const response = await axios.get('/explain/list');\n        if (response.data.code === 1) {\n          menuItems.value = response.data.data;\n          if (menuItems.value.length > 0) {\n            detailTitleId.value = menuItems.value[0].kindId; //页面加载时获取第一类问题id\n            detailTitle.value = menuItems.value[0].kindProblem; //页面加载时获取第一类问题的名称\n          }\n          console.log(response.data);\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取问题类型数据失败\");\n          ElMessage.error(\"获取问题类型数据失败\");\n        }\n      } catch (error) {\n        console.error(\"请求问题类型接口失败\", error);\n        ElMessage.error(\"请求问题类型接口失败\");\n      }\n    }\n\n    //获取某一网站问题下的所有回答类型\n    async function getQuestions(id) {\n      try {\n        const response = await axios.get('/explain/problem', {\n          params: {\n            kindId: id\n          }\n        });\n        if (response.data.code === 1) {\n          detailItems.value = response.data.data;\n          console.log(response.data);\n        } else if (response.data.code === 0 && response.data.msg) {\n          ElMessage.error(response.data.msg.toString());\n        } else {\n          console.error(\"获取问题类型数据失败\");\n          ElMessage.error(\"获取问题类型数据失败\");\n        }\n      } catch (error) {\n        console.error(\"请求问题类型接口失败\", error);\n        ElMessage.error(\"请求问题类型接口失败\");\n      }\n    }\n    onMounted(async () => {\n      await getMenuItems();\n      await getQuestions(detailTitleId.value);\n    });\n    const __returned__ = {\n      detailTitle,\n      detailTitleId,\n      menuItems,\n      detailItems,\n      handleItemClick,\n      getMenuItems,\n      getQuestions,\n      TheHeader,\n      get axios() {\n        return axios;\n      },\n      ref,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["TheHeader","axios","ref","onMounted","ElMessage","detailTitle","detailTitleId","menuItems","detailItems","handleItemClick","itemId","itemName","value","getQuestions","getMenuItems","response","get","data","code","length","kindId","kindProblem","console","log","msg","error","toString","id","params"],"sources":["D:/有渔/前端源码/YouyuBBS-Q - 副本/youyu-lyn-qtnew-vision-new-2024.1.14/src/page/CustomerService/components/WebDesc.vue"],"sourcesContent":["<template>\r\n  <TheHeader/>\r\n  <div class=\"container\">\r\n    <div class=\"page\">\r\n      <div class=\"sidebar-pc\">\r\n        <el-aside width=\"200px\">\r\n          <div class=\"header\">\r\n            <img src=\"@/assets/CustomerServices/网站说明.svg\">\r\n            <div class=\"text\">网站说明</div>\r\n          </div>\r\n          <el-menu>\r\n            <el-menu-item \r\n              v-for=\" item in menuItems\" \r\n              :key=item.id  \r\n              class=\"item\" \r\n              :default-active=\"detailTitleId.value\" \r\n              :class=\"{ 'active': detailTitleId === item.kindId }\"   \r\n              @click= handleItemClick(item.kindId,item.kindProblem)>\r\n              {{ item.kindProblem }}\r\n            </el-menu-item>\r\n          </el-menu>\r\n        </el-aside>\r\n      </div>\r\n      <div style=\"background-color:#fff;width: 72%;\">\r\n        <div class=\"main\">\r\n          <div class=\"summary\">{{ detailTitle }}</div>\r\n          <div class=\"content\" v-for=\"(group, index) in detailItems\" :key=\"group.id\">\r\n            <div style=\"display: flex;gap: 2rem\">\r\n              <span style=\"color: #606fa0;font-weight: 700;\">Q{{ index + 1 }}</span>\r\n              <div>\r\n                <div>{{ group.problem }}</div>\r\n                <br>\r\n                <div>{{ group.answer }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport TheHeader from \"@/page/components/TheHeader.vue\";\r\nimport axios from '@/utils/request';\r\nimport {ref,onMounted} from 'vue';\r\nimport { ElMessage } from 'element-plus';\r\n\r\nconst detailTitle = ref('')//选中的问题类型名称\r\nconst detailTitleId = ref(null)//选中的问题类型ID\r\nconst menuItems = ref();//问题类型列表\r\nconst detailItems = ref();//某问题类型下对应的问题列表\r\n\r\nconst handleItemClick = (itemId,itemName) => {\r\n  detailTitleId.value = itemId;\r\n  detailTitle.value = itemName;\r\n  getQuestions(detailTitleId.value);\r\n}\r\n\r\n//获取网站说明类型\r\nasync function getMenuItems(){\r\n  try {\r\n    const response = await axios.get('/explain/list');\r\n    if(response.data.code === 1){\r\n      menuItems.value = response.data.data;\r\n      if (menuItems.value.length > 0) {\r\n        detailTitleId.value = menuItems.value[0].kindId;//页面加载时获取第一类问题id\r\n        detailTitle.value = menuItems.value[0].kindProblem;//页面加载时获取第一类问题的名称\r\n      } \r\n      console.log(response.data);\r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取问题类型数据失败\");\r\n        ElMessage.error(\"获取问题类型数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求问题类型接口失败\", error); \r\n    ElMessage.error(\"请求问题类型接口失败\");\r\n  }\r\n}\r\n\r\n//获取某一网站问题下的所有回答类型\r\nasync function getQuestions(id){\r\n  try {\r\n    const response = await axios.get('/explain/problem',{\r\n      params: {\r\n        kindId:id,\r\n      }\r\n    });\r\n    if(response.data.code === 1){\r\n      detailItems.value = response.data.data;\r\n      console.log(response.data); \r\n    }else if(response.data.code === 0 && response.data.msg){\r\n        ElMessage.error(response.data.msg.toString());\r\n    }else{\r\n        console.error(\"获取问题类型数据失败\");\r\n        ElMessage.error(\"获取问题类型数据失败\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"请求问题类型接口失败\", error); \r\n    ElMessage.error(\"请求问题类型接口失败\");\r\n  }\r\n}\r\n\r\nonMounted(async () => {\r\n  await getMenuItems();\r\n  await getQuestions(detailTitleId.value);\r\n})\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\nbody{\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n.text {\r\n  text-align: center;\r\n  color: #000;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 3rem;\r\n  width: 100%;\r\n  height: calc(100vh - 3rem);\r\n  background-color: #fafafa;\r\n}\r\n\r\n.sidebar-pc{\r\n    background-color: #fff;\r\n    padding: 2rem;\r\n    height: calc(98% - 4rem);\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n}\r\n.page {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 100%;\r\n  background-color: #FAFAFA;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  padding: 1rem 0;\r\n}\r\n\r\n.item.active,\r\n.item {\r\n  border-radius: 10px;\r\n  margin: 10px 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 16px;\r\n}  \r\n.item.active{\r\n  border: 1px solid;\r\n  color: #606fa0;\r\n  font-weight: 700;\r\n}\r\n.main{\r\n  width: 90%;\r\n  padding-top: 1rem;\r\n  height: calc(98% - 1rem);\r\n  padding-right: 3rem;\r\n  overflow-y: auto;\r\n  margin: 0 auto;\r\n}\r\n\r\n.summary{\r\n  display: flex;\r\n  color: #606FA0;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  background: #FFF;\r\n  padding: 16px 40px;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.content{\r\n  background: #FFF;\r\n  padding: 30px 40px;\r\n  border-top: 1px solid #E3E3E3;\r\n}\r\n\r\n.item:hover {\r\n  color: #606FA0;\r\n}\r\n\r\n/*去掉左侧菜单自带的右侧边框*/\r\n::v-deep .el-menu {\r\n  border: none !important;\r\n}\r\n/* 调整滚动条宽度和颜色 */\r\n::-webkit-scrollbar {\r\n    width: 6px; /* 增加纵向滚动条的宽度 */\r\n    height: 3px; /* 增加横向滚动条的高度 */\r\n    background: transparent;\r\n}\r\n\r\n/* 定义滚动条轨道，设置为透明 */\r\n::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 8px rgba(0, 0, 0, 0); /* 内阴影 */\r\n    background: transparent; /* 将轨道背景设置为透明 */\r\n}\r\n\r\n/* 定义滑块，设置为浅灰色并增加内阴影 */\r\n::-webkit-scrollbar-thumb {\r\n    box-shadow: inset 0 0 8px rgba(145, 145, 145, 0.3); /* 添加淡灰色内阴影 */\r\n    background-color: #e2e2e2; /* 滑块的颜色改为浅灰色 */\r\n    border-radius: 10px; /* 保持圆角不变 */\r\n}\r\n/* 当鼠标悬停在滚动条滑块上时改变滑块的颜色 */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #c8c8c8;\r\n}\r\n@media (max-width: 768px) {\r\n  .container{\r\n      justify-content: flex-start;\r\n      width: auto;\r\n  }\r\n  .page{\r\n      width: auto;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}